
article.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .redflash     00000001  0801f000  0801f000  0002f000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .text         00004fe0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000041c  080050f0  080050f0  000150f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800550c  0800550c  0002f001  2**0
                  CONTENTS
  5 .ARM          00000000  0800550c  0800550c  0002f001  2**0
                  CONTENTS
  6 .preinit_array 00000000  0800550c  0800550c  0002f001  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800550c  0800550c  0001550c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08005510  08005510  00015510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000001dc  20000000  08005514  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000098  200001e0  080056f0  000201e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000278  080056f0  00020278  2**0
                  ALLOC
 12 .ARM.attributes 00000029  00000000  00000000  0002f001  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006556  00000000  00000000  0002f02a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018f0  00000000  00000000  00035580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e8  00000000  00000000  00036e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000740  00000000  00000000  00037658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017a3f  00000000  00000000  00037d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008302  00000000  00000000  0004f7d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00083b77  00000000  00000000  00057ad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000db650  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f14  00000000  00000000  000db6a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	080050d8 	.word	0x080050d8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	080050d8 	.word	0x080050d8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000a90:	1d39      	adds	r1, r7, #4
 8000a92:	f04f 33ff 	mov.w	r3, #4294967295
 8000a96:	2201      	movs	r2, #1
 8000a98:	4803      	ldr	r0, [pc, #12]	; (8000aa8 <__io_putchar+0x20>)
 8000a9a:	f001 fc5a 	bl	8002352 <HAL_UART_Transmit>
  return ch;
 8000a9e:	687b      	ldr	r3, [r7, #4]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	200001fc 	.word	0x200001fc

08000aac <updateCounter>:



static HAL_StatusTypeDef updateCounter(void){
 8000aac:	b5b0      	push	{r4, r5, r7, lr}
 8000aae:	b088      	sub	sp, #32
 8000ab0:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8000ab2:	f000 fc99 	bl	80013e8 <HAL_FLASH_Unlock>
	uint32_t newResetCount = resetCount + 1;
 8000ab6:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <updateCounter+0x70>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	3301      	adds	r3, #1
 8000abc:	61fb      	str	r3, [r7, #28]
	uint32_t pageError = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
	FLASH_EraseInitTypeDef eraseInfo = {.TypeErase = FLASH_TYPEERASE_PAGES,
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
			                            .PageAddress = (uint32_t)&resetCount,
 8000ace:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <updateCounter+0x70>)
	FLASH_EraseInitTypeDef eraseInfo = {.TypeErase = FLASH_TYPEERASE_PAGES,
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	613b      	str	r3, [r7, #16]
										.NbPages = 1
	};

	HAL_StatusTypeDef result =HAL_FLASHEx_Erase(&eraseInfo, &pageError);
 8000ad6:	f107 0214 	add.w	r2, r7, #20
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	4611      	mov	r1, r2
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 fd6a 	bl	80015b8 <HAL_FLASHEx_Erase>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	76fb      	strb	r3, [r7, #27]

	if (result != HAL_OK) {
 8000ae8:	7efb      	ldrb	r3, [r7, #27]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d003      	beq.n	8000af6 <updateCounter+0x4a>
	HAL_FLASH_Lock();
 8000aee:	f000 fca1 	bl	8001434 <HAL_FLASH_Lock>
	return (result);
 8000af2:	7efb      	ldrb	r3, [r7, #27]
 8000af4:	e00e      	b.n	8000b14 <updateCounter+0x68>
	}

	result =HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(uint32_t)&resetCount, newResetCount);
 8000af6:	4909      	ldr	r1, [pc, #36]	; (8000b1c <updateCounter+0x70>)
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	2200      	movs	r2, #0
 8000afc:	461c      	mov	r4, r3
 8000afe:	4615      	mov	r5, r2
 8000b00:	4622      	mov	r2, r4
 8000b02:	462b      	mov	r3, r5
 8000b04:	2002      	movs	r0, #2
 8000b06:	f000 fbff 	bl	8001308 <HAL_FLASH_Program>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	76fb      	strb	r3, [r7, #27]
	HAL_FLASH_Lock();
 8000b0e:	f000 fc91 	bl	8001434 <HAL_FLASH_Lock>
	return (result);
 8000b12:	7efb      	ldrb	r3, [r7, #27]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3720      	adds	r7, #32
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bdb0      	pop	{r4, r5, r7, pc}
 8000b1c:	0801f000 	.word	0x0801f000

08000b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b24:	f000 fa80 	bl	8001028 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b28:	f000 f812 	bl	8000b50 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  updateCounter();
 8000b2c:	f7ff ffbe 	bl	8000aac <updateCounter>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b30:	f000 f87a 	bl	8000c28 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b34:	f000 f84e 	bl	8000bd4 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("Number of resets: %d\n", resetCount);
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <main+0x28>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4803      	ldr	r0, [pc, #12]	; (8000b4c <main+0x2c>)
 8000b40:	f002 fa04 	bl	8002f4c <iprintf>
 8000b44:	e7f8      	b.n	8000b38 <main+0x18>
 8000b46:	bf00      	nop
 8000b48:	0801f000 	.word	0x0801f000
 8000b4c:	080050f0 	.word	0x080050f0

08000b50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b090      	sub	sp, #64	; 0x40
 8000b54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b56:	f107 0318 	add.w	r3, r7, #24
 8000b5a:	2228      	movs	r2, #40	; 0x28
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f001 fd8c 	bl	800267c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b72:	2302      	movs	r3, #2
 8000b74:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b76:	2301      	movs	r3, #1
 8000b78:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b7a:	2310      	movs	r3, #16
 8000b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000b82:	2300      	movs	r3, #0
 8000b84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000b86:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b8c:	f107 0318 	add.w	r3, r7, #24
 8000b90:	4618      	mov	r0, r3
 8000b92:	f000 ff77 	bl	8001a84 <HAL_RCC_OscConfig>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000b9c:	f000 f8b2 	bl	8000d04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba0:	230f      	movs	r3, #15
 8000ba2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	2102      	movs	r1, #2
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f001 f9e4 	bl	8001f88 <HAL_RCC_ClockConfig>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000bc6:	f000 f89d 	bl	8000d04 <Error_Handler>
  }
}
 8000bca:	bf00      	nop
 8000bcc:	3740      	adds	r7, #64	; 0x40
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bd8:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <MX_USART2_UART_Init+0x4c>)
 8000bda:	4a12      	ldr	r2, [pc, #72]	; (8000c24 <MX_USART2_UART_Init+0x50>)
 8000bdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 600;
 8000bde:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <MX_USART2_UART_Init+0x4c>)
 8000be0:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000be4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000be6:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <MX_USART2_UART_Init+0x4c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <MX_USART2_UART_Init+0x4c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <MX_USART2_UART_Init+0x4c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bf8:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <MX_USART2_UART_Init+0x4c>)
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfe:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <MX_USART2_UART_Init+0x4c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <MX_USART2_UART_Init+0x4c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c0a:	4805      	ldr	r0, [pc, #20]	; (8000c20 <MX_USART2_UART_Init+0x4c>)
 8000c0c:	f001 fb54 	bl	80022b8 <HAL_UART_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c16:	f000 f875 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	200001fc 	.word	0x200001fc
 8000c24:	40004400 	.word	0x40004400

08000c28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2e:	f107 0310 	add.w	r3, r7, #16
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3c:	4b2d      	ldr	r3, [pc, #180]	; (8000cf4 <MX_GPIO_Init+0xcc>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4a2c      	ldr	r2, [pc, #176]	; (8000cf4 <MX_GPIO_Init+0xcc>)
 8000c42:	f043 0310 	orr.w	r3, r3, #16
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4b2a      	ldr	r3, [pc, #168]	; (8000cf4 <MX_GPIO_Init+0xcc>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f003 0310 	and.w	r3, r3, #16
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c54:	4b27      	ldr	r3, [pc, #156]	; (8000cf4 <MX_GPIO_Init+0xcc>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	4a26      	ldr	r2, [pc, #152]	; (8000cf4 <MX_GPIO_Init+0xcc>)
 8000c5a:	f043 0320 	orr.w	r3, r3, #32
 8000c5e:	6193      	str	r3, [r2, #24]
 8000c60:	4b24      	ldr	r3, [pc, #144]	; (8000cf4 <MX_GPIO_Init+0xcc>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	f003 0320 	and.w	r3, r3, #32
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6c:	4b21      	ldr	r3, [pc, #132]	; (8000cf4 <MX_GPIO_Init+0xcc>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	4a20      	ldr	r2, [pc, #128]	; (8000cf4 <MX_GPIO_Init+0xcc>)
 8000c72:	f043 0304 	orr.w	r3, r3, #4
 8000c76:	6193      	str	r3, [r2, #24]
 8000c78:	4b1e      	ldr	r3, [pc, #120]	; (8000cf4 <MX_GPIO_Init+0xcc>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	f003 0304 	and.w	r3, r3, #4
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c84:	4b1b      	ldr	r3, [pc, #108]	; (8000cf4 <MX_GPIO_Init+0xcc>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	4a1a      	ldr	r2, [pc, #104]	; (8000cf4 <MX_GPIO_Init+0xcc>)
 8000c8a:	f043 0308 	orr.w	r3, r3, #8
 8000c8e:	6193      	str	r3, [r2, #24]
 8000c90:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <MX_GPIO_Init+0xcc>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	f003 0308 	and.w	r3, r3, #8
 8000c98:	603b      	str	r3, [r7, #0]
 8000c9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2120      	movs	r1, #32
 8000ca0:	4815      	ldr	r0, [pc, #84]	; (8000cf8 <MX_GPIO_Init+0xd0>)
 8000ca2:	f000 feb5 	bl	8001a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ca6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000caa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cac:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <MX_GPIO_Init+0xd4>)
 8000cae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 0310 	add.w	r3, r7, #16
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4811      	ldr	r0, [pc, #68]	; (8000d00 <MX_GPIO_Init+0xd8>)
 8000cbc:	f000 fd24 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cc0:	2320      	movs	r3, #32
 8000cc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	f107 0310 	add.w	r3, r7, #16
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4808      	ldr	r0, [pc, #32]	; (8000cf8 <MX_GPIO_Init+0xd0>)
 8000cd8:	f000 fd16 	bl	8001708 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2100      	movs	r1, #0
 8000ce0:	2028      	movs	r0, #40	; 0x28
 8000ce2:	f000 fada 	bl	800129a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ce6:	2028      	movs	r0, #40	; 0x28
 8000ce8:	f000 faf3 	bl	80012d2 <HAL_NVIC_EnableIRQ>

}
 8000cec:	bf00      	nop
 8000cee:	3720      	adds	r7, #32
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	40010800 	.word	0x40010800
 8000cfc:	10110000 	.word	0x10110000
 8000d00:	40011000 	.word	0x40011000

08000d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d08:	b672      	cpsid	i
}
 8000d0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <Error_Handler+0x8>
	...

08000d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <HAL_MspInit+0x5c>)
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	4a14      	ldr	r2, [pc, #80]	; (8000d6c <HAL_MspInit+0x5c>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6193      	str	r3, [r2, #24]
 8000d22:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_MspInit+0x5c>)
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <HAL_MspInit+0x5c>)
 8000d30:	69db      	ldr	r3, [r3, #28]
 8000d32:	4a0e      	ldr	r2, [pc, #56]	; (8000d6c <HAL_MspInit+0x5c>)
 8000d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d38:	61d3      	str	r3, [r2, #28]
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <HAL_MspInit+0x5c>)
 8000d3c:	69db      	ldr	r3, [r3, #28]
 8000d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <HAL_MspInit+0x60>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <HAL_MspInit+0x60>)
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d62:	bf00      	nop
 8000d64:	3714      	adds	r7, #20
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	40010000 	.word	0x40010000

08000d74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b088      	sub	sp, #32
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0310 	add.w	r3, r7, #16
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a15      	ldr	r2, [pc, #84]	; (8000de4 <HAL_UART_MspInit+0x70>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d123      	bne.n	8000ddc <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d94:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <HAL_UART_MspInit+0x74>)
 8000d96:	69db      	ldr	r3, [r3, #28]
 8000d98:	4a13      	ldr	r2, [pc, #76]	; (8000de8 <HAL_UART_MspInit+0x74>)
 8000d9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d9e:	61d3      	str	r3, [r2, #28]
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <HAL_UART_MspInit+0x74>)
 8000da2:	69db      	ldr	r3, [r3, #28]
 8000da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dac:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <HAL_UART_MspInit+0x74>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	4a0d      	ldr	r2, [pc, #52]	; (8000de8 <HAL_UART_MspInit+0x74>)
 8000db2:	f043 0304 	orr.w	r3, r3, #4
 8000db6:	6193      	str	r3, [r2, #24]
 8000db8:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <HAL_UART_MspInit+0x74>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	f003 0304 	and.w	r3, r3, #4
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dc4:	230c      	movs	r3, #12
 8000dc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4805      	ldr	r0, [pc, #20]	; (8000dec <HAL_UART_MspInit+0x78>)
 8000dd8:	f000 fc96 	bl	8001708 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ddc:	bf00      	nop
 8000dde:	3720      	adds	r7, #32
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40004400 	.word	0x40004400
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40010800 	.word	0x40010800

08000df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <NMI_Handler+0x4>

08000df6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <HardFault_Handler+0x4>

08000dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <MemManage_Handler+0x4>

08000e02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <BusFault_Handler+0x4>

08000e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <UsageFault_Handler+0x4>

08000e0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr

08000e1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr

08000e26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr

08000e32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e36:	f000 f93d 	bl	80010b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000e42:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e46:	f000 fdfb 	bl	8001a40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
	return 1;
 8000e52:	2301      	movs	r3, #1
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr

08000e5c <_kill>:

int _kill(int pid, int sig)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e66:	f001 fbdf 	bl	8002628 <__errno>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2216      	movs	r2, #22
 8000e6e:	601a      	str	r2, [r3, #0]
	return -1;
 8000e70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <_exit>:

void _exit (int status)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e84:	f04f 31ff 	mov.w	r1, #4294967295
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff ffe7 	bl	8000e5c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e8e:	e7fe      	b.n	8000e8e <_exit+0x12>

08000e90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	e00a      	b.n	8000eb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ea2:	f3af 8000 	nop.w
 8000ea6:	4601      	mov	r1, r0
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	1c5a      	adds	r2, r3, #1
 8000eac:	60ba      	str	r2, [r7, #8]
 8000eae:	b2ca      	uxtb	r2, r1
 8000eb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	697a      	ldr	r2, [r7, #20]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	dbf0      	blt.n	8000ea2 <_read+0x12>
	}

return len;
 8000ec0:	687b      	ldr	r3, [r7, #4]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b086      	sub	sp, #24
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	60f8      	str	r0, [r7, #12]
 8000ed2:	60b9      	str	r1, [r7, #8]
 8000ed4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	e009      	b.n	8000ef0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	1c5a      	adds	r2, r3, #1
 8000ee0:	60ba      	str	r2, [r7, #8]
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fdcf 	bl	8000a88 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	3301      	adds	r3, #1
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	697a      	ldr	r2, [r7, #20]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	dbf1      	blt.n	8000edc <_write+0x12>
	}
	return len;
 8000ef8:	687b      	ldr	r3, [r7, #4]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <_close>:

int _close(int file)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
	return -1;
 8000f0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr

08000f18 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f28:	605a      	str	r2, [r3, #4]
	return 0;
 8000f2a:	2300      	movs	r3, #0
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr

08000f36 <_isatty>:

int _isatty(int file)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
	return 1;
 8000f3e:	2301      	movs	r3, #1
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr

08000f4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b085      	sub	sp, #20
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	60f8      	str	r0, [r7, #12]
 8000f52:	60b9      	str	r1, [r7, #8]
 8000f54:	607a      	str	r2, [r7, #4]
	return 0;
 8000f56:	2300      	movs	r3, #0
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr
	...

08000f64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f6c:	4a14      	ldr	r2, [pc, #80]	; (8000fc0 <_sbrk+0x5c>)
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <_sbrk+0x60>)
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <_sbrk+0x64>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d102      	bne.n	8000f86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <_sbrk+0x64>)
 8000f82:	4a12      	ldr	r2, [pc, #72]	; (8000fcc <_sbrk+0x68>)
 8000f84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <_sbrk+0x64>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d207      	bcs.n	8000fa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f94:	f001 fb48 	bl	8002628 <__errno>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	220c      	movs	r2, #12
 8000f9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa2:	e009      	b.n	8000fb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <_sbrk+0x64>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000faa:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <_sbrk+0x64>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <_sbrk+0x64>)
 8000fb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3718      	adds	r7, #24
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20005000 	.word	0x20005000
 8000fc4:	00000400 	.word	0x00000400
 8000fc8:	20000240 	.word	0x20000240
 8000fcc:	20000278 	.word	0x20000278

08000fd0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr

08000fdc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fdc:	480c      	ldr	r0, [pc, #48]	; (8001010 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fde:	490d      	ldr	r1, [pc, #52]	; (8001014 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fe0:	4a0d      	ldr	r2, [pc, #52]	; (8001018 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe4:	e002      	b.n	8000fec <LoopCopyDataInit>

08000fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fea:	3304      	adds	r3, #4

08000fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff0:	d3f9      	bcc.n	8000fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	; (800101c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ff4:	4c0a      	ldr	r4, [pc, #40]	; (8001020 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff8:	e001      	b.n	8000ffe <LoopFillZerobss>

08000ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ffc:	3204      	adds	r2, #4

08000ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001000:	d3fb      	bcc.n	8000ffa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001002:	f7ff ffe5 	bl	8000fd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001006:	f001 fb15 	bl	8002634 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800100a:	f7ff fd89 	bl	8000b20 <main>
  bx lr
 800100e:	4770      	bx	lr
  ldr r0, =_sdata
 8001010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001014:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001018:	08005514 	.word	0x08005514
  ldr r2, =_sbss
 800101c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001020:	20000278 	.word	0x20000278

08001024 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001024:	e7fe      	b.n	8001024 <ADC1_2_IRQHandler>
	...

08001028 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <HAL_Init+0x28>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a07      	ldr	r2, [pc, #28]	; (8001050 <HAL_Init+0x28>)
 8001032:	f043 0310 	orr.w	r3, r3, #16
 8001036:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001038:	2003      	movs	r0, #3
 800103a:	f000 f923 	bl	8001284 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800103e:	2000      	movs	r0, #0
 8001040:	f000 f808 	bl	8001054 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001044:	f7ff fe64 	bl	8000d10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40022000 	.word	0x40022000

08001054 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_InitTick+0x54>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <HAL_InitTick+0x58>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	4619      	mov	r1, r3
 8001066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106a:	fbb3 f3f1 	udiv	r3, r3, r1
 800106e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f93b 	bl	80012ee <HAL_SYSTICK_Config>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e00e      	b.n	80010a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b0f      	cmp	r3, #15
 8001086:	d80a      	bhi.n	800109e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001088:	2200      	movs	r2, #0
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	f04f 30ff 	mov.w	r0, #4294967295
 8001090:	f000 f903 	bl	800129a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001094:	4a06      	ldr	r2, [pc, #24]	; (80010b0 <HAL_InitTick+0x5c>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800109a:	2300      	movs	r3, #0
 800109c:	e000      	b.n	80010a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000000 	.word	0x20000000
 80010ac:	20000008 	.word	0x20000008
 80010b0:	20000004 	.word	0x20000004

080010b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <HAL_IncTick+0x1c>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	461a      	mov	r2, r3
 80010be:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <HAL_IncTick+0x20>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4413      	add	r3, r2
 80010c4:	4a03      	ldr	r2, [pc, #12]	; (80010d4 <HAL_IncTick+0x20>)
 80010c6:	6013      	str	r3, [r2, #0]
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	20000008 	.word	0x20000008
 80010d4:	20000244 	.word	0x20000244

080010d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return uwTick;
 80010dc:	4b02      	ldr	r3, [pc, #8]	; (80010e8 <HAL_GetTick+0x10>)
 80010de:	681b      	ldr	r3, [r3, #0]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	20000244 	.word	0x20000244

080010ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001108:	4013      	ands	r3, r2
 800110a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001114:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800111c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111e:	4a04      	ldr	r2, [pc, #16]	; (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	60d3      	str	r3, [r2, #12]
}
 8001124:	bf00      	nop
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001138:	4b04      	ldr	r3, [pc, #16]	; (800114c <__NVIC_GetPriorityGrouping+0x18>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	f003 0307 	and.w	r3, r3, #7
}
 8001142:	4618      	mov	r0, r3
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	2b00      	cmp	r3, #0
 8001160:	db0b      	blt.n	800117a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	f003 021f 	and.w	r2, r3, #31
 8001168:	4906      	ldr	r1, [pc, #24]	; (8001184 <__NVIC_EnableIRQ+0x34>)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	095b      	lsrs	r3, r3, #5
 8001170:	2001      	movs	r0, #1
 8001172:	fa00 f202 	lsl.w	r2, r0, r2
 8001176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr
 8001184:	e000e100 	.word	0xe000e100

08001188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	6039      	str	r1, [r7, #0]
 8001192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001198:	2b00      	cmp	r3, #0
 800119a:	db0a      	blt.n	80011b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	490c      	ldr	r1, [pc, #48]	; (80011d4 <__NVIC_SetPriority+0x4c>)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	0112      	lsls	r2, r2, #4
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	440b      	add	r3, r1
 80011ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b0:	e00a      	b.n	80011c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4908      	ldr	r1, [pc, #32]	; (80011d8 <__NVIC_SetPriority+0x50>)
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	f003 030f 	and.w	r3, r3, #15
 80011be:	3b04      	subs	r3, #4
 80011c0:	0112      	lsls	r2, r2, #4
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	440b      	add	r3, r1
 80011c6:	761a      	strb	r2, [r3, #24]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000e100 	.word	0xe000e100
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b089      	sub	sp, #36	; 0x24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f1c3 0307 	rsb	r3, r3, #7
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	bf28      	it	cs
 80011fa:	2304      	movcs	r3, #4
 80011fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3304      	adds	r3, #4
 8001202:	2b06      	cmp	r3, #6
 8001204:	d902      	bls.n	800120c <NVIC_EncodePriority+0x30>
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3b03      	subs	r3, #3
 800120a:	e000      	b.n	800120e <NVIC_EncodePriority+0x32>
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	f04f 32ff 	mov.w	r2, #4294967295
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43da      	mvns	r2, r3
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	401a      	ands	r2, r3
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001224:	f04f 31ff 	mov.w	r1, #4294967295
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	fa01 f303 	lsl.w	r3, r1, r3
 800122e:	43d9      	mvns	r1, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	4313      	orrs	r3, r2
         );
}
 8001236:	4618      	mov	r0, r3
 8001238:	3724      	adds	r7, #36	; 0x24
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr

08001240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3b01      	subs	r3, #1
 800124c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001250:	d301      	bcc.n	8001256 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001252:	2301      	movs	r3, #1
 8001254:	e00f      	b.n	8001276 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001256:	4a0a      	ldr	r2, [pc, #40]	; (8001280 <SysTick_Config+0x40>)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3b01      	subs	r3, #1
 800125c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800125e:	210f      	movs	r1, #15
 8001260:	f04f 30ff 	mov.w	r0, #4294967295
 8001264:	f7ff ff90 	bl	8001188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <SysTick_Config+0x40>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800126e:	4b04      	ldr	r3, [pc, #16]	; (8001280 <SysTick_Config+0x40>)
 8001270:	2207      	movs	r2, #7
 8001272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	e000e010 	.word	0xe000e010

08001284 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff ff2d 	bl	80010ec <__NVIC_SetPriorityGrouping>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800129a:	b580      	push	{r7, lr}
 800129c:	b086      	sub	sp, #24
 800129e:	af00      	add	r7, sp, #0
 80012a0:	4603      	mov	r3, r0
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
 80012a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ac:	f7ff ff42 	bl	8001134 <__NVIC_GetPriorityGrouping>
 80012b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	68b9      	ldr	r1, [r7, #8]
 80012b6:	6978      	ldr	r0, [r7, #20]
 80012b8:	f7ff ff90 	bl	80011dc <NVIC_EncodePriority>
 80012bc:	4602      	mov	r2, r0
 80012be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c2:	4611      	mov	r1, r2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff5f 	bl	8001188 <__NVIC_SetPriority>
}
 80012ca:	bf00      	nop
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	4603      	mov	r3, r0
 80012da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff35 	bl	8001150 <__NVIC_EnableIRQ>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff ffa2 	bl	8001240 <SysTick_Config>
 80012fc:	4603      	mov	r3, r0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800130a:	b087      	sub	sp, #28
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001322:	4b2f      	ldr	r3, [pc, #188]	; (80013e0 <HAL_FLASH_Program+0xd8>)
 8001324:	7e1b      	ldrb	r3, [r3, #24]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d101      	bne.n	800132e <HAL_FLASH_Program+0x26>
 800132a:	2302      	movs	r3, #2
 800132c:	e054      	b.n	80013d8 <HAL_FLASH_Program+0xd0>
 800132e:	4b2c      	ldr	r3, [pc, #176]	; (80013e0 <HAL_FLASH_Program+0xd8>)
 8001330:	2201      	movs	r2, #1
 8001332:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001334:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001338:	f000 f8a8 	bl	800148c <FLASH_WaitForLastOperation>
 800133c:	4603      	mov	r3, r0
 800133e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001340:	7dfb      	ldrb	r3, [r7, #23]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d144      	bne.n	80013d0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d102      	bne.n	8001352 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800134c:	2301      	movs	r3, #1
 800134e:	757b      	strb	r3, [r7, #21]
 8001350:	e007      	b.n	8001362 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2b02      	cmp	r3, #2
 8001356:	d102      	bne.n	800135e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001358:	2302      	movs	r3, #2
 800135a:	757b      	strb	r3, [r7, #21]
 800135c:	e001      	b.n	8001362 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800135e:	2304      	movs	r3, #4
 8001360:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001362:	2300      	movs	r3, #0
 8001364:	75bb      	strb	r3, [r7, #22]
 8001366:	e02d      	b.n	80013c4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001368:	7dbb      	ldrb	r3, [r7, #22]
 800136a:	005a      	lsls	r2, r3, #1
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	eb02 0c03 	add.w	ip, r2, r3
 8001372:	7dbb      	ldrb	r3, [r7, #22]
 8001374:	0119      	lsls	r1, r3, #4
 8001376:	e9d7 2300 	ldrd	r2, r3, [r7]
 800137a:	f1c1 0620 	rsb	r6, r1, #32
 800137e:	f1a1 0020 	sub.w	r0, r1, #32
 8001382:	fa22 f401 	lsr.w	r4, r2, r1
 8001386:	fa03 f606 	lsl.w	r6, r3, r6
 800138a:	4334      	orrs	r4, r6
 800138c:	fa23 f000 	lsr.w	r0, r3, r0
 8001390:	4304      	orrs	r4, r0
 8001392:	fa23 f501 	lsr.w	r5, r3, r1
 8001396:	b2a3      	uxth	r3, r4
 8001398:	4619      	mov	r1, r3
 800139a:	4660      	mov	r0, ip
 800139c:	f000 f85a 	bl	8001454 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80013a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013a4:	f000 f872 	bl	800148c <FLASH_WaitForLastOperation>
 80013a8:	4603      	mov	r3, r0
 80013aa:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80013ac:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <HAL_FLASH_Program+0xdc>)
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	4a0c      	ldr	r2, [pc, #48]	; (80013e4 <HAL_FLASH_Program+0xdc>)
 80013b2:	f023 0301 	bic.w	r3, r3, #1
 80013b6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80013b8:	7dfb      	ldrb	r3, [r7, #23]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d107      	bne.n	80013ce <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80013be:	7dbb      	ldrb	r3, [r7, #22]
 80013c0:	3301      	adds	r3, #1
 80013c2:	75bb      	strb	r3, [r7, #22]
 80013c4:	7dba      	ldrb	r2, [r7, #22]
 80013c6:	7d7b      	ldrb	r3, [r7, #21]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d3cd      	bcc.n	8001368 <HAL_FLASH_Program+0x60>
 80013cc:	e000      	b.n	80013d0 <HAL_FLASH_Program+0xc8>
      {
        break;
 80013ce:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80013d0:	4b03      	ldr	r3, [pc, #12]	; (80013e0 <HAL_FLASH_Program+0xd8>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	761a      	strb	r2, [r3, #24]

  return status;
 80013d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	371c      	adds	r7, #28
 80013dc:	46bd      	mov	sp, r7
 80013de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013e0:	20000248 	.word	0x20000248
 80013e4:	40022000 	.word	0x40022000

080013e8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80013ee:	2300      	movs	r3, #0
 80013f0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <HAL_FLASH_Unlock+0x40>)
 80013f4:	691b      	ldr	r3, [r3, #16]
 80013f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d00d      	beq.n	800141a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <HAL_FLASH_Unlock+0x40>)
 8001400:	4a0a      	ldr	r2, [pc, #40]	; (800142c <HAL_FLASH_Unlock+0x44>)
 8001402:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001404:	4b08      	ldr	r3, [pc, #32]	; (8001428 <HAL_FLASH_Unlock+0x40>)
 8001406:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <HAL_FLASH_Unlock+0x48>)
 8001408:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800140a:	4b07      	ldr	r3, [pc, #28]	; (8001428 <HAL_FLASH_Unlock+0x40>)
 800140c:	691b      	ldr	r3, [r3, #16]
 800140e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800141a:	79fb      	ldrb	r3, [r7, #7]
}
 800141c:	4618      	mov	r0, r3
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40022000 	.word	0x40022000
 800142c:	45670123 	.word	0x45670123
 8001430:	cdef89ab 	.word	0xcdef89ab

08001434 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <HAL_FLASH_Lock+0x1c>)
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	4a04      	ldr	r2, [pc, #16]	; (8001450 <HAL_FLASH_Lock+0x1c>)
 800143e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001442:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	40022000 	.word	0x40022000

08001454 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001460:	4b08      	ldr	r3, [pc, #32]	; (8001484 <FLASH_Program_HalfWord+0x30>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001466:	4b08      	ldr	r3, [pc, #32]	; (8001488 <FLASH_Program_HalfWord+0x34>)
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	4a07      	ldr	r2, [pc, #28]	; (8001488 <FLASH_Program_HalfWord+0x34>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	887a      	ldrh	r2, [r7, #2]
 8001476:	801a      	strh	r2, [r3, #0]
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	20000248 	.word	0x20000248
 8001488:	40022000 	.word	0x40022000

0800148c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001494:	f7ff fe20 	bl	80010d8 <HAL_GetTick>
 8001498:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800149a:	e010      	b.n	80014be <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a2:	d00c      	beq.n	80014be <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d007      	beq.n	80014ba <FLASH_WaitForLastOperation+0x2e>
 80014aa:	f7ff fe15 	bl	80010d8 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d201      	bcs.n	80014be <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e025      	b.n	800150a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <FLASH_WaitForLastOperation+0x88>)
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1e8      	bne.n	800149c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80014ca:	4b12      	ldr	r3, [pc, #72]	; (8001514 <FLASH_WaitForLastOperation+0x88>)
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	f003 0320 	and.w	r3, r3, #32
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d002      	beq.n	80014dc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80014d6:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <FLASH_WaitForLastOperation+0x88>)
 80014d8:	2220      	movs	r2, #32
 80014da:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80014dc:	4b0d      	ldr	r3, [pc, #52]	; (8001514 <FLASH_WaitForLastOperation+0x88>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	f003 0310 	and.w	r3, r3, #16
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d10b      	bne.n	8001500 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80014e8:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <FLASH_WaitForLastOperation+0x88>)
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d105      	bne.n	8001500 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80014f4:	4b07      	ldr	r3, [pc, #28]	; (8001514 <FLASH_WaitForLastOperation+0x88>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d003      	beq.n	8001508 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001500:	f000 f80a 	bl	8001518 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e000      	b.n	800150a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40022000 	.word	0x40022000

08001518 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001522:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <FLASH_SetErrorCode+0x98>)
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	f003 0310 	and.w	r3, r3, #16
 800152a:	2b00      	cmp	r3, #0
 800152c:	d009      	beq.n	8001542 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800152e:	4b21      	ldr	r3, [pc, #132]	; (80015b4 <FLASH_SetErrorCode+0x9c>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	f043 0302 	orr.w	r3, r3, #2
 8001536:	4a1f      	ldr	r2, [pc, #124]	; (80015b4 <FLASH_SetErrorCode+0x9c>)
 8001538:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f043 0310 	orr.w	r3, r3, #16
 8001540:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001542:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <FLASH_SetErrorCode+0x98>)
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	f003 0304 	and.w	r3, r3, #4
 800154a:	2b00      	cmp	r3, #0
 800154c:	d009      	beq.n	8001562 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800154e:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <FLASH_SetErrorCode+0x9c>)
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	4a17      	ldr	r2, [pc, #92]	; (80015b4 <FLASH_SetErrorCode+0x9c>)
 8001558:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f043 0304 	orr.w	r3, r3, #4
 8001560:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001562:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <FLASH_SetErrorCode+0x98>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00b      	beq.n	8001586 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <FLASH_SetErrorCode+0x9c>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	f043 0304 	orr.w	r3, r3, #4
 8001576:	4a0f      	ldr	r2, [pc, #60]	; (80015b4 <FLASH_SetErrorCode+0x9c>)
 8001578:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800157a:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <FLASH_SetErrorCode+0x98>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	4a0c      	ldr	r2, [pc, #48]	; (80015b0 <FLASH_SetErrorCode+0x98>)
 8001580:	f023 0301 	bic.w	r3, r3, #1
 8001584:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f240 1201 	movw	r2, #257	; 0x101
 800158c:	4293      	cmp	r3, r2
 800158e:	d106      	bne.n	800159e <FLASH_SetErrorCode+0x86>
 8001590:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <FLASH_SetErrorCode+0x98>)
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	4a06      	ldr	r2, [pc, #24]	; (80015b0 <FLASH_SetErrorCode+0x98>)
 8001596:	f023 0301 	bic.w	r3, r3, #1
 800159a:	61d3      	str	r3, [r2, #28]
}  
 800159c:	e002      	b.n	80015a4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800159e:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <FLASH_SetErrorCode+0x98>)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	60d3      	str	r3, [r2, #12]
}  
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	40022000 	.word	0x40022000
 80015b4:	20000248 	.word	0x20000248

080015b8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80015ca:	4b2f      	ldr	r3, [pc, #188]	; (8001688 <HAL_FLASHEx_Erase+0xd0>)
 80015cc:	7e1b      	ldrb	r3, [r3, #24]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d101      	bne.n	80015d6 <HAL_FLASHEx_Erase+0x1e>
 80015d2:	2302      	movs	r3, #2
 80015d4:	e053      	b.n	800167e <HAL_FLASHEx_Erase+0xc6>
 80015d6:	4b2c      	ldr	r3, [pc, #176]	; (8001688 <HAL_FLASHEx_Erase+0xd0>)
 80015d8:	2201      	movs	r2, #1
 80015da:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d116      	bne.n	8001612 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80015e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015e8:	f7ff ff50 	bl	800148c <FLASH_WaitForLastOperation>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d141      	bne.n	8001676 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80015f2:	2001      	movs	r0, #1
 80015f4:	f000 f84c 	bl	8001690 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80015f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015fc:	f7ff ff46 	bl	800148c <FLASH_WaitForLastOperation>
 8001600:	4603      	mov	r3, r0
 8001602:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001604:	4b21      	ldr	r3, [pc, #132]	; (800168c <HAL_FLASHEx_Erase+0xd4>)
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	4a20      	ldr	r2, [pc, #128]	; (800168c <HAL_FLASHEx_Erase+0xd4>)
 800160a:	f023 0304 	bic.w	r3, r3, #4
 800160e:	6113      	str	r3, [r2, #16]
 8001610:	e031      	b.n	8001676 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001612:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001616:	f7ff ff39 	bl	800148c <FLASH_WaitForLastOperation>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d12a      	bne.n	8001676 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	f04f 32ff 	mov.w	r2, #4294967295
 8001626:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	e019      	b.n	8001664 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001630:	68b8      	ldr	r0, [r7, #8]
 8001632:	f000 f849 	bl	80016c8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001636:	f24c 3050 	movw	r0, #50000	; 0xc350
 800163a:	f7ff ff27 	bl	800148c <FLASH_WaitForLastOperation>
 800163e:	4603      	mov	r3, r0
 8001640:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001642:	4b12      	ldr	r3, [pc, #72]	; (800168c <HAL_FLASHEx_Erase+0xd4>)
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	4a11      	ldr	r2, [pc, #68]	; (800168c <HAL_FLASHEx_Erase+0xd4>)
 8001648:	f023 0302 	bic.w	r3, r3, #2
 800164c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	601a      	str	r2, [r3, #0]
            break;
 800165a:	e00c      	b.n	8001676 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001662:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	029a      	lsls	r2, r3, #10
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8001670:	68ba      	ldr	r2, [r7, #8]
 8001672:	429a      	cmp	r2, r3
 8001674:	d3dc      	bcc.n	8001630 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001676:	4b04      	ldr	r3, [pc, #16]	; (8001688 <HAL_FLASHEx_Erase+0xd0>)
 8001678:	2200      	movs	r2, #0
 800167a:	761a      	strb	r2, [r3, #24]

  return status;
 800167c:	7bfb      	ldrb	r3, [r7, #15]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000248 	.word	0x20000248
 800168c:	40022000 	.word	0x40022000

08001690 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001698:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <FLASH_MassErase+0x30>)
 800169a:	2200      	movs	r2, #0
 800169c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <FLASH_MassErase+0x34>)
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	4a08      	ldr	r2, [pc, #32]	; (80016c4 <FLASH_MassErase+0x34>)
 80016a4:	f043 0304 	orr.w	r3, r3, #4
 80016a8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <FLASH_MassErase+0x34>)
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	4a05      	ldr	r2, [pc, #20]	; (80016c4 <FLASH_MassErase+0x34>)
 80016b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016b4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr
 80016c0:	20000248 	.word	0x20000248
 80016c4:	40022000 	.word	0x40022000

080016c8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80016d0:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <FLASH_PageErase+0x38>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <FLASH_PageErase+0x3c>)
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	4a0a      	ldr	r2, [pc, #40]	; (8001704 <FLASH_PageErase+0x3c>)
 80016dc:	f043 0302 	orr.w	r3, r3, #2
 80016e0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80016e2:	4a08      	ldr	r2, [pc, #32]	; (8001704 <FLASH_PageErase+0x3c>)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <FLASH_PageErase+0x3c>)
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	4a05      	ldr	r2, [pc, #20]	; (8001704 <FLASH_PageErase+0x3c>)
 80016ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016f2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	20000248 	.word	0x20000248
 8001704:	40022000 	.word	0x40022000

08001708 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001708:	b480      	push	{r7}
 800170a:	b08b      	sub	sp, #44	; 0x2c
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001712:	2300      	movs	r3, #0
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001716:	2300      	movs	r3, #0
 8001718:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800171a:	e169      	b.n	80019f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800171c:	2201      	movs	r2, #1
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	69fa      	ldr	r2, [r7, #28]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	429a      	cmp	r2, r3
 8001736:	f040 8158 	bne.w	80019ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	4a9a      	ldr	r2, [pc, #616]	; (80019a8 <HAL_GPIO_Init+0x2a0>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d05e      	beq.n	8001802 <HAL_GPIO_Init+0xfa>
 8001744:	4a98      	ldr	r2, [pc, #608]	; (80019a8 <HAL_GPIO_Init+0x2a0>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d875      	bhi.n	8001836 <HAL_GPIO_Init+0x12e>
 800174a:	4a98      	ldr	r2, [pc, #608]	; (80019ac <HAL_GPIO_Init+0x2a4>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d058      	beq.n	8001802 <HAL_GPIO_Init+0xfa>
 8001750:	4a96      	ldr	r2, [pc, #600]	; (80019ac <HAL_GPIO_Init+0x2a4>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d86f      	bhi.n	8001836 <HAL_GPIO_Init+0x12e>
 8001756:	4a96      	ldr	r2, [pc, #600]	; (80019b0 <HAL_GPIO_Init+0x2a8>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d052      	beq.n	8001802 <HAL_GPIO_Init+0xfa>
 800175c:	4a94      	ldr	r2, [pc, #592]	; (80019b0 <HAL_GPIO_Init+0x2a8>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d869      	bhi.n	8001836 <HAL_GPIO_Init+0x12e>
 8001762:	4a94      	ldr	r2, [pc, #592]	; (80019b4 <HAL_GPIO_Init+0x2ac>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d04c      	beq.n	8001802 <HAL_GPIO_Init+0xfa>
 8001768:	4a92      	ldr	r2, [pc, #584]	; (80019b4 <HAL_GPIO_Init+0x2ac>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d863      	bhi.n	8001836 <HAL_GPIO_Init+0x12e>
 800176e:	4a92      	ldr	r2, [pc, #584]	; (80019b8 <HAL_GPIO_Init+0x2b0>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d046      	beq.n	8001802 <HAL_GPIO_Init+0xfa>
 8001774:	4a90      	ldr	r2, [pc, #576]	; (80019b8 <HAL_GPIO_Init+0x2b0>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d85d      	bhi.n	8001836 <HAL_GPIO_Init+0x12e>
 800177a:	2b12      	cmp	r3, #18
 800177c:	d82a      	bhi.n	80017d4 <HAL_GPIO_Init+0xcc>
 800177e:	2b12      	cmp	r3, #18
 8001780:	d859      	bhi.n	8001836 <HAL_GPIO_Init+0x12e>
 8001782:	a201      	add	r2, pc, #4	; (adr r2, 8001788 <HAL_GPIO_Init+0x80>)
 8001784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001788:	08001803 	.word	0x08001803
 800178c:	080017dd 	.word	0x080017dd
 8001790:	080017ef 	.word	0x080017ef
 8001794:	08001831 	.word	0x08001831
 8001798:	08001837 	.word	0x08001837
 800179c:	08001837 	.word	0x08001837
 80017a0:	08001837 	.word	0x08001837
 80017a4:	08001837 	.word	0x08001837
 80017a8:	08001837 	.word	0x08001837
 80017ac:	08001837 	.word	0x08001837
 80017b0:	08001837 	.word	0x08001837
 80017b4:	08001837 	.word	0x08001837
 80017b8:	08001837 	.word	0x08001837
 80017bc:	08001837 	.word	0x08001837
 80017c0:	08001837 	.word	0x08001837
 80017c4:	08001837 	.word	0x08001837
 80017c8:	08001837 	.word	0x08001837
 80017cc:	080017e5 	.word	0x080017e5
 80017d0:	080017f9 	.word	0x080017f9
 80017d4:	4a79      	ldr	r2, [pc, #484]	; (80019bc <HAL_GPIO_Init+0x2b4>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d013      	beq.n	8001802 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017da:	e02c      	b.n	8001836 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	623b      	str	r3, [r7, #32]
          break;
 80017e2:	e029      	b.n	8001838 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	3304      	adds	r3, #4
 80017ea:	623b      	str	r3, [r7, #32]
          break;
 80017ec:	e024      	b.n	8001838 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	3308      	adds	r3, #8
 80017f4:	623b      	str	r3, [r7, #32]
          break;
 80017f6:	e01f      	b.n	8001838 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	330c      	adds	r3, #12
 80017fe:	623b      	str	r3, [r7, #32]
          break;
 8001800:	e01a      	b.n	8001838 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d102      	bne.n	8001810 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800180a:	2304      	movs	r3, #4
 800180c:	623b      	str	r3, [r7, #32]
          break;
 800180e:	e013      	b.n	8001838 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d105      	bne.n	8001824 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001818:	2308      	movs	r3, #8
 800181a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	69fa      	ldr	r2, [r7, #28]
 8001820:	611a      	str	r2, [r3, #16]
          break;
 8001822:	e009      	b.n	8001838 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001824:	2308      	movs	r3, #8
 8001826:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69fa      	ldr	r2, [r7, #28]
 800182c:	615a      	str	r2, [r3, #20]
          break;
 800182e:	e003      	b.n	8001838 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001830:	2300      	movs	r3, #0
 8001832:	623b      	str	r3, [r7, #32]
          break;
 8001834:	e000      	b.n	8001838 <HAL_GPIO_Init+0x130>
          break;
 8001836:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	2bff      	cmp	r3, #255	; 0xff
 800183c:	d801      	bhi.n	8001842 <HAL_GPIO_Init+0x13a>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	e001      	b.n	8001846 <HAL_GPIO_Init+0x13e>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3304      	adds	r3, #4
 8001846:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	2bff      	cmp	r3, #255	; 0xff
 800184c:	d802      	bhi.n	8001854 <HAL_GPIO_Init+0x14c>
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	e002      	b.n	800185a <HAL_GPIO_Init+0x152>
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	3b08      	subs	r3, #8
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	210f      	movs	r1, #15
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	fa01 f303 	lsl.w	r3, r1, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	401a      	ands	r2, r3
 800186c:	6a39      	ldr	r1, [r7, #32]
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	fa01 f303 	lsl.w	r3, r1, r3
 8001874:	431a      	orrs	r2, r3
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 80b1 	beq.w	80019ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001888:	4b4d      	ldr	r3, [pc, #308]	; (80019c0 <HAL_GPIO_Init+0x2b8>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	4a4c      	ldr	r2, [pc, #304]	; (80019c0 <HAL_GPIO_Init+0x2b8>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	6193      	str	r3, [r2, #24]
 8001894:	4b4a      	ldr	r3, [pc, #296]	; (80019c0 <HAL_GPIO_Init+0x2b8>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018a0:	4a48      	ldr	r2, [pc, #288]	; (80019c4 <HAL_GPIO_Init+0x2bc>)
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	089b      	lsrs	r3, r3, #2
 80018a6:	3302      	adds	r3, #2
 80018a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	220f      	movs	r2, #15
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	4013      	ands	r3, r2
 80018c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a40      	ldr	r2, [pc, #256]	; (80019c8 <HAL_GPIO_Init+0x2c0>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d013      	beq.n	80018f4 <HAL_GPIO_Init+0x1ec>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a3f      	ldr	r2, [pc, #252]	; (80019cc <HAL_GPIO_Init+0x2c4>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d00d      	beq.n	80018f0 <HAL_GPIO_Init+0x1e8>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a3e      	ldr	r2, [pc, #248]	; (80019d0 <HAL_GPIO_Init+0x2c8>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d007      	beq.n	80018ec <HAL_GPIO_Init+0x1e4>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a3d      	ldr	r2, [pc, #244]	; (80019d4 <HAL_GPIO_Init+0x2cc>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d101      	bne.n	80018e8 <HAL_GPIO_Init+0x1e0>
 80018e4:	2303      	movs	r3, #3
 80018e6:	e006      	b.n	80018f6 <HAL_GPIO_Init+0x1ee>
 80018e8:	2304      	movs	r3, #4
 80018ea:	e004      	b.n	80018f6 <HAL_GPIO_Init+0x1ee>
 80018ec:	2302      	movs	r3, #2
 80018ee:	e002      	b.n	80018f6 <HAL_GPIO_Init+0x1ee>
 80018f0:	2301      	movs	r3, #1
 80018f2:	e000      	b.n	80018f6 <HAL_GPIO_Init+0x1ee>
 80018f4:	2300      	movs	r3, #0
 80018f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f8:	f002 0203 	and.w	r2, r2, #3
 80018fc:	0092      	lsls	r2, r2, #2
 80018fe:	4093      	lsls	r3, r2
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	4313      	orrs	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001906:	492f      	ldr	r1, [pc, #188]	; (80019c4 <HAL_GPIO_Init+0x2bc>)
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	089b      	lsrs	r3, r3, #2
 800190c:	3302      	adds	r3, #2
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d006      	beq.n	800192e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001920:	4b2d      	ldr	r3, [pc, #180]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	492c      	ldr	r1, [pc, #176]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	4313      	orrs	r3, r2
 800192a:	600b      	str	r3, [r1, #0]
 800192c:	e006      	b.n	800193c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800192e:	4b2a      	ldr	r3, [pc, #168]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	43db      	mvns	r3, r3
 8001936:	4928      	ldr	r1, [pc, #160]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001938:	4013      	ands	r3, r2
 800193a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d006      	beq.n	8001956 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001948:	4b23      	ldr	r3, [pc, #140]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	4922      	ldr	r1, [pc, #136]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	4313      	orrs	r3, r2
 8001952:	604b      	str	r3, [r1, #4]
 8001954:	e006      	b.n	8001964 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001956:	4b20      	ldr	r3, [pc, #128]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	43db      	mvns	r3, r3
 800195e:	491e      	ldr	r1, [pc, #120]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001960:	4013      	ands	r3, r2
 8001962:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d006      	beq.n	800197e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001970:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	4918      	ldr	r1, [pc, #96]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	4313      	orrs	r3, r2
 800197a:	608b      	str	r3, [r1, #8]
 800197c:	e006      	b.n	800198c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800197e:	4b16      	ldr	r3, [pc, #88]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	43db      	mvns	r3, r3
 8001986:	4914      	ldr	r1, [pc, #80]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001988:	4013      	ands	r3, r2
 800198a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d021      	beq.n	80019dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001998:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 800199a:	68da      	ldr	r2, [r3, #12]
 800199c:	490e      	ldr	r1, [pc, #56]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	60cb      	str	r3, [r1, #12]
 80019a4:	e021      	b.n	80019ea <HAL_GPIO_Init+0x2e2>
 80019a6:	bf00      	nop
 80019a8:	10320000 	.word	0x10320000
 80019ac:	10310000 	.word	0x10310000
 80019b0:	10220000 	.word	0x10220000
 80019b4:	10210000 	.word	0x10210000
 80019b8:	10120000 	.word	0x10120000
 80019bc:	10110000 	.word	0x10110000
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40010000 	.word	0x40010000
 80019c8:	40010800 	.word	0x40010800
 80019cc:	40010c00 	.word	0x40010c00
 80019d0:	40011000 	.word	0x40011000
 80019d4:	40011400 	.word	0x40011400
 80019d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <HAL_GPIO_Init+0x304>)
 80019de:	68da      	ldr	r2, [r3, #12]
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	43db      	mvns	r3, r3
 80019e4:	4909      	ldr	r1, [pc, #36]	; (8001a0c <HAL_GPIO_Init+0x304>)
 80019e6:	4013      	ands	r3, r2
 80019e8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	3301      	adds	r3, #1
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	fa22 f303 	lsr.w	r3, r2, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f47f ae8e 	bne.w	800171c <HAL_GPIO_Init+0x14>
  }
}
 8001a00:	bf00      	nop
 8001a02:	bf00      	nop
 8001a04:	372c      	adds	r7, #44	; 0x2c
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr
 8001a0c:	40010400 	.word	0x40010400

08001a10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	807b      	strh	r3, [r7, #2]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a20:	787b      	ldrb	r3, [r7, #1]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a26:	887a      	ldrh	r2, [r7, #2]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a2c:	e003      	b.n	8001a36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a2e:	887b      	ldrh	r3, [r7, #2]
 8001a30:	041a      	lsls	r2, r3, #16
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	611a      	str	r2, [r3, #16]
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr

08001a40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a4a:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a4c:	695a      	ldr	r2, [r3, #20]
 8001a4e:	88fb      	ldrh	r3, [r7, #6]
 8001a50:	4013      	ands	r3, r2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d006      	beq.n	8001a64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a56:	4a05      	ldr	r2, [pc, #20]	; (8001a6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a58:	88fb      	ldrh	r3, [r7, #6]
 8001a5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a5c:	88fb      	ldrh	r3, [r7, #6]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f000 f806 	bl	8001a70 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a64:	bf00      	nop
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40010400 	.word	0x40010400

08001a70 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr

08001a84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e272      	b.n	8001f7c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f000 8087 	beq.w	8001bb2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aa4:	4b92      	ldr	r3, [pc, #584]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 030c 	and.w	r3, r3, #12
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d00c      	beq.n	8001aca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ab0:	4b8f      	ldr	r3, [pc, #572]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 030c 	and.w	r3, r3, #12
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	d112      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x5e>
 8001abc:	4b8c      	ldr	r3, [pc, #560]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac8:	d10b      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aca:	4b89      	ldr	r3, [pc, #548]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d06c      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x12c>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d168      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e24c      	b.n	8001f7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aea:	d106      	bne.n	8001afa <HAL_RCC_OscConfig+0x76>
 8001aec:	4b80      	ldr	r3, [pc, #512]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a7f      	ldr	r2, [pc, #508]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af6:	6013      	str	r3, [r2, #0]
 8001af8:	e02e      	b.n	8001b58 <HAL_RCC_OscConfig+0xd4>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d10c      	bne.n	8001b1c <HAL_RCC_OscConfig+0x98>
 8001b02:	4b7b      	ldr	r3, [pc, #492]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a7a      	ldr	r2, [pc, #488]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	4b78      	ldr	r3, [pc, #480]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a77      	ldr	r2, [pc, #476]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	e01d      	b.n	8001b58 <HAL_RCC_OscConfig+0xd4>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b24:	d10c      	bne.n	8001b40 <HAL_RCC_OscConfig+0xbc>
 8001b26:	4b72      	ldr	r3, [pc, #456]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a71      	ldr	r2, [pc, #452]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	4b6f      	ldr	r3, [pc, #444]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a6e      	ldr	r2, [pc, #440]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	e00b      	b.n	8001b58 <HAL_RCC_OscConfig+0xd4>
 8001b40:	4b6b      	ldr	r3, [pc, #428]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a6a      	ldr	r2, [pc, #424]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b4a:	6013      	str	r3, [r2, #0]
 8001b4c:	4b68      	ldr	r3, [pc, #416]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a67      	ldr	r2, [pc, #412]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d013      	beq.n	8001b88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b60:	f7ff faba 	bl	80010d8 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b68:	f7ff fab6 	bl	80010d8 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b64      	cmp	r3, #100	; 0x64
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e200      	b.n	8001f7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7a:	4b5d      	ldr	r3, [pc, #372]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0xe4>
 8001b86:	e014      	b.n	8001bb2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b88:	f7ff faa6 	bl	80010d8 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b90:	f7ff faa2 	bl	80010d8 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b64      	cmp	r3, #100	; 0x64
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e1ec      	b.n	8001f7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba2:	4b53      	ldr	r3, [pc, #332]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f0      	bne.n	8001b90 <HAL_RCC_OscConfig+0x10c>
 8001bae:	e000      	b.n	8001bb2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d063      	beq.n	8001c86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bbe:	4b4c      	ldr	r3, [pc, #304]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f003 030c 	and.w	r3, r3, #12
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00b      	beq.n	8001be2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bca:	4b49      	ldr	r3, [pc, #292]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 030c 	and.w	r3, r3, #12
 8001bd2:	2b08      	cmp	r3, #8
 8001bd4:	d11c      	bne.n	8001c10 <HAL_RCC_OscConfig+0x18c>
 8001bd6:	4b46      	ldr	r3, [pc, #280]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d116      	bne.n	8001c10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be2:	4b43      	ldr	r3, [pc, #268]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d005      	beq.n	8001bfa <HAL_RCC_OscConfig+0x176>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d001      	beq.n	8001bfa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e1c0      	b.n	8001f7c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfa:	4b3d      	ldr	r3, [pc, #244]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	4939      	ldr	r1, [pc, #228]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0e:	e03a      	b.n	8001c86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d020      	beq.n	8001c5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c18:	4b36      	ldr	r3, [pc, #216]	; (8001cf4 <HAL_RCC_OscConfig+0x270>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1e:	f7ff fa5b 	bl	80010d8 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c26:	f7ff fa57 	bl	80010d8 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e1a1      	b.n	8001f7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c38:	4b2d      	ldr	r3, [pc, #180]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0f0      	beq.n	8001c26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c44:	4b2a      	ldr	r3, [pc, #168]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4927      	ldr	r1, [pc, #156]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	600b      	str	r3, [r1, #0]
 8001c58:	e015      	b.n	8001c86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c5a:	4b26      	ldr	r3, [pc, #152]	; (8001cf4 <HAL_RCC_OscConfig+0x270>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c60:	f7ff fa3a 	bl	80010d8 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c68:	f7ff fa36 	bl	80010d8 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e180      	b.n	8001f7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7a:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f0      	bne.n	8001c68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d03a      	beq.n	8001d08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d019      	beq.n	8001cce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c9a:	4b17      	ldr	r3, [pc, #92]	; (8001cf8 <HAL_RCC_OscConfig+0x274>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca0:	f7ff fa1a 	bl	80010d8 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca8:	f7ff fa16 	bl	80010d8 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e160      	b.n	8001f7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cba:	4b0d      	ldr	r3, [pc, #52]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cc6:	2001      	movs	r0, #1
 8001cc8:	f000 fad8 	bl	800227c <RCC_Delay>
 8001ccc:	e01c      	b.n	8001d08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cce:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <HAL_RCC_OscConfig+0x274>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd4:	f7ff fa00 	bl	80010d8 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cda:	e00f      	b.n	8001cfc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cdc:	f7ff f9fc 	bl	80010d8 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d908      	bls.n	8001cfc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e146      	b.n	8001f7c <HAL_RCC_OscConfig+0x4f8>
 8001cee:	bf00      	nop
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	42420000 	.word	0x42420000
 8001cf8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cfc:	4b92      	ldr	r3, [pc, #584]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1e9      	bne.n	8001cdc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f000 80a6 	beq.w	8001e62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d16:	2300      	movs	r3, #0
 8001d18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d1a:	4b8b      	ldr	r3, [pc, #556]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10d      	bne.n	8001d42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d26:	4b88      	ldr	r3, [pc, #544]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	4a87      	ldr	r2, [pc, #540]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d30:	61d3      	str	r3, [r2, #28]
 8001d32:	4b85      	ldr	r3, [pc, #532]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d42:	4b82      	ldr	r3, [pc, #520]	; (8001f4c <HAL_RCC_OscConfig+0x4c8>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d118      	bne.n	8001d80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d4e:	4b7f      	ldr	r3, [pc, #508]	; (8001f4c <HAL_RCC_OscConfig+0x4c8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a7e      	ldr	r2, [pc, #504]	; (8001f4c <HAL_RCC_OscConfig+0x4c8>)
 8001d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d5a:	f7ff f9bd 	bl	80010d8 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d62:	f7ff f9b9 	bl	80010d8 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b64      	cmp	r3, #100	; 0x64
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e103      	b.n	8001f7c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d74:	4b75      	ldr	r3, [pc, #468]	; (8001f4c <HAL_RCC_OscConfig+0x4c8>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0f0      	beq.n	8001d62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d106      	bne.n	8001d96 <HAL_RCC_OscConfig+0x312>
 8001d88:	4b6f      	ldr	r3, [pc, #444]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	4a6e      	ldr	r2, [pc, #440]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	6213      	str	r3, [r2, #32]
 8001d94:	e02d      	b.n	8001df2 <HAL_RCC_OscConfig+0x36e>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10c      	bne.n	8001db8 <HAL_RCC_OscConfig+0x334>
 8001d9e:	4b6a      	ldr	r3, [pc, #424]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	4a69      	ldr	r2, [pc, #420]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001da4:	f023 0301 	bic.w	r3, r3, #1
 8001da8:	6213      	str	r3, [r2, #32]
 8001daa:	4b67      	ldr	r3, [pc, #412]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	4a66      	ldr	r2, [pc, #408]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001db0:	f023 0304 	bic.w	r3, r3, #4
 8001db4:	6213      	str	r3, [r2, #32]
 8001db6:	e01c      	b.n	8001df2 <HAL_RCC_OscConfig+0x36e>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	2b05      	cmp	r3, #5
 8001dbe:	d10c      	bne.n	8001dda <HAL_RCC_OscConfig+0x356>
 8001dc0:	4b61      	ldr	r3, [pc, #388]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	4a60      	ldr	r2, [pc, #384]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001dc6:	f043 0304 	orr.w	r3, r3, #4
 8001dca:	6213      	str	r3, [r2, #32]
 8001dcc:	4b5e      	ldr	r3, [pc, #376]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	4a5d      	ldr	r2, [pc, #372]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6213      	str	r3, [r2, #32]
 8001dd8:	e00b      	b.n	8001df2 <HAL_RCC_OscConfig+0x36e>
 8001dda:	4b5b      	ldr	r3, [pc, #364]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	4a5a      	ldr	r2, [pc, #360]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001de0:	f023 0301 	bic.w	r3, r3, #1
 8001de4:	6213      	str	r3, [r2, #32]
 8001de6:	4b58      	ldr	r3, [pc, #352]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	4a57      	ldr	r2, [pc, #348]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001dec:	f023 0304 	bic.w	r3, r3, #4
 8001df0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d015      	beq.n	8001e26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfa:	f7ff f96d 	bl	80010d8 <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e00:	e00a      	b.n	8001e18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e02:	f7ff f969 	bl	80010d8 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e0b1      	b.n	8001f7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e18:	4b4b      	ldr	r3, [pc, #300]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0ee      	beq.n	8001e02 <HAL_RCC_OscConfig+0x37e>
 8001e24:	e014      	b.n	8001e50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e26:	f7ff f957 	bl	80010d8 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e2c:	e00a      	b.n	8001e44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2e:	f7ff f953 	bl	80010d8 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e09b      	b.n	8001f7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e44:	4b40      	ldr	r3, [pc, #256]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1ee      	bne.n	8001e2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e50:	7dfb      	ldrb	r3, [r7, #23]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d105      	bne.n	8001e62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e56:	4b3c      	ldr	r3, [pc, #240]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	4a3b      	ldr	r2, [pc, #236]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001e5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 8087 	beq.w	8001f7a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e6c:	4b36      	ldr	r3, [pc, #216]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 030c 	and.w	r3, r3, #12
 8001e74:	2b08      	cmp	r3, #8
 8001e76:	d061      	beq.n	8001f3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69db      	ldr	r3, [r3, #28]
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d146      	bne.n	8001f0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e80:	4b33      	ldr	r3, [pc, #204]	; (8001f50 <HAL_RCC_OscConfig+0x4cc>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e86:	f7ff f927 	bl	80010d8 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e8e:	f7ff f923 	bl	80010d8 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e06d      	b.n	8001f7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea0:	4b29      	ldr	r3, [pc, #164]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1f0      	bne.n	8001e8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb4:	d108      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001eb6:	4b24      	ldr	r3, [pc, #144]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	4921      	ldr	r1, [pc, #132]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ec8:	4b1f      	ldr	r3, [pc, #124]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a19      	ldr	r1, [r3, #32]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	430b      	orrs	r3, r1
 8001eda:	491b      	ldr	r1, [pc, #108]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ee0:	4b1b      	ldr	r3, [pc, #108]	; (8001f50 <HAL_RCC_OscConfig+0x4cc>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee6:	f7ff f8f7 	bl	80010d8 <HAL_GetTick>
 8001eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eec:	e008      	b.n	8001f00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eee:	f7ff f8f3 	bl	80010d8 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e03d      	b.n	8001f7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f00:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0f0      	beq.n	8001eee <HAL_RCC_OscConfig+0x46a>
 8001f0c:	e035      	b.n	8001f7a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0e:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <HAL_RCC_OscConfig+0x4cc>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f14:	f7ff f8e0 	bl	80010d8 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1c:	f7ff f8dc 	bl	80010d8 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e026      	b.n	8001f7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f2e:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x498>
 8001f3a:	e01e      	b.n	8001f7a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d107      	bne.n	8001f54 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e019      	b.n	8001f7c <HAL_RCC_OscConfig+0x4f8>
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40007000 	.word	0x40007000
 8001f50:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f54:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <HAL_RCC_OscConfig+0x500>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d106      	bne.n	8001f76 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d001      	beq.n	8001f7a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40021000 	.word	0x40021000

08001f88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e0d0      	b.n	800213e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f9c:	4b6a      	ldr	r3, [pc, #424]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d910      	bls.n	8001fcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001faa:	4b67      	ldr	r3, [pc, #412]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 0207 	bic.w	r2, r3, #7
 8001fb2:	4965      	ldr	r1, [pc, #404]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fba:	4b63      	ldr	r3, [pc, #396]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d001      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0b8      	b.n	800213e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d020      	beq.n	800201a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d005      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fe4:	4b59      	ldr	r3, [pc, #356]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	4a58      	ldr	r2, [pc, #352]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0308 	and.w	r3, r3, #8
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d005      	beq.n	8002008 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ffc:	4b53      	ldr	r3, [pc, #332]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	4a52      	ldr	r2, [pc, #328]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002002:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002006:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002008:	4b50      	ldr	r3, [pc, #320]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	494d      	ldr	r1, [pc, #308]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002016:	4313      	orrs	r3, r2
 8002018:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d040      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d107      	bne.n	800203e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202e:	4b47      	ldr	r3, [pc, #284]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d115      	bne.n	8002066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e07f      	b.n	800213e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d107      	bne.n	8002056 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002046:	4b41      	ldr	r3, [pc, #260]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d109      	bne.n	8002066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e073      	b.n	800213e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002056:	4b3d      	ldr	r3, [pc, #244]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e06b      	b.n	800213e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002066:	4b39      	ldr	r3, [pc, #228]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f023 0203 	bic.w	r2, r3, #3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	4936      	ldr	r1, [pc, #216]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002074:	4313      	orrs	r3, r2
 8002076:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002078:	f7ff f82e 	bl	80010d8 <HAL_GetTick>
 800207c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207e:	e00a      	b.n	8002096 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002080:	f7ff f82a 	bl	80010d8 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	f241 3288 	movw	r2, #5000	; 0x1388
 800208e:	4293      	cmp	r3, r2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e053      	b.n	800213e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002096:	4b2d      	ldr	r3, [pc, #180]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 020c 	and.w	r2, r3, #12
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d1eb      	bne.n	8002080 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020a8:	4b27      	ldr	r3, [pc, #156]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d210      	bcs.n	80020d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b6:	4b24      	ldr	r3, [pc, #144]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f023 0207 	bic.w	r2, r3, #7
 80020be:	4922      	ldr	r1, [pc, #136]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c6:	4b20      	ldr	r3, [pc, #128]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d001      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e032      	b.n	800213e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d008      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020e4:	4b19      	ldr	r3, [pc, #100]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4916      	ldr	r1, [pc, #88]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d009      	beq.n	8002116 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002102:	4b12      	ldr	r3, [pc, #72]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	490e      	ldr	r1, [pc, #56]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002112:	4313      	orrs	r3, r2
 8002114:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002116:	f000 f821 	bl	800215c <HAL_RCC_GetSysClockFreq>
 800211a:	4602      	mov	r2, r0
 800211c:	4b0b      	ldr	r3, [pc, #44]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	091b      	lsrs	r3, r3, #4
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	490a      	ldr	r1, [pc, #40]	; (8002150 <HAL_RCC_ClockConfig+0x1c8>)
 8002128:	5ccb      	ldrb	r3, [r1, r3]
 800212a:	fa22 f303 	lsr.w	r3, r2, r3
 800212e:	4a09      	ldr	r2, [pc, #36]	; (8002154 <HAL_RCC_ClockConfig+0x1cc>)
 8002130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002132:	4b09      	ldr	r3, [pc, #36]	; (8002158 <HAL_RCC_ClockConfig+0x1d0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe ff8c 	bl	8001054 <HAL_InitTick>

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40022000 	.word	0x40022000
 800214c:	40021000 	.word	0x40021000
 8002150:	08005118 	.word	0x08005118
 8002154:	20000000 	.word	0x20000000
 8002158:	20000004 	.word	0x20000004

0800215c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800215c:	b490      	push	{r4, r7}
 800215e:	b08a      	sub	sp, #40	; 0x28
 8002160:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002162:	4b29      	ldr	r3, [pc, #164]	; (8002208 <HAL_RCC_GetSysClockFreq+0xac>)
 8002164:	1d3c      	adds	r4, r7, #4
 8002166:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002168:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800216c:	f240 2301 	movw	r3, #513	; 0x201
 8002170:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
 8002176:	2300      	movs	r3, #0
 8002178:	61bb      	str	r3, [r7, #24]
 800217a:	2300      	movs	r3, #0
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002182:	2300      	movs	r3, #0
 8002184:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002186:	4b21      	ldr	r3, [pc, #132]	; (800220c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	f003 030c 	and.w	r3, r3, #12
 8002192:	2b04      	cmp	r3, #4
 8002194:	d002      	beq.n	800219c <HAL_RCC_GetSysClockFreq+0x40>
 8002196:	2b08      	cmp	r3, #8
 8002198:	d003      	beq.n	80021a2 <HAL_RCC_GetSysClockFreq+0x46>
 800219a:	e02b      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800219c:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <HAL_RCC_GetSysClockFreq+0xb4>)
 800219e:	623b      	str	r3, [r7, #32]
      break;
 80021a0:	e02b      	b.n	80021fa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	0c9b      	lsrs	r3, r3, #18
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	3328      	adds	r3, #40	; 0x28
 80021ac:	443b      	add	r3, r7
 80021ae:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80021b2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d012      	beq.n	80021e4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021be:	4b13      	ldr	r3, [pc, #76]	; (800220c <HAL_RCC_GetSysClockFreq+0xb0>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	0c5b      	lsrs	r3, r3, #17
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	3328      	adds	r3, #40	; 0x28
 80021ca:	443b      	add	r3, r7
 80021cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	4a0e      	ldr	r2, [pc, #56]	; (8002210 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021d6:	fb03 f202 	mul.w	r2, r3, r2
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
 80021e2:	e004      	b.n	80021ee <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	4a0b      	ldr	r2, [pc, #44]	; (8002214 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021e8:	fb02 f303 	mul.w	r3, r2, r3
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	623b      	str	r3, [r7, #32]
      break;
 80021f2:	e002      	b.n	80021fa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021f4:	4b06      	ldr	r3, [pc, #24]	; (8002210 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021f6:	623b      	str	r3, [r7, #32]
      break;
 80021f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021fa:	6a3b      	ldr	r3, [r7, #32]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3728      	adds	r7, #40	; 0x28
 8002200:	46bd      	mov	sp, r7
 8002202:	bc90      	pop	{r4, r7}
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	08005108 	.word	0x08005108
 800220c:	40021000 	.word	0x40021000
 8002210:	007a1200 	.word	0x007a1200
 8002214:	003d0900 	.word	0x003d0900

08002218 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800221c:	4b02      	ldr	r3, [pc, #8]	; (8002228 <HAL_RCC_GetHCLKFreq+0x10>)
 800221e:	681b      	ldr	r3, [r3, #0]
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr
 8002228:	20000000 	.word	0x20000000

0800222c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002230:	f7ff fff2 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 8002234:	4602      	mov	r2, r0
 8002236:	4b05      	ldr	r3, [pc, #20]	; (800224c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	0a1b      	lsrs	r3, r3, #8
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	4903      	ldr	r1, [pc, #12]	; (8002250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002242:	5ccb      	ldrb	r3, [r1, r3]
 8002244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002248:	4618      	mov	r0, r3
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40021000 	.word	0x40021000
 8002250:	08005128 	.word	0x08005128

08002254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002258:	f7ff ffde 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 800225c:	4602      	mov	r2, r0
 800225e:	4b05      	ldr	r3, [pc, #20]	; (8002274 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	0adb      	lsrs	r3, r3, #11
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	4903      	ldr	r1, [pc, #12]	; (8002278 <HAL_RCC_GetPCLK2Freq+0x24>)
 800226a:	5ccb      	ldrb	r3, [r1, r3]
 800226c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002270:	4618      	mov	r0, r3
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40021000 	.word	0x40021000
 8002278:	08005128 	.word	0x08005128

0800227c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002284:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <RCC_Delay+0x34>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <RCC_Delay+0x38>)
 800228a:	fba2 2303 	umull	r2, r3, r2, r3
 800228e:	0a5b      	lsrs	r3, r3, #9
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	fb02 f303 	mul.w	r3, r2, r3
 8002296:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002298:	bf00      	nop
  }
  while (Delay --);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	1e5a      	subs	r2, r3, #1
 800229e:	60fa      	str	r2, [r7, #12]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1f9      	bne.n	8002298 <RCC_Delay+0x1c>
}
 80022a4:	bf00      	nop
 80022a6:	bf00      	nop
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr
 80022b0:	20000000 	.word	0x20000000
 80022b4:	10624dd3 	.word	0x10624dd3

080022b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e03f      	b.n	800234a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d106      	bne.n	80022e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7fe fd48 	bl	8000d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2224      	movs	r2, #36	; 0x24
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 f905 	bl	800250c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002310:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	695a      	ldr	r2, [r3, #20]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002320:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68da      	ldr	r2, [r3, #12]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002330:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2220      	movs	r2, #32
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2220      	movs	r2, #32
 8002344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b08a      	sub	sp, #40	; 0x28
 8002356:	af02      	add	r7, sp, #8
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	603b      	str	r3, [r7, #0]
 800235e:	4613      	mov	r3, r2
 8002360:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b20      	cmp	r3, #32
 8002370:	d17c      	bne.n	800246c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d002      	beq.n	800237e <HAL_UART_Transmit+0x2c>
 8002378:	88fb      	ldrh	r3, [r7, #6]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e075      	b.n	800246e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002388:	2b01      	cmp	r3, #1
 800238a:	d101      	bne.n	8002390 <HAL_UART_Transmit+0x3e>
 800238c:	2302      	movs	r3, #2
 800238e:	e06e      	b.n	800246e <HAL_UART_Transmit+0x11c>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2221      	movs	r2, #33	; 0x21
 80023a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023a6:	f7fe fe97 	bl	80010d8 <HAL_GetTick>
 80023aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	88fa      	ldrh	r2, [r7, #6]
 80023b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	88fa      	ldrh	r2, [r7, #6]
 80023b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023c0:	d108      	bne.n	80023d4 <HAL_UART_Transmit+0x82>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d104      	bne.n	80023d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	61bb      	str	r3, [r7, #24]
 80023d2:	e003      	b.n	80023dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80023e4:	e02a      	b.n	800243c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	2200      	movs	r2, #0
 80023ee:	2180      	movs	r1, #128	; 0x80
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 f840 	bl	8002476 <UART_WaitOnFlagUntilTimeout>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e036      	b.n	800246e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10b      	bne.n	800241e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	461a      	mov	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002414:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	3302      	adds	r3, #2
 800241a:	61bb      	str	r3, [r7, #24]
 800241c:	e007      	b.n	800242e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	781a      	ldrb	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	3301      	adds	r3, #1
 800242c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002432:	b29b      	uxth	r3, r3
 8002434:	3b01      	subs	r3, #1
 8002436:	b29a      	uxth	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002440:	b29b      	uxth	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1cf      	bne.n	80023e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	2200      	movs	r2, #0
 800244e:	2140      	movs	r1, #64	; 0x40
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f000 f810 	bl	8002476 <UART_WaitOnFlagUntilTimeout>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e006      	b.n	800246e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2220      	movs	r2, #32
 8002464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002468:	2300      	movs	r3, #0
 800246a:	e000      	b.n	800246e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800246c:	2302      	movs	r3, #2
  }
}
 800246e:	4618      	mov	r0, r3
 8002470:	3720      	adds	r7, #32
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b084      	sub	sp, #16
 800247a:	af00      	add	r7, sp, #0
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	603b      	str	r3, [r7, #0]
 8002482:	4613      	mov	r3, r2
 8002484:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002486:	e02c      	b.n	80024e2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248e:	d028      	beq.n	80024e2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d007      	beq.n	80024a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002496:	f7fe fe1f 	bl	80010d8 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d21d      	bcs.n	80024e2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80024b4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695a      	ldr	r2, [r3, #20]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 0201 	bic.w	r2, r2, #1
 80024c4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2220      	movs	r2, #32
 80024ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2220      	movs	r2, #32
 80024d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e00f      	b.n	8002502 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	4013      	ands	r3, r2
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	bf0c      	ite	eq
 80024f2:	2301      	moveq	r3, #1
 80024f4:	2300      	movne	r3, #0
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	461a      	mov	r2, r3
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d0c3      	beq.n	8002488 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
	...

0800250c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	430a      	orrs	r2, r1
 8002528:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	4313      	orrs	r3, r2
 800253a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002546:	f023 030c 	bic.w	r3, r3, #12
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6812      	ldr	r2, [r2, #0]
 800254e:	68b9      	ldr	r1, [r7, #8]
 8002550:	430b      	orrs	r3, r1
 8002552:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699a      	ldr	r2, [r3, #24]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a2c      	ldr	r2, [pc, #176]	; (8002620 <UART_SetConfig+0x114>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d103      	bne.n	800257c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002574:	f7ff fe6e 	bl	8002254 <HAL_RCC_GetPCLK2Freq>
 8002578:	60f8      	str	r0, [r7, #12]
 800257a:	e002      	b.n	8002582 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800257c:	f7ff fe56 	bl	800222c <HAL_RCC_GetPCLK1Freq>
 8002580:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	4613      	mov	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	009a      	lsls	r2, r3, #2
 800258c:	441a      	add	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	fbb2 f3f3 	udiv	r3, r2, r3
 8002598:	4a22      	ldr	r2, [pc, #136]	; (8002624 <UART_SetConfig+0x118>)
 800259a:	fba2 2303 	umull	r2, r3, r2, r3
 800259e:	095b      	lsrs	r3, r3, #5
 80025a0:	0119      	lsls	r1, r3, #4
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	4613      	mov	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	009a      	lsls	r2, r3, #2
 80025ac:	441a      	add	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80025b8:	4b1a      	ldr	r3, [pc, #104]	; (8002624 <UART_SetConfig+0x118>)
 80025ba:	fba3 0302 	umull	r0, r3, r3, r2
 80025be:	095b      	lsrs	r3, r3, #5
 80025c0:	2064      	movs	r0, #100	; 0x64
 80025c2:	fb00 f303 	mul.w	r3, r0, r3
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	011b      	lsls	r3, r3, #4
 80025ca:	3332      	adds	r3, #50	; 0x32
 80025cc:	4a15      	ldr	r2, [pc, #84]	; (8002624 <UART_SetConfig+0x118>)
 80025ce:	fba2 2303 	umull	r2, r3, r2, r3
 80025d2:	095b      	lsrs	r3, r3, #5
 80025d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025d8:	4419      	add	r1, r3
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	4613      	mov	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	009a      	lsls	r2, r3, #2
 80025e4:	441a      	add	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <UART_SetConfig+0x118>)
 80025f2:	fba3 0302 	umull	r0, r3, r3, r2
 80025f6:	095b      	lsrs	r3, r3, #5
 80025f8:	2064      	movs	r0, #100	; 0x64
 80025fa:	fb00 f303 	mul.w	r3, r0, r3
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	3332      	adds	r3, #50	; 0x32
 8002604:	4a07      	ldr	r2, [pc, #28]	; (8002624 <UART_SetConfig+0x118>)
 8002606:	fba2 2303 	umull	r2, r3, r2, r3
 800260a:	095b      	lsrs	r3, r3, #5
 800260c:	f003 020f 	and.w	r2, r3, #15
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	440a      	add	r2, r1
 8002616:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002618:	bf00      	nop
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40013800 	.word	0x40013800
 8002624:	51eb851f 	.word	0x51eb851f

08002628 <__errno>:
 8002628:	4b01      	ldr	r3, [pc, #4]	; (8002630 <__errno+0x8>)
 800262a:	6818      	ldr	r0, [r3, #0]
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	2000000c 	.word	0x2000000c

08002634 <__libc_init_array>:
 8002634:	b570      	push	{r4, r5, r6, lr}
 8002636:	2600      	movs	r6, #0
 8002638:	4d0c      	ldr	r5, [pc, #48]	; (800266c <__libc_init_array+0x38>)
 800263a:	4c0d      	ldr	r4, [pc, #52]	; (8002670 <__libc_init_array+0x3c>)
 800263c:	1b64      	subs	r4, r4, r5
 800263e:	10a4      	asrs	r4, r4, #2
 8002640:	42a6      	cmp	r6, r4
 8002642:	d109      	bne.n	8002658 <__libc_init_array+0x24>
 8002644:	f002 fd48 	bl	80050d8 <_init>
 8002648:	2600      	movs	r6, #0
 800264a:	4d0a      	ldr	r5, [pc, #40]	; (8002674 <__libc_init_array+0x40>)
 800264c:	4c0a      	ldr	r4, [pc, #40]	; (8002678 <__libc_init_array+0x44>)
 800264e:	1b64      	subs	r4, r4, r5
 8002650:	10a4      	asrs	r4, r4, #2
 8002652:	42a6      	cmp	r6, r4
 8002654:	d105      	bne.n	8002662 <__libc_init_array+0x2e>
 8002656:	bd70      	pop	{r4, r5, r6, pc}
 8002658:	f855 3b04 	ldr.w	r3, [r5], #4
 800265c:	4798      	blx	r3
 800265e:	3601      	adds	r6, #1
 8002660:	e7ee      	b.n	8002640 <__libc_init_array+0xc>
 8002662:	f855 3b04 	ldr.w	r3, [r5], #4
 8002666:	4798      	blx	r3
 8002668:	3601      	adds	r6, #1
 800266a:	e7f2      	b.n	8002652 <__libc_init_array+0x1e>
 800266c:	0800550c 	.word	0x0800550c
 8002670:	0800550c 	.word	0x0800550c
 8002674:	0800550c 	.word	0x0800550c
 8002678:	08005510 	.word	0x08005510

0800267c <memset>:
 800267c:	4603      	mov	r3, r0
 800267e:	4402      	add	r2, r0
 8002680:	4293      	cmp	r3, r2
 8002682:	d100      	bne.n	8002686 <memset+0xa>
 8002684:	4770      	bx	lr
 8002686:	f803 1b01 	strb.w	r1, [r3], #1
 800268a:	e7f9      	b.n	8002680 <memset+0x4>

0800268c <__cvt>:
 800268c:	2b00      	cmp	r3, #0
 800268e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002692:	461f      	mov	r7, r3
 8002694:	bfbb      	ittet	lt
 8002696:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800269a:	461f      	movlt	r7, r3
 800269c:	2300      	movge	r3, #0
 800269e:	232d      	movlt	r3, #45	; 0x2d
 80026a0:	b088      	sub	sp, #32
 80026a2:	4614      	mov	r4, r2
 80026a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80026a6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80026a8:	7013      	strb	r3, [r2, #0]
 80026aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80026ac:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80026b0:	f023 0820 	bic.w	r8, r3, #32
 80026b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80026b8:	d005      	beq.n	80026c6 <__cvt+0x3a>
 80026ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80026be:	d100      	bne.n	80026c2 <__cvt+0x36>
 80026c0:	3501      	adds	r5, #1
 80026c2:	2302      	movs	r3, #2
 80026c4:	e000      	b.n	80026c8 <__cvt+0x3c>
 80026c6:	2303      	movs	r3, #3
 80026c8:	aa07      	add	r2, sp, #28
 80026ca:	9204      	str	r2, [sp, #16]
 80026cc:	aa06      	add	r2, sp, #24
 80026ce:	e9cd a202 	strd	sl, r2, [sp, #8]
 80026d2:	e9cd 3500 	strd	r3, r5, [sp]
 80026d6:	4622      	mov	r2, r4
 80026d8:	463b      	mov	r3, r7
 80026da:	f000 fcdd 	bl	8003098 <_dtoa_r>
 80026de:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80026e2:	4606      	mov	r6, r0
 80026e4:	d102      	bne.n	80026ec <__cvt+0x60>
 80026e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80026e8:	07db      	lsls	r3, r3, #31
 80026ea:	d522      	bpl.n	8002732 <__cvt+0xa6>
 80026ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80026f0:	eb06 0905 	add.w	r9, r6, r5
 80026f4:	d110      	bne.n	8002718 <__cvt+0x8c>
 80026f6:	7833      	ldrb	r3, [r6, #0]
 80026f8:	2b30      	cmp	r3, #48	; 0x30
 80026fa:	d10a      	bne.n	8002712 <__cvt+0x86>
 80026fc:	2200      	movs	r2, #0
 80026fe:	2300      	movs	r3, #0
 8002700:	4620      	mov	r0, r4
 8002702:	4639      	mov	r1, r7
 8002704:	f7fe f950 	bl	80009a8 <__aeabi_dcmpeq>
 8002708:	b918      	cbnz	r0, 8002712 <__cvt+0x86>
 800270a:	f1c5 0501 	rsb	r5, r5, #1
 800270e:	f8ca 5000 	str.w	r5, [sl]
 8002712:	f8da 3000 	ldr.w	r3, [sl]
 8002716:	4499      	add	r9, r3
 8002718:	2200      	movs	r2, #0
 800271a:	2300      	movs	r3, #0
 800271c:	4620      	mov	r0, r4
 800271e:	4639      	mov	r1, r7
 8002720:	f7fe f942 	bl	80009a8 <__aeabi_dcmpeq>
 8002724:	b108      	cbz	r0, 800272a <__cvt+0x9e>
 8002726:	f8cd 901c 	str.w	r9, [sp, #28]
 800272a:	2230      	movs	r2, #48	; 0x30
 800272c:	9b07      	ldr	r3, [sp, #28]
 800272e:	454b      	cmp	r3, r9
 8002730:	d307      	bcc.n	8002742 <__cvt+0xb6>
 8002732:	4630      	mov	r0, r6
 8002734:	9b07      	ldr	r3, [sp, #28]
 8002736:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002738:	1b9b      	subs	r3, r3, r6
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	b008      	add	sp, #32
 800273e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002742:	1c59      	adds	r1, r3, #1
 8002744:	9107      	str	r1, [sp, #28]
 8002746:	701a      	strb	r2, [r3, #0]
 8002748:	e7f0      	b.n	800272c <__cvt+0xa0>

0800274a <__exponent>:
 800274a:	4603      	mov	r3, r0
 800274c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800274e:	2900      	cmp	r1, #0
 8002750:	f803 2b02 	strb.w	r2, [r3], #2
 8002754:	bfb6      	itet	lt
 8002756:	222d      	movlt	r2, #45	; 0x2d
 8002758:	222b      	movge	r2, #43	; 0x2b
 800275a:	4249      	neglt	r1, r1
 800275c:	2909      	cmp	r1, #9
 800275e:	7042      	strb	r2, [r0, #1]
 8002760:	dd2b      	ble.n	80027ba <__exponent+0x70>
 8002762:	f10d 0407 	add.w	r4, sp, #7
 8002766:	46a4      	mov	ip, r4
 8002768:	270a      	movs	r7, #10
 800276a:	fb91 f6f7 	sdiv	r6, r1, r7
 800276e:	460a      	mov	r2, r1
 8002770:	46a6      	mov	lr, r4
 8002772:	fb07 1516 	mls	r5, r7, r6, r1
 8002776:	2a63      	cmp	r2, #99	; 0x63
 8002778:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800277c:	4631      	mov	r1, r6
 800277e:	f104 34ff 	add.w	r4, r4, #4294967295
 8002782:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002786:	dcf0      	bgt.n	800276a <__exponent+0x20>
 8002788:	3130      	adds	r1, #48	; 0x30
 800278a:	f1ae 0502 	sub.w	r5, lr, #2
 800278e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002792:	4629      	mov	r1, r5
 8002794:	1c44      	adds	r4, r0, #1
 8002796:	4561      	cmp	r1, ip
 8002798:	d30a      	bcc.n	80027b0 <__exponent+0x66>
 800279a:	f10d 0209 	add.w	r2, sp, #9
 800279e:	eba2 020e 	sub.w	r2, r2, lr
 80027a2:	4565      	cmp	r5, ip
 80027a4:	bf88      	it	hi
 80027a6:	2200      	movhi	r2, #0
 80027a8:	4413      	add	r3, r2
 80027aa:	1a18      	subs	r0, r3, r0
 80027ac:	b003      	add	sp, #12
 80027ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80027b4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80027b8:	e7ed      	b.n	8002796 <__exponent+0x4c>
 80027ba:	2330      	movs	r3, #48	; 0x30
 80027bc:	3130      	adds	r1, #48	; 0x30
 80027be:	7083      	strb	r3, [r0, #2]
 80027c0:	70c1      	strb	r1, [r0, #3]
 80027c2:	1d03      	adds	r3, r0, #4
 80027c4:	e7f1      	b.n	80027aa <__exponent+0x60>
	...

080027c8 <_printf_float>:
 80027c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027cc:	b091      	sub	sp, #68	; 0x44
 80027ce:	460c      	mov	r4, r1
 80027d0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80027d4:	4616      	mov	r6, r2
 80027d6:	461f      	mov	r7, r3
 80027d8:	4605      	mov	r5, r0
 80027da:	f001 fb41 	bl	8003e60 <_localeconv_r>
 80027de:	6803      	ldr	r3, [r0, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	9309      	str	r3, [sp, #36]	; 0x24
 80027e4:	f7fd fcb4 	bl	8000150 <strlen>
 80027e8:	2300      	movs	r3, #0
 80027ea:	930e      	str	r3, [sp, #56]	; 0x38
 80027ec:	f8d8 3000 	ldr.w	r3, [r8]
 80027f0:	900a      	str	r0, [sp, #40]	; 0x28
 80027f2:	3307      	adds	r3, #7
 80027f4:	f023 0307 	bic.w	r3, r3, #7
 80027f8:	f103 0208 	add.w	r2, r3, #8
 80027fc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002800:	f8d4 b000 	ldr.w	fp, [r4]
 8002804:	f8c8 2000 	str.w	r2, [r8]
 8002808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002810:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8002814:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8002818:	930b      	str	r3, [sp, #44]	; 0x2c
 800281a:	f04f 32ff 	mov.w	r2, #4294967295
 800281e:	4640      	mov	r0, r8
 8002820:	4b9c      	ldr	r3, [pc, #624]	; (8002a94 <_printf_float+0x2cc>)
 8002822:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002824:	f7fe f8f2 	bl	8000a0c <__aeabi_dcmpun>
 8002828:	bb70      	cbnz	r0, 8002888 <_printf_float+0xc0>
 800282a:	f04f 32ff 	mov.w	r2, #4294967295
 800282e:	4640      	mov	r0, r8
 8002830:	4b98      	ldr	r3, [pc, #608]	; (8002a94 <_printf_float+0x2cc>)
 8002832:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002834:	f7fe f8cc 	bl	80009d0 <__aeabi_dcmple>
 8002838:	bb30      	cbnz	r0, 8002888 <_printf_float+0xc0>
 800283a:	2200      	movs	r2, #0
 800283c:	2300      	movs	r3, #0
 800283e:	4640      	mov	r0, r8
 8002840:	4651      	mov	r1, sl
 8002842:	f7fe f8bb 	bl	80009bc <__aeabi_dcmplt>
 8002846:	b110      	cbz	r0, 800284e <_printf_float+0x86>
 8002848:	232d      	movs	r3, #45	; 0x2d
 800284a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800284e:	4b92      	ldr	r3, [pc, #584]	; (8002a98 <_printf_float+0x2d0>)
 8002850:	4892      	ldr	r0, [pc, #584]	; (8002a9c <_printf_float+0x2d4>)
 8002852:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8002856:	bf94      	ite	ls
 8002858:	4698      	movls	r8, r3
 800285a:	4680      	movhi	r8, r0
 800285c:	2303      	movs	r3, #3
 800285e:	f04f 0a00 	mov.w	sl, #0
 8002862:	6123      	str	r3, [r4, #16]
 8002864:	f02b 0304 	bic.w	r3, fp, #4
 8002868:	6023      	str	r3, [r4, #0]
 800286a:	4633      	mov	r3, r6
 800286c:	4621      	mov	r1, r4
 800286e:	4628      	mov	r0, r5
 8002870:	9700      	str	r7, [sp, #0]
 8002872:	aa0f      	add	r2, sp, #60	; 0x3c
 8002874:	f000 f9d4 	bl	8002c20 <_printf_common>
 8002878:	3001      	adds	r0, #1
 800287a:	f040 8090 	bne.w	800299e <_printf_float+0x1d6>
 800287e:	f04f 30ff 	mov.w	r0, #4294967295
 8002882:	b011      	add	sp, #68	; 0x44
 8002884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002888:	4642      	mov	r2, r8
 800288a:	4653      	mov	r3, sl
 800288c:	4640      	mov	r0, r8
 800288e:	4651      	mov	r1, sl
 8002890:	f7fe f8bc 	bl	8000a0c <__aeabi_dcmpun>
 8002894:	b148      	cbz	r0, 80028aa <_printf_float+0xe2>
 8002896:	f1ba 0f00 	cmp.w	sl, #0
 800289a:	bfb8      	it	lt
 800289c:	232d      	movlt	r3, #45	; 0x2d
 800289e:	4880      	ldr	r0, [pc, #512]	; (8002aa0 <_printf_float+0x2d8>)
 80028a0:	bfb8      	it	lt
 80028a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80028a6:	4b7f      	ldr	r3, [pc, #508]	; (8002aa4 <_printf_float+0x2dc>)
 80028a8:	e7d3      	b.n	8002852 <_printf_float+0x8a>
 80028aa:	6863      	ldr	r3, [r4, #4]
 80028ac:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	d142      	bne.n	800293a <_printf_float+0x172>
 80028b4:	2306      	movs	r3, #6
 80028b6:	6063      	str	r3, [r4, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	9206      	str	r2, [sp, #24]
 80028bc:	aa0e      	add	r2, sp, #56	; 0x38
 80028be:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80028c2:	aa0d      	add	r2, sp, #52	; 0x34
 80028c4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80028c8:	9203      	str	r2, [sp, #12]
 80028ca:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80028ce:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80028d2:	6023      	str	r3, [r4, #0]
 80028d4:	6863      	ldr	r3, [r4, #4]
 80028d6:	4642      	mov	r2, r8
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	4628      	mov	r0, r5
 80028dc:	4653      	mov	r3, sl
 80028de:	910b      	str	r1, [sp, #44]	; 0x2c
 80028e0:	f7ff fed4 	bl	800268c <__cvt>
 80028e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80028e6:	4680      	mov	r8, r0
 80028e8:	2947      	cmp	r1, #71	; 0x47
 80028ea:	990d      	ldr	r1, [sp, #52]	; 0x34
 80028ec:	d108      	bne.n	8002900 <_printf_float+0x138>
 80028ee:	1cc8      	adds	r0, r1, #3
 80028f0:	db02      	blt.n	80028f8 <_printf_float+0x130>
 80028f2:	6863      	ldr	r3, [r4, #4]
 80028f4:	4299      	cmp	r1, r3
 80028f6:	dd40      	ble.n	800297a <_printf_float+0x1b2>
 80028f8:	f1a9 0902 	sub.w	r9, r9, #2
 80028fc:	fa5f f989 	uxtb.w	r9, r9
 8002900:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002904:	d81f      	bhi.n	8002946 <_printf_float+0x17e>
 8002906:	464a      	mov	r2, r9
 8002908:	3901      	subs	r1, #1
 800290a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800290e:	910d      	str	r1, [sp, #52]	; 0x34
 8002910:	f7ff ff1b 	bl	800274a <__exponent>
 8002914:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002916:	4682      	mov	sl, r0
 8002918:	1813      	adds	r3, r2, r0
 800291a:	2a01      	cmp	r2, #1
 800291c:	6123      	str	r3, [r4, #16]
 800291e:	dc02      	bgt.n	8002926 <_printf_float+0x15e>
 8002920:	6822      	ldr	r2, [r4, #0]
 8002922:	07d2      	lsls	r2, r2, #31
 8002924:	d501      	bpl.n	800292a <_printf_float+0x162>
 8002926:	3301      	adds	r3, #1
 8002928:	6123      	str	r3, [r4, #16]
 800292a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800292e:	2b00      	cmp	r3, #0
 8002930:	d09b      	beq.n	800286a <_printf_float+0xa2>
 8002932:	232d      	movs	r3, #45	; 0x2d
 8002934:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002938:	e797      	b.n	800286a <_printf_float+0xa2>
 800293a:	2947      	cmp	r1, #71	; 0x47
 800293c:	d1bc      	bne.n	80028b8 <_printf_float+0xf0>
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1ba      	bne.n	80028b8 <_printf_float+0xf0>
 8002942:	2301      	movs	r3, #1
 8002944:	e7b7      	b.n	80028b6 <_printf_float+0xee>
 8002946:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800294a:	d118      	bne.n	800297e <_printf_float+0x1b6>
 800294c:	2900      	cmp	r1, #0
 800294e:	6863      	ldr	r3, [r4, #4]
 8002950:	dd0b      	ble.n	800296a <_printf_float+0x1a2>
 8002952:	6121      	str	r1, [r4, #16]
 8002954:	b913      	cbnz	r3, 800295c <_printf_float+0x194>
 8002956:	6822      	ldr	r2, [r4, #0]
 8002958:	07d0      	lsls	r0, r2, #31
 800295a:	d502      	bpl.n	8002962 <_printf_float+0x19a>
 800295c:	3301      	adds	r3, #1
 800295e:	440b      	add	r3, r1
 8002960:	6123      	str	r3, [r4, #16]
 8002962:	f04f 0a00 	mov.w	sl, #0
 8002966:	65a1      	str	r1, [r4, #88]	; 0x58
 8002968:	e7df      	b.n	800292a <_printf_float+0x162>
 800296a:	b913      	cbnz	r3, 8002972 <_printf_float+0x1aa>
 800296c:	6822      	ldr	r2, [r4, #0]
 800296e:	07d2      	lsls	r2, r2, #31
 8002970:	d501      	bpl.n	8002976 <_printf_float+0x1ae>
 8002972:	3302      	adds	r3, #2
 8002974:	e7f4      	b.n	8002960 <_printf_float+0x198>
 8002976:	2301      	movs	r3, #1
 8002978:	e7f2      	b.n	8002960 <_printf_float+0x198>
 800297a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800297e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002980:	4299      	cmp	r1, r3
 8002982:	db05      	blt.n	8002990 <_printf_float+0x1c8>
 8002984:	6823      	ldr	r3, [r4, #0]
 8002986:	6121      	str	r1, [r4, #16]
 8002988:	07d8      	lsls	r0, r3, #31
 800298a:	d5ea      	bpl.n	8002962 <_printf_float+0x19a>
 800298c:	1c4b      	adds	r3, r1, #1
 800298e:	e7e7      	b.n	8002960 <_printf_float+0x198>
 8002990:	2900      	cmp	r1, #0
 8002992:	bfcc      	ite	gt
 8002994:	2201      	movgt	r2, #1
 8002996:	f1c1 0202 	rsble	r2, r1, #2
 800299a:	4413      	add	r3, r2
 800299c:	e7e0      	b.n	8002960 <_printf_float+0x198>
 800299e:	6823      	ldr	r3, [r4, #0]
 80029a0:	055a      	lsls	r2, r3, #21
 80029a2:	d407      	bmi.n	80029b4 <_printf_float+0x1ec>
 80029a4:	6923      	ldr	r3, [r4, #16]
 80029a6:	4642      	mov	r2, r8
 80029a8:	4631      	mov	r1, r6
 80029aa:	4628      	mov	r0, r5
 80029ac:	47b8      	blx	r7
 80029ae:	3001      	adds	r0, #1
 80029b0:	d12b      	bne.n	8002a0a <_printf_float+0x242>
 80029b2:	e764      	b.n	800287e <_printf_float+0xb6>
 80029b4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80029b8:	f240 80dd 	bls.w	8002b76 <_printf_float+0x3ae>
 80029bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80029c0:	2200      	movs	r2, #0
 80029c2:	2300      	movs	r3, #0
 80029c4:	f7fd fff0 	bl	80009a8 <__aeabi_dcmpeq>
 80029c8:	2800      	cmp	r0, #0
 80029ca:	d033      	beq.n	8002a34 <_printf_float+0x26c>
 80029cc:	2301      	movs	r3, #1
 80029ce:	4631      	mov	r1, r6
 80029d0:	4628      	mov	r0, r5
 80029d2:	4a35      	ldr	r2, [pc, #212]	; (8002aa8 <_printf_float+0x2e0>)
 80029d4:	47b8      	blx	r7
 80029d6:	3001      	adds	r0, #1
 80029d8:	f43f af51 	beq.w	800287e <_printf_float+0xb6>
 80029dc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80029e0:	429a      	cmp	r2, r3
 80029e2:	db02      	blt.n	80029ea <_printf_float+0x222>
 80029e4:	6823      	ldr	r3, [r4, #0]
 80029e6:	07d8      	lsls	r0, r3, #31
 80029e8:	d50f      	bpl.n	8002a0a <_printf_float+0x242>
 80029ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80029ee:	4631      	mov	r1, r6
 80029f0:	4628      	mov	r0, r5
 80029f2:	47b8      	blx	r7
 80029f4:	3001      	adds	r0, #1
 80029f6:	f43f af42 	beq.w	800287e <_printf_float+0xb6>
 80029fa:	f04f 0800 	mov.w	r8, #0
 80029fe:	f104 091a 	add.w	r9, r4, #26
 8002a02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002a04:	3b01      	subs	r3, #1
 8002a06:	4543      	cmp	r3, r8
 8002a08:	dc09      	bgt.n	8002a1e <_printf_float+0x256>
 8002a0a:	6823      	ldr	r3, [r4, #0]
 8002a0c:	079b      	lsls	r3, r3, #30
 8002a0e:	f100 8102 	bmi.w	8002c16 <_printf_float+0x44e>
 8002a12:	68e0      	ldr	r0, [r4, #12]
 8002a14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002a16:	4298      	cmp	r0, r3
 8002a18:	bfb8      	it	lt
 8002a1a:	4618      	movlt	r0, r3
 8002a1c:	e731      	b.n	8002882 <_printf_float+0xba>
 8002a1e:	2301      	movs	r3, #1
 8002a20:	464a      	mov	r2, r9
 8002a22:	4631      	mov	r1, r6
 8002a24:	4628      	mov	r0, r5
 8002a26:	47b8      	blx	r7
 8002a28:	3001      	adds	r0, #1
 8002a2a:	f43f af28 	beq.w	800287e <_printf_float+0xb6>
 8002a2e:	f108 0801 	add.w	r8, r8, #1
 8002a32:	e7e6      	b.n	8002a02 <_printf_float+0x23a>
 8002a34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	dc38      	bgt.n	8002aac <_printf_float+0x2e4>
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	4631      	mov	r1, r6
 8002a3e:	4628      	mov	r0, r5
 8002a40:	4a19      	ldr	r2, [pc, #100]	; (8002aa8 <_printf_float+0x2e0>)
 8002a42:	47b8      	blx	r7
 8002a44:	3001      	adds	r0, #1
 8002a46:	f43f af1a 	beq.w	800287e <_printf_float+0xb6>
 8002a4a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	d102      	bne.n	8002a58 <_printf_float+0x290>
 8002a52:	6823      	ldr	r3, [r4, #0]
 8002a54:	07d9      	lsls	r1, r3, #31
 8002a56:	d5d8      	bpl.n	8002a0a <_printf_float+0x242>
 8002a58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002a5c:	4631      	mov	r1, r6
 8002a5e:	4628      	mov	r0, r5
 8002a60:	47b8      	blx	r7
 8002a62:	3001      	adds	r0, #1
 8002a64:	f43f af0b 	beq.w	800287e <_printf_float+0xb6>
 8002a68:	f04f 0900 	mov.w	r9, #0
 8002a6c:	f104 0a1a 	add.w	sl, r4, #26
 8002a70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002a72:	425b      	negs	r3, r3
 8002a74:	454b      	cmp	r3, r9
 8002a76:	dc01      	bgt.n	8002a7c <_printf_float+0x2b4>
 8002a78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002a7a:	e794      	b.n	80029a6 <_printf_float+0x1de>
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	4652      	mov	r2, sl
 8002a80:	4631      	mov	r1, r6
 8002a82:	4628      	mov	r0, r5
 8002a84:	47b8      	blx	r7
 8002a86:	3001      	adds	r0, #1
 8002a88:	f43f aef9 	beq.w	800287e <_printf_float+0xb6>
 8002a8c:	f109 0901 	add.w	r9, r9, #1
 8002a90:	e7ee      	b.n	8002a70 <_printf_float+0x2a8>
 8002a92:	bf00      	nop
 8002a94:	7fefffff 	.word	0x7fefffff
 8002a98:	08005134 	.word	0x08005134
 8002a9c:	08005138 	.word	0x08005138
 8002aa0:	08005140 	.word	0x08005140
 8002aa4:	0800513c 	.word	0x0800513c
 8002aa8:	08005144 	.word	0x08005144
 8002aac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002aae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	bfa8      	it	ge
 8002ab4:	461a      	movge	r2, r3
 8002ab6:	2a00      	cmp	r2, #0
 8002ab8:	4691      	mov	r9, r2
 8002aba:	dc37      	bgt.n	8002b2c <_printf_float+0x364>
 8002abc:	f04f 0b00 	mov.w	fp, #0
 8002ac0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002ac4:	f104 021a 	add.w	r2, r4, #26
 8002ac8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002acc:	ebaa 0309 	sub.w	r3, sl, r9
 8002ad0:	455b      	cmp	r3, fp
 8002ad2:	dc33      	bgt.n	8002b3c <_printf_float+0x374>
 8002ad4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	db3b      	blt.n	8002b54 <_printf_float+0x38c>
 8002adc:	6823      	ldr	r3, [r4, #0]
 8002ade:	07da      	lsls	r2, r3, #31
 8002ae0:	d438      	bmi.n	8002b54 <_printf_float+0x38c>
 8002ae2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002ae4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002ae6:	eba3 020a 	sub.w	r2, r3, sl
 8002aea:	eba3 0901 	sub.w	r9, r3, r1
 8002aee:	4591      	cmp	r9, r2
 8002af0:	bfa8      	it	ge
 8002af2:	4691      	movge	r9, r2
 8002af4:	f1b9 0f00 	cmp.w	r9, #0
 8002af8:	dc34      	bgt.n	8002b64 <_printf_float+0x39c>
 8002afa:	f04f 0800 	mov.w	r8, #0
 8002afe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002b02:	f104 0a1a 	add.w	sl, r4, #26
 8002b06:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002b0a:	1a9b      	subs	r3, r3, r2
 8002b0c:	eba3 0309 	sub.w	r3, r3, r9
 8002b10:	4543      	cmp	r3, r8
 8002b12:	f77f af7a 	ble.w	8002a0a <_printf_float+0x242>
 8002b16:	2301      	movs	r3, #1
 8002b18:	4652      	mov	r2, sl
 8002b1a:	4631      	mov	r1, r6
 8002b1c:	4628      	mov	r0, r5
 8002b1e:	47b8      	blx	r7
 8002b20:	3001      	adds	r0, #1
 8002b22:	f43f aeac 	beq.w	800287e <_printf_float+0xb6>
 8002b26:	f108 0801 	add.w	r8, r8, #1
 8002b2a:	e7ec      	b.n	8002b06 <_printf_float+0x33e>
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	4631      	mov	r1, r6
 8002b30:	4642      	mov	r2, r8
 8002b32:	4628      	mov	r0, r5
 8002b34:	47b8      	blx	r7
 8002b36:	3001      	adds	r0, #1
 8002b38:	d1c0      	bne.n	8002abc <_printf_float+0x2f4>
 8002b3a:	e6a0      	b.n	800287e <_printf_float+0xb6>
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	4631      	mov	r1, r6
 8002b40:	4628      	mov	r0, r5
 8002b42:	920b      	str	r2, [sp, #44]	; 0x2c
 8002b44:	47b8      	blx	r7
 8002b46:	3001      	adds	r0, #1
 8002b48:	f43f ae99 	beq.w	800287e <_printf_float+0xb6>
 8002b4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002b4e:	f10b 0b01 	add.w	fp, fp, #1
 8002b52:	e7b9      	b.n	8002ac8 <_printf_float+0x300>
 8002b54:	4631      	mov	r1, r6
 8002b56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002b5a:	4628      	mov	r0, r5
 8002b5c:	47b8      	blx	r7
 8002b5e:	3001      	adds	r0, #1
 8002b60:	d1bf      	bne.n	8002ae2 <_printf_float+0x31a>
 8002b62:	e68c      	b.n	800287e <_printf_float+0xb6>
 8002b64:	464b      	mov	r3, r9
 8002b66:	4631      	mov	r1, r6
 8002b68:	4628      	mov	r0, r5
 8002b6a:	eb08 020a 	add.w	r2, r8, sl
 8002b6e:	47b8      	blx	r7
 8002b70:	3001      	adds	r0, #1
 8002b72:	d1c2      	bne.n	8002afa <_printf_float+0x332>
 8002b74:	e683      	b.n	800287e <_printf_float+0xb6>
 8002b76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002b78:	2a01      	cmp	r2, #1
 8002b7a:	dc01      	bgt.n	8002b80 <_printf_float+0x3b8>
 8002b7c:	07db      	lsls	r3, r3, #31
 8002b7e:	d537      	bpl.n	8002bf0 <_printf_float+0x428>
 8002b80:	2301      	movs	r3, #1
 8002b82:	4642      	mov	r2, r8
 8002b84:	4631      	mov	r1, r6
 8002b86:	4628      	mov	r0, r5
 8002b88:	47b8      	blx	r7
 8002b8a:	3001      	adds	r0, #1
 8002b8c:	f43f ae77 	beq.w	800287e <_printf_float+0xb6>
 8002b90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002b94:	4631      	mov	r1, r6
 8002b96:	4628      	mov	r0, r5
 8002b98:	47b8      	blx	r7
 8002b9a:	3001      	adds	r0, #1
 8002b9c:	f43f ae6f 	beq.w	800287e <_printf_float+0xb6>
 8002ba0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f7fd fefe 	bl	80009a8 <__aeabi_dcmpeq>
 8002bac:	b9d8      	cbnz	r0, 8002be6 <_printf_float+0x41e>
 8002bae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002bb0:	f108 0201 	add.w	r2, r8, #1
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	4631      	mov	r1, r6
 8002bb8:	4628      	mov	r0, r5
 8002bba:	47b8      	blx	r7
 8002bbc:	3001      	adds	r0, #1
 8002bbe:	d10e      	bne.n	8002bde <_printf_float+0x416>
 8002bc0:	e65d      	b.n	800287e <_printf_float+0xb6>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	464a      	mov	r2, r9
 8002bc6:	4631      	mov	r1, r6
 8002bc8:	4628      	mov	r0, r5
 8002bca:	47b8      	blx	r7
 8002bcc:	3001      	adds	r0, #1
 8002bce:	f43f ae56 	beq.w	800287e <_printf_float+0xb6>
 8002bd2:	f108 0801 	add.w	r8, r8, #1
 8002bd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	4543      	cmp	r3, r8
 8002bdc:	dcf1      	bgt.n	8002bc2 <_printf_float+0x3fa>
 8002bde:	4653      	mov	r3, sl
 8002be0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002be4:	e6e0      	b.n	80029a8 <_printf_float+0x1e0>
 8002be6:	f04f 0800 	mov.w	r8, #0
 8002bea:	f104 091a 	add.w	r9, r4, #26
 8002bee:	e7f2      	b.n	8002bd6 <_printf_float+0x40e>
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	4642      	mov	r2, r8
 8002bf4:	e7df      	b.n	8002bb6 <_printf_float+0x3ee>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	464a      	mov	r2, r9
 8002bfa:	4631      	mov	r1, r6
 8002bfc:	4628      	mov	r0, r5
 8002bfe:	47b8      	blx	r7
 8002c00:	3001      	adds	r0, #1
 8002c02:	f43f ae3c 	beq.w	800287e <_printf_float+0xb6>
 8002c06:	f108 0801 	add.w	r8, r8, #1
 8002c0a:	68e3      	ldr	r3, [r4, #12]
 8002c0c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002c0e:	1a5b      	subs	r3, r3, r1
 8002c10:	4543      	cmp	r3, r8
 8002c12:	dcf0      	bgt.n	8002bf6 <_printf_float+0x42e>
 8002c14:	e6fd      	b.n	8002a12 <_printf_float+0x24a>
 8002c16:	f04f 0800 	mov.w	r8, #0
 8002c1a:	f104 0919 	add.w	r9, r4, #25
 8002c1e:	e7f4      	b.n	8002c0a <_printf_float+0x442>

08002c20 <_printf_common>:
 8002c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c24:	4616      	mov	r6, r2
 8002c26:	4699      	mov	r9, r3
 8002c28:	688a      	ldr	r2, [r1, #8]
 8002c2a:	690b      	ldr	r3, [r1, #16]
 8002c2c:	4607      	mov	r7, r0
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	bfb8      	it	lt
 8002c32:	4613      	movlt	r3, r2
 8002c34:	6033      	str	r3, [r6, #0]
 8002c36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c3a:	460c      	mov	r4, r1
 8002c3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c40:	b10a      	cbz	r2, 8002c46 <_printf_common+0x26>
 8002c42:	3301      	adds	r3, #1
 8002c44:	6033      	str	r3, [r6, #0]
 8002c46:	6823      	ldr	r3, [r4, #0]
 8002c48:	0699      	lsls	r1, r3, #26
 8002c4a:	bf42      	ittt	mi
 8002c4c:	6833      	ldrmi	r3, [r6, #0]
 8002c4e:	3302      	addmi	r3, #2
 8002c50:	6033      	strmi	r3, [r6, #0]
 8002c52:	6825      	ldr	r5, [r4, #0]
 8002c54:	f015 0506 	ands.w	r5, r5, #6
 8002c58:	d106      	bne.n	8002c68 <_printf_common+0x48>
 8002c5a:	f104 0a19 	add.w	sl, r4, #25
 8002c5e:	68e3      	ldr	r3, [r4, #12]
 8002c60:	6832      	ldr	r2, [r6, #0]
 8002c62:	1a9b      	subs	r3, r3, r2
 8002c64:	42ab      	cmp	r3, r5
 8002c66:	dc28      	bgt.n	8002cba <_printf_common+0x9a>
 8002c68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002c6c:	1e13      	subs	r3, r2, #0
 8002c6e:	6822      	ldr	r2, [r4, #0]
 8002c70:	bf18      	it	ne
 8002c72:	2301      	movne	r3, #1
 8002c74:	0692      	lsls	r2, r2, #26
 8002c76:	d42d      	bmi.n	8002cd4 <_printf_common+0xb4>
 8002c78:	4649      	mov	r1, r9
 8002c7a:	4638      	mov	r0, r7
 8002c7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c80:	47c0      	blx	r8
 8002c82:	3001      	adds	r0, #1
 8002c84:	d020      	beq.n	8002cc8 <_printf_common+0xa8>
 8002c86:	6823      	ldr	r3, [r4, #0]
 8002c88:	68e5      	ldr	r5, [r4, #12]
 8002c8a:	f003 0306 	and.w	r3, r3, #6
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	bf18      	it	ne
 8002c92:	2500      	movne	r5, #0
 8002c94:	6832      	ldr	r2, [r6, #0]
 8002c96:	f04f 0600 	mov.w	r6, #0
 8002c9a:	68a3      	ldr	r3, [r4, #8]
 8002c9c:	bf08      	it	eq
 8002c9e:	1aad      	subeq	r5, r5, r2
 8002ca0:	6922      	ldr	r2, [r4, #16]
 8002ca2:	bf08      	it	eq
 8002ca4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	bfc4      	itt	gt
 8002cac:	1a9b      	subgt	r3, r3, r2
 8002cae:	18ed      	addgt	r5, r5, r3
 8002cb0:	341a      	adds	r4, #26
 8002cb2:	42b5      	cmp	r5, r6
 8002cb4:	d11a      	bne.n	8002cec <_printf_common+0xcc>
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	e008      	b.n	8002ccc <_printf_common+0xac>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	4652      	mov	r2, sl
 8002cbe:	4649      	mov	r1, r9
 8002cc0:	4638      	mov	r0, r7
 8002cc2:	47c0      	blx	r8
 8002cc4:	3001      	adds	r0, #1
 8002cc6:	d103      	bne.n	8002cd0 <_printf_common+0xb0>
 8002cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cd0:	3501      	adds	r5, #1
 8002cd2:	e7c4      	b.n	8002c5e <_printf_common+0x3e>
 8002cd4:	2030      	movs	r0, #48	; 0x30
 8002cd6:	18e1      	adds	r1, r4, r3
 8002cd8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ce2:	4422      	add	r2, r4
 8002ce4:	3302      	adds	r3, #2
 8002ce6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002cea:	e7c5      	b.n	8002c78 <_printf_common+0x58>
 8002cec:	2301      	movs	r3, #1
 8002cee:	4622      	mov	r2, r4
 8002cf0:	4649      	mov	r1, r9
 8002cf2:	4638      	mov	r0, r7
 8002cf4:	47c0      	blx	r8
 8002cf6:	3001      	adds	r0, #1
 8002cf8:	d0e6      	beq.n	8002cc8 <_printf_common+0xa8>
 8002cfa:	3601      	adds	r6, #1
 8002cfc:	e7d9      	b.n	8002cb2 <_printf_common+0x92>
	...

08002d00 <_printf_i>:
 8002d00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d04:	7e0f      	ldrb	r7, [r1, #24]
 8002d06:	4691      	mov	r9, r2
 8002d08:	2f78      	cmp	r7, #120	; 0x78
 8002d0a:	4680      	mov	r8, r0
 8002d0c:	460c      	mov	r4, r1
 8002d0e:	469a      	mov	sl, r3
 8002d10:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002d12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002d16:	d807      	bhi.n	8002d28 <_printf_i+0x28>
 8002d18:	2f62      	cmp	r7, #98	; 0x62
 8002d1a:	d80a      	bhi.n	8002d32 <_printf_i+0x32>
 8002d1c:	2f00      	cmp	r7, #0
 8002d1e:	f000 80d9 	beq.w	8002ed4 <_printf_i+0x1d4>
 8002d22:	2f58      	cmp	r7, #88	; 0x58
 8002d24:	f000 80a4 	beq.w	8002e70 <_printf_i+0x170>
 8002d28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002d30:	e03a      	b.n	8002da8 <_printf_i+0xa8>
 8002d32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002d36:	2b15      	cmp	r3, #21
 8002d38:	d8f6      	bhi.n	8002d28 <_printf_i+0x28>
 8002d3a:	a101      	add	r1, pc, #4	; (adr r1, 8002d40 <_printf_i+0x40>)
 8002d3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d40:	08002d99 	.word	0x08002d99
 8002d44:	08002dad 	.word	0x08002dad
 8002d48:	08002d29 	.word	0x08002d29
 8002d4c:	08002d29 	.word	0x08002d29
 8002d50:	08002d29 	.word	0x08002d29
 8002d54:	08002d29 	.word	0x08002d29
 8002d58:	08002dad 	.word	0x08002dad
 8002d5c:	08002d29 	.word	0x08002d29
 8002d60:	08002d29 	.word	0x08002d29
 8002d64:	08002d29 	.word	0x08002d29
 8002d68:	08002d29 	.word	0x08002d29
 8002d6c:	08002ebb 	.word	0x08002ebb
 8002d70:	08002ddd 	.word	0x08002ddd
 8002d74:	08002e9d 	.word	0x08002e9d
 8002d78:	08002d29 	.word	0x08002d29
 8002d7c:	08002d29 	.word	0x08002d29
 8002d80:	08002edd 	.word	0x08002edd
 8002d84:	08002d29 	.word	0x08002d29
 8002d88:	08002ddd 	.word	0x08002ddd
 8002d8c:	08002d29 	.word	0x08002d29
 8002d90:	08002d29 	.word	0x08002d29
 8002d94:	08002ea5 	.word	0x08002ea5
 8002d98:	682b      	ldr	r3, [r5, #0]
 8002d9a:	1d1a      	adds	r2, r3, #4
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	602a      	str	r2, [r5, #0]
 8002da0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002da4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002da8:	2301      	movs	r3, #1
 8002daa:	e0a4      	b.n	8002ef6 <_printf_i+0x1f6>
 8002dac:	6820      	ldr	r0, [r4, #0]
 8002dae:	6829      	ldr	r1, [r5, #0]
 8002db0:	0606      	lsls	r6, r0, #24
 8002db2:	f101 0304 	add.w	r3, r1, #4
 8002db6:	d50a      	bpl.n	8002dce <_printf_i+0xce>
 8002db8:	680e      	ldr	r6, [r1, #0]
 8002dba:	602b      	str	r3, [r5, #0]
 8002dbc:	2e00      	cmp	r6, #0
 8002dbe:	da03      	bge.n	8002dc8 <_printf_i+0xc8>
 8002dc0:	232d      	movs	r3, #45	; 0x2d
 8002dc2:	4276      	negs	r6, r6
 8002dc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002dc8:	230a      	movs	r3, #10
 8002dca:	485e      	ldr	r0, [pc, #376]	; (8002f44 <_printf_i+0x244>)
 8002dcc:	e019      	b.n	8002e02 <_printf_i+0x102>
 8002dce:	680e      	ldr	r6, [r1, #0]
 8002dd0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002dd4:	602b      	str	r3, [r5, #0]
 8002dd6:	bf18      	it	ne
 8002dd8:	b236      	sxthne	r6, r6
 8002dda:	e7ef      	b.n	8002dbc <_printf_i+0xbc>
 8002ddc:	682b      	ldr	r3, [r5, #0]
 8002dde:	6820      	ldr	r0, [r4, #0]
 8002de0:	1d19      	adds	r1, r3, #4
 8002de2:	6029      	str	r1, [r5, #0]
 8002de4:	0601      	lsls	r1, r0, #24
 8002de6:	d501      	bpl.n	8002dec <_printf_i+0xec>
 8002de8:	681e      	ldr	r6, [r3, #0]
 8002dea:	e002      	b.n	8002df2 <_printf_i+0xf2>
 8002dec:	0646      	lsls	r6, r0, #25
 8002dee:	d5fb      	bpl.n	8002de8 <_printf_i+0xe8>
 8002df0:	881e      	ldrh	r6, [r3, #0]
 8002df2:	2f6f      	cmp	r7, #111	; 0x6f
 8002df4:	bf0c      	ite	eq
 8002df6:	2308      	moveq	r3, #8
 8002df8:	230a      	movne	r3, #10
 8002dfa:	4852      	ldr	r0, [pc, #328]	; (8002f44 <_printf_i+0x244>)
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e02:	6865      	ldr	r5, [r4, #4]
 8002e04:	2d00      	cmp	r5, #0
 8002e06:	bfa8      	it	ge
 8002e08:	6821      	ldrge	r1, [r4, #0]
 8002e0a:	60a5      	str	r5, [r4, #8]
 8002e0c:	bfa4      	itt	ge
 8002e0e:	f021 0104 	bicge.w	r1, r1, #4
 8002e12:	6021      	strge	r1, [r4, #0]
 8002e14:	b90e      	cbnz	r6, 8002e1a <_printf_i+0x11a>
 8002e16:	2d00      	cmp	r5, #0
 8002e18:	d04d      	beq.n	8002eb6 <_printf_i+0x1b6>
 8002e1a:	4615      	mov	r5, r2
 8002e1c:	fbb6 f1f3 	udiv	r1, r6, r3
 8002e20:	fb03 6711 	mls	r7, r3, r1, r6
 8002e24:	5dc7      	ldrb	r7, [r0, r7]
 8002e26:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002e2a:	4637      	mov	r7, r6
 8002e2c:	42bb      	cmp	r3, r7
 8002e2e:	460e      	mov	r6, r1
 8002e30:	d9f4      	bls.n	8002e1c <_printf_i+0x11c>
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d10b      	bne.n	8002e4e <_printf_i+0x14e>
 8002e36:	6823      	ldr	r3, [r4, #0]
 8002e38:	07de      	lsls	r6, r3, #31
 8002e3a:	d508      	bpl.n	8002e4e <_printf_i+0x14e>
 8002e3c:	6923      	ldr	r3, [r4, #16]
 8002e3e:	6861      	ldr	r1, [r4, #4]
 8002e40:	4299      	cmp	r1, r3
 8002e42:	bfde      	ittt	le
 8002e44:	2330      	movle	r3, #48	; 0x30
 8002e46:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e4a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002e4e:	1b52      	subs	r2, r2, r5
 8002e50:	6122      	str	r2, [r4, #16]
 8002e52:	464b      	mov	r3, r9
 8002e54:	4621      	mov	r1, r4
 8002e56:	4640      	mov	r0, r8
 8002e58:	f8cd a000 	str.w	sl, [sp]
 8002e5c:	aa03      	add	r2, sp, #12
 8002e5e:	f7ff fedf 	bl	8002c20 <_printf_common>
 8002e62:	3001      	adds	r0, #1
 8002e64:	d14c      	bne.n	8002f00 <_printf_i+0x200>
 8002e66:	f04f 30ff 	mov.w	r0, #4294967295
 8002e6a:	b004      	add	sp, #16
 8002e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e70:	4834      	ldr	r0, [pc, #208]	; (8002f44 <_printf_i+0x244>)
 8002e72:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002e76:	6829      	ldr	r1, [r5, #0]
 8002e78:	6823      	ldr	r3, [r4, #0]
 8002e7a:	f851 6b04 	ldr.w	r6, [r1], #4
 8002e7e:	6029      	str	r1, [r5, #0]
 8002e80:	061d      	lsls	r5, r3, #24
 8002e82:	d514      	bpl.n	8002eae <_printf_i+0x1ae>
 8002e84:	07df      	lsls	r7, r3, #31
 8002e86:	bf44      	itt	mi
 8002e88:	f043 0320 	orrmi.w	r3, r3, #32
 8002e8c:	6023      	strmi	r3, [r4, #0]
 8002e8e:	b91e      	cbnz	r6, 8002e98 <_printf_i+0x198>
 8002e90:	6823      	ldr	r3, [r4, #0]
 8002e92:	f023 0320 	bic.w	r3, r3, #32
 8002e96:	6023      	str	r3, [r4, #0]
 8002e98:	2310      	movs	r3, #16
 8002e9a:	e7af      	b.n	8002dfc <_printf_i+0xfc>
 8002e9c:	6823      	ldr	r3, [r4, #0]
 8002e9e:	f043 0320 	orr.w	r3, r3, #32
 8002ea2:	6023      	str	r3, [r4, #0]
 8002ea4:	2378      	movs	r3, #120	; 0x78
 8002ea6:	4828      	ldr	r0, [pc, #160]	; (8002f48 <_printf_i+0x248>)
 8002ea8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002eac:	e7e3      	b.n	8002e76 <_printf_i+0x176>
 8002eae:	0659      	lsls	r1, r3, #25
 8002eb0:	bf48      	it	mi
 8002eb2:	b2b6      	uxthmi	r6, r6
 8002eb4:	e7e6      	b.n	8002e84 <_printf_i+0x184>
 8002eb6:	4615      	mov	r5, r2
 8002eb8:	e7bb      	b.n	8002e32 <_printf_i+0x132>
 8002eba:	682b      	ldr	r3, [r5, #0]
 8002ebc:	6826      	ldr	r6, [r4, #0]
 8002ebe:	1d18      	adds	r0, r3, #4
 8002ec0:	6961      	ldr	r1, [r4, #20]
 8002ec2:	6028      	str	r0, [r5, #0]
 8002ec4:	0635      	lsls	r5, r6, #24
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	d501      	bpl.n	8002ece <_printf_i+0x1ce>
 8002eca:	6019      	str	r1, [r3, #0]
 8002ecc:	e002      	b.n	8002ed4 <_printf_i+0x1d4>
 8002ece:	0670      	lsls	r0, r6, #25
 8002ed0:	d5fb      	bpl.n	8002eca <_printf_i+0x1ca>
 8002ed2:	8019      	strh	r1, [r3, #0]
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	4615      	mov	r5, r2
 8002ed8:	6123      	str	r3, [r4, #16]
 8002eda:	e7ba      	b.n	8002e52 <_printf_i+0x152>
 8002edc:	682b      	ldr	r3, [r5, #0]
 8002ede:	2100      	movs	r1, #0
 8002ee0:	1d1a      	adds	r2, r3, #4
 8002ee2:	602a      	str	r2, [r5, #0]
 8002ee4:	681d      	ldr	r5, [r3, #0]
 8002ee6:	6862      	ldr	r2, [r4, #4]
 8002ee8:	4628      	mov	r0, r5
 8002eea:	f000 ffc9 	bl	8003e80 <memchr>
 8002eee:	b108      	cbz	r0, 8002ef4 <_printf_i+0x1f4>
 8002ef0:	1b40      	subs	r0, r0, r5
 8002ef2:	6060      	str	r0, [r4, #4]
 8002ef4:	6863      	ldr	r3, [r4, #4]
 8002ef6:	6123      	str	r3, [r4, #16]
 8002ef8:	2300      	movs	r3, #0
 8002efa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002efe:	e7a8      	b.n	8002e52 <_printf_i+0x152>
 8002f00:	462a      	mov	r2, r5
 8002f02:	4649      	mov	r1, r9
 8002f04:	4640      	mov	r0, r8
 8002f06:	6923      	ldr	r3, [r4, #16]
 8002f08:	47d0      	blx	sl
 8002f0a:	3001      	adds	r0, #1
 8002f0c:	d0ab      	beq.n	8002e66 <_printf_i+0x166>
 8002f0e:	6823      	ldr	r3, [r4, #0]
 8002f10:	079b      	lsls	r3, r3, #30
 8002f12:	d413      	bmi.n	8002f3c <_printf_i+0x23c>
 8002f14:	68e0      	ldr	r0, [r4, #12]
 8002f16:	9b03      	ldr	r3, [sp, #12]
 8002f18:	4298      	cmp	r0, r3
 8002f1a:	bfb8      	it	lt
 8002f1c:	4618      	movlt	r0, r3
 8002f1e:	e7a4      	b.n	8002e6a <_printf_i+0x16a>
 8002f20:	2301      	movs	r3, #1
 8002f22:	4632      	mov	r2, r6
 8002f24:	4649      	mov	r1, r9
 8002f26:	4640      	mov	r0, r8
 8002f28:	47d0      	blx	sl
 8002f2a:	3001      	adds	r0, #1
 8002f2c:	d09b      	beq.n	8002e66 <_printf_i+0x166>
 8002f2e:	3501      	adds	r5, #1
 8002f30:	68e3      	ldr	r3, [r4, #12]
 8002f32:	9903      	ldr	r1, [sp, #12]
 8002f34:	1a5b      	subs	r3, r3, r1
 8002f36:	42ab      	cmp	r3, r5
 8002f38:	dcf2      	bgt.n	8002f20 <_printf_i+0x220>
 8002f3a:	e7eb      	b.n	8002f14 <_printf_i+0x214>
 8002f3c:	2500      	movs	r5, #0
 8002f3e:	f104 0619 	add.w	r6, r4, #25
 8002f42:	e7f5      	b.n	8002f30 <_printf_i+0x230>
 8002f44:	08005146 	.word	0x08005146
 8002f48:	08005157 	.word	0x08005157

08002f4c <iprintf>:
 8002f4c:	b40f      	push	{r0, r1, r2, r3}
 8002f4e:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <iprintf+0x2c>)
 8002f50:	b513      	push	{r0, r1, r4, lr}
 8002f52:	681c      	ldr	r4, [r3, #0]
 8002f54:	b124      	cbz	r4, 8002f60 <iprintf+0x14>
 8002f56:	69a3      	ldr	r3, [r4, #24]
 8002f58:	b913      	cbnz	r3, 8002f60 <iprintf+0x14>
 8002f5a:	4620      	mov	r0, r4
 8002f5c:	f000 fee2 	bl	8003d24 <__sinit>
 8002f60:	ab05      	add	r3, sp, #20
 8002f62:	4620      	mov	r0, r4
 8002f64:	9a04      	ldr	r2, [sp, #16]
 8002f66:	68a1      	ldr	r1, [r4, #8]
 8002f68:	9301      	str	r3, [sp, #4]
 8002f6a:	f001 fc3f 	bl	80047ec <_vfiprintf_r>
 8002f6e:	b002      	add	sp, #8
 8002f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f74:	b004      	add	sp, #16
 8002f76:	4770      	bx	lr
 8002f78:	2000000c 	.word	0x2000000c

08002f7c <quorem>:
 8002f7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f80:	6903      	ldr	r3, [r0, #16]
 8002f82:	690c      	ldr	r4, [r1, #16]
 8002f84:	4607      	mov	r7, r0
 8002f86:	42a3      	cmp	r3, r4
 8002f88:	f2c0 8082 	blt.w	8003090 <quorem+0x114>
 8002f8c:	3c01      	subs	r4, #1
 8002f8e:	f100 0514 	add.w	r5, r0, #20
 8002f92:	f101 0814 	add.w	r8, r1, #20
 8002f96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002f9a:	9301      	str	r3, [sp, #4]
 8002f9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002fa0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	fbb2 f6f3 	udiv	r6, r2, r3
 8002fac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8002fb0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002fb4:	d331      	bcc.n	800301a <quorem+0x9e>
 8002fb6:	f04f 0e00 	mov.w	lr, #0
 8002fba:	4640      	mov	r0, r8
 8002fbc:	46ac      	mov	ip, r5
 8002fbe:	46f2      	mov	sl, lr
 8002fc0:	f850 2b04 	ldr.w	r2, [r0], #4
 8002fc4:	b293      	uxth	r3, r2
 8002fc6:	fb06 e303 	mla	r3, r6, r3, lr
 8002fca:	0c12      	lsrs	r2, r2, #16
 8002fcc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	fb06 e202 	mla	r2, r6, r2, lr
 8002fd6:	ebaa 0303 	sub.w	r3, sl, r3
 8002fda:	f8dc a000 	ldr.w	sl, [ip]
 8002fde:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002fe2:	fa1f fa8a 	uxth.w	sl, sl
 8002fe6:	4453      	add	r3, sl
 8002fe8:	f8dc a000 	ldr.w	sl, [ip]
 8002fec:	b292      	uxth	r2, r2
 8002fee:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8002ff2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002ffc:	4581      	cmp	r9, r0
 8002ffe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003002:	f84c 3b04 	str.w	r3, [ip], #4
 8003006:	d2db      	bcs.n	8002fc0 <quorem+0x44>
 8003008:	f855 300b 	ldr.w	r3, [r5, fp]
 800300c:	b92b      	cbnz	r3, 800301a <quorem+0x9e>
 800300e:	9b01      	ldr	r3, [sp, #4]
 8003010:	3b04      	subs	r3, #4
 8003012:	429d      	cmp	r5, r3
 8003014:	461a      	mov	r2, r3
 8003016:	d32f      	bcc.n	8003078 <quorem+0xfc>
 8003018:	613c      	str	r4, [r7, #16]
 800301a:	4638      	mov	r0, r7
 800301c:	f001 f9ca 	bl	80043b4 <__mcmp>
 8003020:	2800      	cmp	r0, #0
 8003022:	db25      	blt.n	8003070 <quorem+0xf4>
 8003024:	4628      	mov	r0, r5
 8003026:	f04f 0c00 	mov.w	ip, #0
 800302a:	3601      	adds	r6, #1
 800302c:	f858 1b04 	ldr.w	r1, [r8], #4
 8003030:	f8d0 e000 	ldr.w	lr, [r0]
 8003034:	b28b      	uxth	r3, r1
 8003036:	ebac 0303 	sub.w	r3, ip, r3
 800303a:	fa1f f28e 	uxth.w	r2, lr
 800303e:	4413      	add	r3, r2
 8003040:	0c0a      	lsrs	r2, r1, #16
 8003042:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003046:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800304a:	b29b      	uxth	r3, r3
 800304c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003050:	45c1      	cmp	r9, r8
 8003052:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003056:	f840 3b04 	str.w	r3, [r0], #4
 800305a:	d2e7      	bcs.n	800302c <quorem+0xb0>
 800305c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003060:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003064:	b922      	cbnz	r2, 8003070 <quorem+0xf4>
 8003066:	3b04      	subs	r3, #4
 8003068:	429d      	cmp	r5, r3
 800306a:	461a      	mov	r2, r3
 800306c:	d30a      	bcc.n	8003084 <quorem+0x108>
 800306e:	613c      	str	r4, [r7, #16]
 8003070:	4630      	mov	r0, r6
 8003072:	b003      	add	sp, #12
 8003074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003078:	6812      	ldr	r2, [r2, #0]
 800307a:	3b04      	subs	r3, #4
 800307c:	2a00      	cmp	r2, #0
 800307e:	d1cb      	bne.n	8003018 <quorem+0x9c>
 8003080:	3c01      	subs	r4, #1
 8003082:	e7c6      	b.n	8003012 <quorem+0x96>
 8003084:	6812      	ldr	r2, [r2, #0]
 8003086:	3b04      	subs	r3, #4
 8003088:	2a00      	cmp	r2, #0
 800308a:	d1f0      	bne.n	800306e <quorem+0xf2>
 800308c:	3c01      	subs	r4, #1
 800308e:	e7eb      	b.n	8003068 <quorem+0xec>
 8003090:	2000      	movs	r0, #0
 8003092:	e7ee      	b.n	8003072 <quorem+0xf6>
 8003094:	0000      	movs	r0, r0
	...

08003098 <_dtoa_r>:
 8003098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800309c:	4616      	mov	r6, r2
 800309e:	461f      	mov	r7, r3
 80030a0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80030a2:	b099      	sub	sp, #100	; 0x64
 80030a4:	4605      	mov	r5, r0
 80030a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80030aa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80030ae:	b974      	cbnz	r4, 80030ce <_dtoa_r+0x36>
 80030b0:	2010      	movs	r0, #16
 80030b2:	f000 fedd 	bl	8003e70 <malloc>
 80030b6:	4602      	mov	r2, r0
 80030b8:	6268      	str	r0, [r5, #36]	; 0x24
 80030ba:	b920      	cbnz	r0, 80030c6 <_dtoa_r+0x2e>
 80030bc:	21ea      	movs	r1, #234	; 0xea
 80030be:	4ba8      	ldr	r3, [pc, #672]	; (8003360 <_dtoa_r+0x2c8>)
 80030c0:	48a8      	ldr	r0, [pc, #672]	; (8003364 <_dtoa_r+0x2cc>)
 80030c2:	f001 fde9 	bl	8004c98 <__assert_func>
 80030c6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80030ca:	6004      	str	r4, [r0, #0]
 80030cc:	60c4      	str	r4, [r0, #12]
 80030ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80030d0:	6819      	ldr	r1, [r3, #0]
 80030d2:	b151      	cbz	r1, 80030ea <_dtoa_r+0x52>
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	2301      	movs	r3, #1
 80030d8:	4093      	lsls	r3, r2
 80030da:	604a      	str	r2, [r1, #4]
 80030dc:	608b      	str	r3, [r1, #8]
 80030de:	4628      	mov	r0, r5
 80030e0:	f000 ff2a 	bl	8003f38 <_Bfree>
 80030e4:	2200      	movs	r2, #0
 80030e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	1e3b      	subs	r3, r7, #0
 80030ec:	bfaf      	iteee	ge
 80030ee:	2300      	movge	r3, #0
 80030f0:	2201      	movlt	r2, #1
 80030f2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80030f6:	9305      	strlt	r3, [sp, #20]
 80030f8:	bfa8      	it	ge
 80030fa:	f8c8 3000 	strge.w	r3, [r8]
 80030fe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003102:	4b99      	ldr	r3, [pc, #612]	; (8003368 <_dtoa_r+0x2d0>)
 8003104:	bfb8      	it	lt
 8003106:	f8c8 2000 	strlt.w	r2, [r8]
 800310a:	ea33 0309 	bics.w	r3, r3, r9
 800310e:	d119      	bne.n	8003144 <_dtoa_r+0xac>
 8003110:	f242 730f 	movw	r3, #9999	; 0x270f
 8003114:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003116:	6013      	str	r3, [r2, #0]
 8003118:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800311c:	4333      	orrs	r3, r6
 800311e:	f000 857f 	beq.w	8003c20 <_dtoa_r+0xb88>
 8003122:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003124:	b953      	cbnz	r3, 800313c <_dtoa_r+0xa4>
 8003126:	4b91      	ldr	r3, [pc, #580]	; (800336c <_dtoa_r+0x2d4>)
 8003128:	e022      	b.n	8003170 <_dtoa_r+0xd8>
 800312a:	4b91      	ldr	r3, [pc, #580]	; (8003370 <_dtoa_r+0x2d8>)
 800312c:	9303      	str	r3, [sp, #12]
 800312e:	3308      	adds	r3, #8
 8003130:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003132:	6013      	str	r3, [r2, #0]
 8003134:	9803      	ldr	r0, [sp, #12]
 8003136:	b019      	add	sp, #100	; 0x64
 8003138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800313c:	4b8b      	ldr	r3, [pc, #556]	; (800336c <_dtoa_r+0x2d4>)
 800313e:	9303      	str	r3, [sp, #12]
 8003140:	3303      	adds	r3, #3
 8003142:	e7f5      	b.n	8003130 <_dtoa_r+0x98>
 8003144:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003148:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800314c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003150:	2200      	movs	r2, #0
 8003152:	2300      	movs	r3, #0
 8003154:	f7fd fc28 	bl	80009a8 <__aeabi_dcmpeq>
 8003158:	4680      	mov	r8, r0
 800315a:	b158      	cbz	r0, 8003174 <_dtoa_r+0xdc>
 800315c:	2301      	movs	r3, #1
 800315e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 8558 	beq.w	8003c1a <_dtoa_r+0xb82>
 800316a:	4882      	ldr	r0, [pc, #520]	; (8003374 <_dtoa_r+0x2dc>)
 800316c:	6018      	str	r0, [r3, #0]
 800316e:	1e43      	subs	r3, r0, #1
 8003170:	9303      	str	r3, [sp, #12]
 8003172:	e7df      	b.n	8003134 <_dtoa_r+0x9c>
 8003174:	ab16      	add	r3, sp, #88	; 0x58
 8003176:	9301      	str	r3, [sp, #4]
 8003178:	ab17      	add	r3, sp, #92	; 0x5c
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	4628      	mov	r0, r5
 800317e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003182:	f001 f9bf 	bl	8004504 <__d2b>
 8003186:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800318a:	4683      	mov	fp, r0
 800318c:	2c00      	cmp	r4, #0
 800318e:	d07f      	beq.n	8003290 <_dtoa_r+0x1f8>
 8003190:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003194:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003196:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800319a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800319e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80031a2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80031a6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80031aa:	2200      	movs	r2, #0
 80031ac:	4b72      	ldr	r3, [pc, #456]	; (8003378 <_dtoa_r+0x2e0>)
 80031ae:	f7fc ffdb 	bl	8000168 <__aeabi_dsub>
 80031b2:	a365      	add	r3, pc, #404	; (adr r3, 8003348 <_dtoa_r+0x2b0>)
 80031b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b8:	f7fd f98e 	bl	80004d8 <__aeabi_dmul>
 80031bc:	a364      	add	r3, pc, #400	; (adr r3, 8003350 <_dtoa_r+0x2b8>)
 80031be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c2:	f7fc ffd3 	bl	800016c <__adddf3>
 80031c6:	4606      	mov	r6, r0
 80031c8:	4620      	mov	r0, r4
 80031ca:	460f      	mov	r7, r1
 80031cc:	f7fd f91a 	bl	8000404 <__aeabi_i2d>
 80031d0:	a361      	add	r3, pc, #388	; (adr r3, 8003358 <_dtoa_r+0x2c0>)
 80031d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d6:	f7fd f97f 	bl	80004d8 <__aeabi_dmul>
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	4630      	mov	r0, r6
 80031e0:	4639      	mov	r1, r7
 80031e2:	f7fc ffc3 	bl	800016c <__adddf3>
 80031e6:	4606      	mov	r6, r0
 80031e8:	460f      	mov	r7, r1
 80031ea:	f7fd fc25 	bl	8000a38 <__aeabi_d2iz>
 80031ee:	2200      	movs	r2, #0
 80031f0:	4682      	mov	sl, r0
 80031f2:	2300      	movs	r3, #0
 80031f4:	4630      	mov	r0, r6
 80031f6:	4639      	mov	r1, r7
 80031f8:	f7fd fbe0 	bl	80009bc <__aeabi_dcmplt>
 80031fc:	b148      	cbz	r0, 8003212 <_dtoa_r+0x17a>
 80031fe:	4650      	mov	r0, sl
 8003200:	f7fd f900 	bl	8000404 <__aeabi_i2d>
 8003204:	4632      	mov	r2, r6
 8003206:	463b      	mov	r3, r7
 8003208:	f7fd fbce 	bl	80009a8 <__aeabi_dcmpeq>
 800320c:	b908      	cbnz	r0, 8003212 <_dtoa_r+0x17a>
 800320e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003212:	f1ba 0f16 	cmp.w	sl, #22
 8003216:	d858      	bhi.n	80032ca <_dtoa_r+0x232>
 8003218:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800321c:	4b57      	ldr	r3, [pc, #348]	; (800337c <_dtoa_r+0x2e4>)
 800321e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003226:	f7fd fbc9 	bl	80009bc <__aeabi_dcmplt>
 800322a:	2800      	cmp	r0, #0
 800322c:	d04f      	beq.n	80032ce <_dtoa_r+0x236>
 800322e:	2300      	movs	r3, #0
 8003230:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003234:	930f      	str	r3, [sp, #60]	; 0x3c
 8003236:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003238:	1b1c      	subs	r4, r3, r4
 800323a:	1e63      	subs	r3, r4, #1
 800323c:	9309      	str	r3, [sp, #36]	; 0x24
 800323e:	bf49      	itett	mi
 8003240:	f1c4 0301 	rsbmi	r3, r4, #1
 8003244:	2300      	movpl	r3, #0
 8003246:	9306      	strmi	r3, [sp, #24]
 8003248:	2300      	movmi	r3, #0
 800324a:	bf54      	ite	pl
 800324c:	9306      	strpl	r3, [sp, #24]
 800324e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003250:	f1ba 0f00 	cmp.w	sl, #0
 8003254:	db3d      	blt.n	80032d2 <_dtoa_r+0x23a>
 8003256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003258:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800325c:	4453      	add	r3, sl
 800325e:	9309      	str	r3, [sp, #36]	; 0x24
 8003260:	2300      	movs	r3, #0
 8003262:	930a      	str	r3, [sp, #40]	; 0x28
 8003264:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003266:	2b09      	cmp	r3, #9
 8003268:	f200 808c 	bhi.w	8003384 <_dtoa_r+0x2ec>
 800326c:	2b05      	cmp	r3, #5
 800326e:	bfc4      	itt	gt
 8003270:	3b04      	subgt	r3, #4
 8003272:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003274:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003276:	bfc8      	it	gt
 8003278:	2400      	movgt	r4, #0
 800327a:	f1a3 0302 	sub.w	r3, r3, #2
 800327e:	bfd8      	it	le
 8003280:	2401      	movle	r4, #1
 8003282:	2b03      	cmp	r3, #3
 8003284:	f200 808a 	bhi.w	800339c <_dtoa_r+0x304>
 8003288:	e8df f003 	tbb	[pc, r3]
 800328c:	5b4d4f2d 	.word	0x5b4d4f2d
 8003290:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003294:	441c      	add	r4, r3
 8003296:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800329a:	2b20      	cmp	r3, #32
 800329c:	bfc3      	ittte	gt
 800329e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80032a2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80032a6:	fa09 f303 	lslgt.w	r3, r9, r3
 80032aa:	f1c3 0320 	rsble	r3, r3, #32
 80032ae:	bfc6      	itte	gt
 80032b0:	fa26 f000 	lsrgt.w	r0, r6, r0
 80032b4:	4318      	orrgt	r0, r3
 80032b6:	fa06 f003 	lslle.w	r0, r6, r3
 80032ba:	f7fd f893 	bl	80003e4 <__aeabi_ui2d>
 80032be:	2301      	movs	r3, #1
 80032c0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80032c4:	3c01      	subs	r4, #1
 80032c6:	9313      	str	r3, [sp, #76]	; 0x4c
 80032c8:	e76f      	b.n	80031aa <_dtoa_r+0x112>
 80032ca:	2301      	movs	r3, #1
 80032cc:	e7b2      	b.n	8003234 <_dtoa_r+0x19c>
 80032ce:	900f      	str	r0, [sp, #60]	; 0x3c
 80032d0:	e7b1      	b.n	8003236 <_dtoa_r+0x19e>
 80032d2:	9b06      	ldr	r3, [sp, #24]
 80032d4:	eba3 030a 	sub.w	r3, r3, sl
 80032d8:	9306      	str	r3, [sp, #24]
 80032da:	f1ca 0300 	rsb	r3, sl, #0
 80032de:	930a      	str	r3, [sp, #40]	; 0x28
 80032e0:	2300      	movs	r3, #0
 80032e2:	930e      	str	r3, [sp, #56]	; 0x38
 80032e4:	e7be      	b.n	8003264 <_dtoa_r+0x1cc>
 80032e6:	2300      	movs	r3, #0
 80032e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80032ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	dc58      	bgt.n	80033a2 <_dtoa_r+0x30a>
 80032f0:	f04f 0901 	mov.w	r9, #1
 80032f4:	464b      	mov	r3, r9
 80032f6:	f8cd 9020 	str.w	r9, [sp, #32]
 80032fa:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80032fe:	2200      	movs	r2, #0
 8003300:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003302:	6042      	str	r2, [r0, #4]
 8003304:	2204      	movs	r2, #4
 8003306:	f102 0614 	add.w	r6, r2, #20
 800330a:	429e      	cmp	r6, r3
 800330c:	6841      	ldr	r1, [r0, #4]
 800330e:	d94e      	bls.n	80033ae <_dtoa_r+0x316>
 8003310:	4628      	mov	r0, r5
 8003312:	f000 fdd1 	bl	8003eb8 <_Balloc>
 8003316:	9003      	str	r0, [sp, #12]
 8003318:	2800      	cmp	r0, #0
 800331a:	d14c      	bne.n	80033b6 <_dtoa_r+0x31e>
 800331c:	4602      	mov	r2, r0
 800331e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003322:	4b17      	ldr	r3, [pc, #92]	; (8003380 <_dtoa_r+0x2e8>)
 8003324:	e6cc      	b.n	80030c0 <_dtoa_r+0x28>
 8003326:	2301      	movs	r3, #1
 8003328:	e7de      	b.n	80032e8 <_dtoa_r+0x250>
 800332a:	2300      	movs	r3, #0
 800332c:	930b      	str	r3, [sp, #44]	; 0x2c
 800332e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003330:	eb0a 0903 	add.w	r9, sl, r3
 8003334:	f109 0301 	add.w	r3, r9, #1
 8003338:	2b01      	cmp	r3, #1
 800333a:	9308      	str	r3, [sp, #32]
 800333c:	bfb8      	it	lt
 800333e:	2301      	movlt	r3, #1
 8003340:	e7dd      	b.n	80032fe <_dtoa_r+0x266>
 8003342:	2301      	movs	r3, #1
 8003344:	e7f2      	b.n	800332c <_dtoa_r+0x294>
 8003346:	bf00      	nop
 8003348:	636f4361 	.word	0x636f4361
 800334c:	3fd287a7 	.word	0x3fd287a7
 8003350:	8b60c8b3 	.word	0x8b60c8b3
 8003354:	3fc68a28 	.word	0x3fc68a28
 8003358:	509f79fb 	.word	0x509f79fb
 800335c:	3fd34413 	.word	0x3fd34413
 8003360:	08005175 	.word	0x08005175
 8003364:	0800518c 	.word	0x0800518c
 8003368:	7ff00000 	.word	0x7ff00000
 800336c:	08005171 	.word	0x08005171
 8003370:	08005168 	.word	0x08005168
 8003374:	08005145 	.word	0x08005145
 8003378:	3ff80000 	.word	0x3ff80000
 800337c:	080052e0 	.word	0x080052e0
 8003380:	080051e7 	.word	0x080051e7
 8003384:	2401      	movs	r4, #1
 8003386:	2300      	movs	r3, #0
 8003388:	940b      	str	r4, [sp, #44]	; 0x2c
 800338a:	9322      	str	r3, [sp, #136]	; 0x88
 800338c:	f04f 39ff 	mov.w	r9, #4294967295
 8003390:	2200      	movs	r2, #0
 8003392:	2312      	movs	r3, #18
 8003394:	f8cd 9020 	str.w	r9, [sp, #32]
 8003398:	9223      	str	r2, [sp, #140]	; 0x8c
 800339a:	e7b0      	b.n	80032fe <_dtoa_r+0x266>
 800339c:	2301      	movs	r3, #1
 800339e:	930b      	str	r3, [sp, #44]	; 0x2c
 80033a0:	e7f4      	b.n	800338c <_dtoa_r+0x2f4>
 80033a2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80033a6:	464b      	mov	r3, r9
 80033a8:	f8cd 9020 	str.w	r9, [sp, #32]
 80033ac:	e7a7      	b.n	80032fe <_dtoa_r+0x266>
 80033ae:	3101      	adds	r1, #1
 80033b0:	6041      	str	r1, [r0, #4]
 80033b2:	0052      	lsls	r2, r2, #1
 80033b4:	e7a7      	b.n	8003306 <_dtoa_r+0x26e>
 80033b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80033b8:	9a03      	ldr	r2, [sp, #12]
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	9b08      	ldr	r3, [sp, #32]
 80033be:	2b0e      	cmp	r3, #14
 80033c0:	f200 80a8 	bhi.w	8003514 <_dtoa_r+0x47c>
 80033c4:	2c00      	cmp	r4, #0
 80033c6:	f000 80a5 	beq.w	8003514 <_dtoa_r+0x47c>
 80033ca:	f1ba 0f00 	cmp.w	sl, #0
 80033ce:	dd34      	ble.n	800343a <_dtoa_r+0x3a2>
 80033d0:	4a9a      	ldr	r2, [pc, #616]	; (800363c <_dtoa_r+0x5a4>)
 80033d2:	f00a 030f 	and.w	r3, sl, #15
 80033d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80033da:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80033de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80033e2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80033e6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80033ea:	d016      	beq.n	800341a <_dtoa_r+0x382>
 80033ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80033f0:	4b93      	ldr	r3, [pc, #588]	; (8003640 <_dtoa_r+0x5a8>)
 80033f2:	2703      	movs	r7, #3
 80033f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80033f8:	f7fd f998 	bl	800072c <__aeabi_ddiv>
 80033fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003400:	f004 040f 	and.w	r4, r4, #15
 8003404:	4e8e      	ldr	r6, [pc, #568]	; (8003640 <_dtoa_r+0x5a8>)
 8003406:	b954      	cbnz	r4, 800341e <_dtoa_r+0x386>
 8003408:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800340c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003410:	f7fd f98c 	bl	800072c <__aeabi_ddiv>
 8003414:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003418:	e029      	b.n	800346e <_dtoa_r+0x3d6>
 800341a:	2702      	movs	r7, #2
 800341c:	e7f2      	b.n	8003404 <_dtoa_r+0x36c>
 800341e:	07e1      	lsls	r1, r4, #31
 8003420:	d508      	bpl.n	8003434 <_dtoa_r+0x39c>
 8003422:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003426:	e9d6 2300 	ldrd	r2, r3, [r6]
 800342a:	f7fd f855 	bl	80004d8 <__aeabi_dmul>
 800342e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003432:	3701      	adds	r7, #1
 8003434:	1064      	asrs	r4, r4, #1
 8003436:	3608      	adds	r6, #8
 8003438:	e7e5      	b.n	8003406 <_dtoa_r+0x36e>
 800343a:	f000 80a5 	beq.w	8003588 <_dtoa_r+0x4f0>
 800343e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003442:	f1ca 0400 	rsb	r4, sl, #0
 8003446:	4b7d      	ldr	r3, [pc, #500]	; (800363c <_dtoa_r+0x5a4>)
 8003448:	f004 020f 	and.w	r2, r4, #15
 800344c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003454:	f7fd f840 	bl	80004d8 <__aeabi_dmul>
 8003458:	2702      	movs	r7, #2
 800345a:	2300      	movs	r3, #0
 800345c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003460:	4e77      	ldr	r6, [pc, #476]	; (8003640 <_dtoa_r+0x5a8>)
 8003462:	1124      	asrs	r4, r4, #4
 8003464:	2c00      	cmp	r4, #0
 8003466:	f040 8084 	bne.w	8003572 <_dtoa_r+0x4da>
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1d2      	bne.n	8003414 <_dtoa_r+0x37c>
 800346e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 808b 	beq.w	800358c <_dtoa_r+0x4f4>
 8003476:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800347a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800347e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003482:	2200      	movs	r2, #0
 8003484:	4b6f      	ldr	r3, [pc, #444]	; (8003644 <_dtoa_r+0x5ac>)
 8003486:	f7fd fa99 	bl	80009bc <__aeabi_dcmplt>
 800348a:	2800      	cmp	r0, #0
 800348c:	d07e      	beq.n	800358c <_dtoa_r+0x4f4>
 800348e:	9b08      	ldr	r3, [sp, #32]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d07b      	beq.n	800358c <_dtoa_r+0x4f4>
 8003494:	f1b9 0f00 	cmp.w	r9, #0
 8003498:	dd38      	ble.n	800350c <_dtoa_r+0x474>
 800349a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800349e:	2200      	movs	r2, #0
 80034a0:	4b69      	ldr	r3, [pc, #420]	; (8003648 <_dtoa_r+0x5b0>)
 80034a2:	f7fd f819 	bl	80004d8 <__aeabi_dmul>
 80034a6:	464c      	mov	r4, r9
 80034a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80034ac:	f10a 38ff 	add.w	r8, sl, #4294967295
 80034b0:	3701      	adds	r7, #1
 80034b2:	4638      	mov	r0, r7
 80034b4:	f7fc ffa6 	bl	8000404 <__aeabi_i2d>
 80034b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80034bc:	f7fd f80c 	bl	80004d8 <__aeabi_dmul>
 80034c0:	2200      	movs	r2, #0
 80034c2:	4b62      	ldr	r3, [pc, #392]	; (800364c <_dtoa_r+0x5b4>)
 80034c4:	f7fc fe52 	bl	800016c <__adddf3>
 80034c8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80034cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80034d0:	9611      	str	r6, [sp, #68]	; 0x44
 80034d2:	2c00      	cmp	r4, #0
 80034d4:	d15d      	bne.n	8003592 <_dtoa_r+0x4fa>
 80034d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80034da:	2200      	movs	r2, #0
 80034dc:	4b5c      	ldr	r3, [pc, #368]	; (8003650 <_dtoa_r+0x5b8>)
 80034de:	f7fc fe43 	bl	8000168 <__aeabi_dsub>
 80034e2:	4602      	mov	r2, r0
 80034e4:	460b      	mov	r3, r1
 80034e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80034ea:	4633      	mov	r3, r6
 80034ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80034ee:	f7fd fa83 	bl	80009f8 <__aeabi_dcmpgt>
 80034f2:	2800      	cmp	r0, #0
 80034f4:	f040 829c 	bne.w	8003a30 <_dtoa_r+0x998>
 80034f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80034fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80034fe:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003502:	f7fd fa5b 	bl	80009bc <__aeabi_dcmplt>
 8003506:	2800      	cmp	r0, #0
 8003508:	f040 8290 	bne.w	8003a2c <_dtoa_r+0x994>
 800350c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003510:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003514:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003516:	2b00      	cmp	r3, #0
 8003518:	f2c0 8152 	blt.w	80037c0 <_dtoa_r+0x728>
 800351c:	f1ba 0f0e 	cmp.w	sl, #14
 8003520:	f300 814e 	bgt.w	80037c0 <_dtoa_r+0x728>
 8003524:	4b45      	ldr	r3, [pc, #276]	; (800363c <_dtoa_r+0x5a4>)
 8003526:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800352a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800352e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003532:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003534:	2b00      	cmp	r3, #0
 8003536:	f280 80db 	bge.w	80036f0 <_dtoa_r+0x658>
 800353a:	9b08      	ldr	r3, [sp, #32]
 800353c:	2b00      	cmp	r3, #0
 800353e:	f300 80d7 	bgt.w	80036f0 <_dtoa_r+0x658>
 8003542:	f040 8272 	bne.w	8003a2a <_dtoa_r+0x992>
 8003546:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800354a:	2200      	movs	r2, #0
 800354c:	4b40      	ldr	r3, [pc, #256]	; (8003650 <_dtoa_r+0x5b8>)
 800354e:	f7fc ffc3 	bl	80004d8 <__aeabi_dmul>
 8003552:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003556:	f7fd fa45 	bl	80009e4 <__aeabi_dcmpge>
 800355a:	9c08      	ldr	r4, [sp, #32]
 800355c:	4626      	mov	r6, r4
 800355e:	2800      	cmp	r0, #0
 8003560:	f040 8248 	bne.w	80039f4 <_dtoa_r+0x95c>
 8003564:	2331      	movs	r3, #49	; 0x31
 8003566:	9f03      	ldr	r7, [sp, #12]
 8003568:	f10a 0a01 	add.w	sl, sl, #1
 800356c:	f807 3b01 	strb.w	r3, [r7], #1
 8003570:	e244      	b.n	80039fc <_dtoa_r+0x964>
 8003572:	07e2      	lsls	r2, r4, #31
 8003574:	d505      	bpl.n	8003582 <_dtoa_r+0x4ea>
 8003576:	e9d6 2300 	ldrd	r2, r3, [r6]
 800357a:	f7fc ffad 	bl	80004d8 <__aeabi_dmul>
 800357e:	2301      	movs	r3, #1
 8003580:	3701      	adds	r7, #1
 8003582:	1064      	asrs	r4, r4, #1
 8003584:	3608      	adds	r6, #8
 8003586:	e76d      	b.n	8003464 <_dtoa_r+0x3cc>
 8003588:	2702      	movs	r7, #2
 800358a:	e770      	b.n	800346e <_dtoa_r+0x3d6>
 800358c:	46d0      	mov	r8, sl
 800358e:	9c08      	ldr	r4, [sp, #32]
 8003590:	e78f      	b.n	80034b2 <_dtoa_r+0x41a>
 8003592:	9903      	ldr	r1, [sp, #12]
 8003594:	4b29      	ldr	r3, [pc, #164]	; (800363c <_dtoa_r+0x5a4>)
 8003596:	4421      	add	r1, r4
 8003598:	9112      	str	r1, [sp, #72]	; 0x48
 800359a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800359c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80035a0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80035a4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80035a8:	2900      	cmp	r1, #0
 80035aa:	d055      	beq.n	8003658 <_dtoa_r+0x5c0>
 80035ac:	2000      	movs	r0, #0
 80035ae:	4929      	ldr	r1, [pc, #164]	; (8003654 <_dtoa_r+0x5bc>)
 80035b0:	f7fd f8bc 	bl	800072c <__aeabi_ddiv>
 80035b4:	463b      	mov	r3, r7
 80035b6:	4632      	mov	r2, r6
 80035b8:	f7fc fdd6 	bl	8000168 <__aeabi_dsub>
 80035bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80035c0:	9f03      	ldr	r7, [sp, #12]
 80035c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80035c6:	f7fd fa37 	bl	8000a38 <__aeabi_d2iz>
 80035ca:	4604      	mov	r4, r0
 80035cc:	f7fc ff1a 	bl	8000404 <__aeabi_i2d>
 80035d0:	4602      	mov	r2, r0
 80035d2:	460b      	mov	r3, r1
 80035d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80035d8:	f7fc fdc6 	bl	8000168 <__aeabi_dsub>
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	3430      	adds	r4, #48	; 0x30
 80035e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80035e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80035ea:	f807 4b01 	strb.w	r4, [r7], #1
 80035ee:	f7fd f9e5 	bl	80009bc <__aeabi_dcmplt>
 80035f2:	2800      	cmp	r0, #0
 80035f4:	d174      	bne.n	80036e0 <_dtoa_r+0x648>
 80035f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80035fa:	2000      	movs	r0, #0
 80035fc:	4911      	ldr	r1, [pc, #68]	; (8003644 <_dtoa_r+0x5ac>)
 80035fe:	f7fc fdb3 	bl	8000168 <__aeabi_dsub>
 8003602:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003606:	f7fd f9d9 	bl	80009bc <__aeabi_dcmplt>
 800360a:	2800      	cmp	r0, #0
 800360c:	f040 80b7 	bne.w	800377e <_dtoa_r+0x6e6>
 8003610:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003612:	429f      	cmp	r7, r3
 8003614:	f43f af7a 	beq.w	800350c <_dtoa_r+0x474>
 8003618:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800361c:	2200      	movs	r2, #0
 800361e:	4b0a      	ldr	r3, [pc, #40]	; (8003648 <_dtoa_r+0x5b0>)
 8003620:	f7fc ff5a 	bl	80004d8 <__aeabi_dmul>
 8003624:	2200      	movs	r2, #0
 8003626:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800362a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800362e:	4b06      	ldr	r3, [pc, #24]	; (8003648 <_dtoa_r+0x5b0>)
 8003630:	f7fc ff52 	bl	80004d8 <__aeabi_dmul>
 8003634:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003638:	e7c3      	b.n	80035c2 <_dtoa_r+0x52a>
 800363a:	bf00      	nop
 800363c:	080052e0 	.word	0x080052e0
 8003640:	080052b8 	.word	0x080052b8
 8003644:	3ff00000 	.word	0x3ff00000
 8003648:	40240000 	.word	0x40240000
 800364c:	401c0000 	.word	0x401c0000
 8003650:	40140000 	.word	0x40140000
 8003654:	3fe00000 	.word	0x3fe00000
 8003658:	4630      	mov	r0, r6
 800365a:	4639      	mov	r1, r7
 800365c:	f7fc ff3c 	bl	80004d8 <__aeabi_dmul>
 8003660:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003662:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003666:	9c03      	ldr	r4, [sp, #12]
 8003668:	9314      	str	r3, [sp, #80]	; 0x50
 800366a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800366e:	f7fd f9e3 	bl	8000a38 <__aeabi_d2iz>
 8003672:	9015      	str	r0, [sp, #84]	; 0x54
 8003674:	f7fc fec6 	bl	8000404 <__aeabi_i2d>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003680:	f7fc fd72 	bl	8000168 <__aeabi_dsub>
 8003684:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003686:	4606      	mov	r6, r0
 8003688:	3330      	adds	r3, #48	; 0x30
 800368a:	f804 3b01 	strb.w	r3, [r4], #1
 800368e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003690:	460f      	mov	r7, r1
 8003692:	429c      	cmp	r4, r3
 8003694:	f04f 0200 	mov.w	r2, #0
 8003698:	d124      	bne.n	80036e4 <_dtoa_r+0x64c>
 800369a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800369e:	4bb0      	ldr	r3, [pc, #704]	; (8003960 <_dtoa_r+0x8c8>)
 80036a0:	f7fc fd64 	bl	800016c <__adddf3>
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	4630      	mov	r0, r6
 80036aa:	4639      	mov	r1, r7
 80036ac:	f7fd f9a4 	bl	80009f8 <__aeabi_dcmpgt>
 80036b0:	2800      	cmp	r0, #0
 80036b2:	d163      	bne.n	800377c <_dtoa_r+0x6e4>
 80036b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80036b8:	2000      	movs	r0, #0
 80036ba:	49a9      	ldr	r1, [pc, #676]	; (8003960 <_dtoa_r+0x8c8>)
 80036bc:	f7fc fd54 	bl	8000168 <__aeabi_dsub>
 80036c0:	4602      	mov	r2, r0
 80036c2:	460b      	mov	r3, r1
 80036c4:	4630      	mov	r0, r6
 80036c6:	4639      	mov	r1, r7
 80036c8:	f7fd f978 	bl	80009bc <__aeabi_dcmplt>
 80036cc:	2800      	cmp	r0, #0
 80036ce:	f43f af1d 	beq.w	800350c <_dtoa_r+0x474>
 80036d2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80036d4:	1e7b      	subs	r3, r7, #1
 80036d6:	9314      	str	r3, [sp, #80]	; 0x50
 80036d8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80036dc:	2b30      	cmp	r3, #48	; 0x30
 80036de:	d0f8      	beq.n	80036d2 <_dtoa_r+0x63a>
 80036e0:	46c2      	mov	sl, r8
 80036e2:	e03b      	b.n	800375c <_dtoa_r+0x6c4>
 80036e4:	4b9f      	ldr	r3, [pc, #636]	; (8003964 <_dtoa_r+0x8cc>)
 80036e6:	f7fc fef7 	bl	80004d8 <__aeabi_dmul>
 80036ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80036ee:	e7bc      	b.n	800366a <_dtoa_r+0x5d2>
 80036f0:	9f03      	ldr	r7, [sp, #12]
 80036f2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80036f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80036fa:	4640      	mov	r0, r8
 80036fc:	4649      	mov	r1, r9
 80036fe:	f7fd f815 	bl	800072c <__aeabi_ddiv>
 8003702:	f7fd f999 	bl	8000a38 <__aeabi_d2iz>
 8003706:	4604      	mov	r4, r0
 8003708:	f7fc fe7c 	bl	8000404 <__aeabi_i2d>
 800370c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003710:	f7fc fee2 	bl	80004d8 <__aeabi_dmul>
 8003714:	4602      	mov	r2, r0
 8003716:	460b      	mov	r3, r1
 8003718:	4640      	mov	r0, r8
 800371a:	4649      	mov	r1, r9
 800371c:	f7fc fd24 	bl	8000168 <__aeabi_dsub>
 8003720:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8003724:	f807 6b01 	strb.w	r6, [r7], #1
 8003728:	9e03      	ldr	r6, [sp, #12]
 800372a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800372e:	1bbe      	subs	r6, r7, r6
 8003730:	45b4      	cmp	ip, r6
 8003732:	4602      	mov	r2, r0
 8003734:	460b      	mov	r3, r1
 8003736:	d136      	bne.n	80037a6 <_dtoa_r+0x70e>
 8003738:	f7fc fd18 	bl	800016c <__adddf3>
 800373c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003740:	4680      	mov	r8, r0
 8003742:	4689      	mov	r9, r1
 8003744:	f7fd f958 	bl	80009f8 <__aeabi_dcmpgt>
 8003748:	bb58      	cbnz	r0, 80037a2 <_dtoa_r+0x70a>
 800374a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800374e:	4640      	mov	r0, r8
 8003750:	4649      	mov	r1, r9
 8003752:	f7fd f929 	bl	80009a8 <__aeabi_dcmpeq>
 8003756:	b108      	cbz	r0, 800375c <_dtoa_r+0x6c4>
 8003758:	07e1      	lsls	r1, r4, #31
 800375a:	d422      	bmi.n	80037a2 <_dtoa_r+0x70a>
 800375c:	4628      	mov	r0, r5
 800375e:	4659      	mov	r1, fp
 8003760:	f000 fbea 	bl	8003f38 <_Bfree>
 8003764:	2300      	movs	r3, #0
 8003766:	703b      	strb	r3, [r7, #0]
 8003768:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800376a:	f10a 0001 	add.w	r0, sl, #1
 800376e:	6018      	str	r0, [r3, #0]
 8003770:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003772:	2b00      	cmp	r3, #0
 8003774:	f43f acde 	beq.w	8003134 <_dtoa_r+0x9c>
 8003778:	601f      	str	r7, [r3, #0]
 800377a:	e4db      	b.n	8003134 <_dtoa_r+0x9c>
 800377c:	4627      	mov	r7, r4
 800377e:	463b      	mov	r3, r7
 8003780:	461f      	mov	r7, r3
 8003782:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003786:	2a39      	cmp	r2, #57	; 0x39
 8003788:	d107      	bne.n	800379a <_dtoa_r+0x702>
 800378a:	9a03      	ldr	r2, [sp, #12]
 800378c:	429a      	cmp	r2, r3
 800378e:	d1f7      	bne.n	8003780 <_dtoa_r+0x6e8>
 8003790:	2230      	movs	r2, #48	; 0x30
 8003792:	9903      	ldr	r1, [sp, #12]
 8003794:	f108 0801 	add.w	r8, r8, #1
 8003798:	700a      	strb	r2, [r1, #0]
 800379a:	781a      	ldrb	r2, [r3, #0]
 800379c:	3201      	adds	r2, #1
 800379e:	701a      	strb	r2, [r3, #0]
 80037a0:	e79e      	b.n	80036e0 <_dtoa_r+0x648>
 80037a2:	46d0      	mov	r8, sl
 80037a4:	e7eb      	b.n	800377e <_dtoa_r+0x6e6>
 80037a6:	2200      	movs	r2, #0
 80037a8:	4b6e      	ldr	r3, [pc, #440]	; (8003964 <_dtoa_r+0x8cc>)
 80037aa:	f7fc fe95 	bl	80004d8 <__aeabi_dmul>
 80037ae:	2200      	movs	r2, #0
 80037b0:	2300      	movs	r3, #0
 80037b2:	4680      	mov	r8, r0
 80037b4:	4689      	mov	r9, r1
 80037b6:	f7fd f8f7 	bl	80009a8 <__aeabi_dcmpeq>
 80037ba:	2800      	cmp	r0, #0
 80037bc:	d09b      	beq.n	80036f6 <_dtoa_r+0x65e>
 80037be:	e7cd      	b.n	800375c <_dtoa_r+0x6c4>
 80037c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80037c2:	2a00      	cmp	r2, #0
 80037c4:	f000 80d0 	beq.w	8003968 <_dtoa_r+0x8d0>
 80037c8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80037ca:	2a01      	cmp	r2, #1
 80037cc:	f300 80ae 	bgt.w	800392c <_dtoa_r+0x894>
 80037d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80037d2:	2a00      	cmp	r2, #0
 80037d4:	f000 80a6 	beq.w	8003924 <_dtoa_r+0x88c>
 80037d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80037dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80037de:	9f06      	ldr	r7, [sp, #24]
 80037e0:	9a06      	ldr	r2, [sp, #24]
 80037e2:	2101      	movs	r1, #1
 80037e4:	441a      	add	r2, r3
 80037e6:	9206      	str	r2, [sp, #24]
 80037e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037ea:	4628      	mov	r0, r5
 80037ec:	441a      	add	r2, r3
 80037ee:	9209      	str	r2, [sp, #36]	; 0x24
 80037f0:	f000 fc58 	bl	80040a4 <__i2b>
 80037f4:	4606      	mov	r6, r0
 80037f6:	2f00      	cmp	r7, #0
 80037f8:	dd0c      	ble.n	8003814 <_dtoa_r+0x77c>
 80037fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	dd09      	ble.n	8003814 <_dtoa_r+0x77c>
 8003800:	42bb      	cmp	r3, r7
 8003802:	bfa8      	it	ge
 8003804:	463b      	movge	r3, r7
 8003806:	9a06      	ldr	r2, [sp, #24]
 8003808:	1aff      	subs	r7, r7, r3
 800380a:	1ad2      	subs	r2, r2, r3
 800380c:	9206      	str	r2, [sp, #24]
 800380e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	9309      	str	r3, [sp, #36]	; 0x24
 8003814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003816:	b1f3      	cbz	r3, 8003856 <_dtoa_r+0x7be>
 8003818:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 80a8 	beq.w	8003970 <_dtoa_r+0x8d8>
 8003820:	2c00      	cmp	r4, #0
 8003822:	dd10      	ble.n	8003846 <_dtoa_r+0x7ae>
 8003824:	4631      	mov	r1, r6
 8003826:	4622      	mov	r2, r4
 8003828:	4628      	mov	r0, r5
 800382a:	f000 fcf9 	bl	8004220 <__pow5mult>
 800382e:	465a      	mov	r2, fp
 8003830:	4601      	mov	r1, r0
 8003832:	4606      	mov	r6, r0
 8003834:	4628      	mov	r0, r5
 8003836:	f000 fc4b 	bl	80040d0 <__multiply>
 800383a:	4680      	mov	r8, r0
 800383c:	4659      	mov	r1, fp
 800383e:	4628      	mov	r0, r5
 8003840:	f000 fb7a 	bl	8003f38 <_Bfree>
 8003844:	46c3      	mov	fp, r8
 8003846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003848:	1b1a      	subs	r2, r3, r4
 800384a:	d004      	beq.n	8003856 <_dtoa_r+0x7be>
 800384c:	4659      	mov	r1, fp
 800384e:	4628      	mov	r0, r5
 8003850:	f000 fce6 	bl	8004220 <__pow5mult>
 8003854:	4683      	mov	fp, r0
 8003856:	2101      	movs	r1, #1
 8003858:	4628      	mov	r0, r5
 800385a:	f000 fc23 	bl	80040a4 <__i2b>
 800385e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003860:	4604      	mov	r4, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	f340 8086 	ble.w	8003974 <_dtoa_r+0x8dc>
 8003868:	461a      	mov	r2, r3
 800386a:	4601      	mov	r1, r0
 800386c:	4628      	mov	r0, r5
 800386e:	f000 fcd7 	bl	8004220 <__pow5mult>
 8003872:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003874:	4604      	mov	r4, r0
 8003876:	2b01      	cmp	r3, #1
 8003878:	dd7f      	ble.n	800397a <_dtoa_r+0x8e2>
 800387a:	f04f 0800 	mov.w	r8, #0
 800387e:	6923      	ldr	r3, [r4, #16]
 8003880:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003884:	6918      	ldr	r0, [r3, #16]
 8003886:	f000 fbbf 	bl	8004008 <__hi0bits>
 800388a:	f1c0 0020 	rsb	r0, r0, #32
 800388e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003890:	4418      	add	r0, r3
 8003892:	f010 001f 	ands.w	r0, r0, #31
 8003896:	f000 8092 	beq.w	80039be <_dtoa_r+0x926>
 800389a:	f1c0 0320 	rsb	r3, r0, #32
 800389e:	2b04      	cmp	r3, #4
 80038a0:	f340 808a 	ble.w	80039b8 <_dtoa_r+0x920>
 80038a4:	f1c0 001c 	rsb	r0, r0, #28
 80038a8:	9b06      	ldr	r3, [sp, #24]
 80038aa:	4407      	add	r7, r0
 80038ac:	4403      	add	r3, r0
 80038ae:	9306      	str	r3, [sp, #24]
 80038b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038b2:	4403      	add	r3, r0
 80038b4:	9309      	str	r3, [sp, #36]	; 0x24
 80038b6:	9b06      	ldr	r3, [sp, #24]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	dd05      	ble.n	80038c8 <_dtoa_r+0x830>
 80038bc:	4659      	mov	r1, fp
 80038be:	461a      	mov	r2, r3
 80038c0:	4628      	mov	r0, r5
 80038c2:	f000 fd07 	bl	80042d4 <__lshift>
 80038c6:	4683      	mov	fp, r0
 80038c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	dd05      	ble.n	80038da <_dtoa_r+0x842>
 80038ce:	4621      	mov	r1, r4
 80038d0:	461a      	mov	r2, r3
 80038d2:	4628      	mov	r0, r5
 80038d4:	f000 fcfe 	bl	80042d4 <__lshift>
 80038d8:	4604      	mov	r4, r0
 80038da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d070      	beq.n	80039c2 <_dtoa_r+0x92a>
 80038e0:	4621      	mov	r1, r4
 80038e2:	4658      	mov	r0, fp
 80038e4:	f000 fd66 	bl	80043b4 <__mcmp>
 80038e8:	2800      	cmp	r0, #0
 80038ea:	da6a      	bge.n	80039c2 <_dtoa_r+0x92a>
 80038ec:	2300      	movs	r3, #0
 80038ee:	4659      	mov	r1, fp
 80038f0:	220a      	movs	r2, #10
 80038f2:	4628      	mov	r0, r5
 80038f4:	f000 fb42 	bl	8003f7c <__multadd>
 80038f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80038fa:	4683      	mov	fp, r0
 80038fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 8194 	beq.w	8003c2e <_dtoa_r+0xb96>
 8003906:	4631      	mov	r1, r6
 8003908:	2300      	movs	r3, #0
 800390a:	220a      	movs	r2, #10
 800390c:	4628      	mov	r0, r5
 800390e:	f000 fb35 	bl	8003f7c <__multadd>
 8003912:	f1b9 0f00 	cmp.w	r9, #0
 8003916:	4606      	mov	r6, r0
 8003918:	f300 8093 	bgt.w	8003a42 <_dtoa_r+0x9aa>
 800391c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800391e:	2b02      	cmp	r3, #2
 8003920:	dc57      	bgt.n	80039d2 <_dtoa_r+0x93a>
 8003922:	e08e      	b.n	8003a42 <_dtoa_r+0x9aa>
 8003924:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003926:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800392a:	e757      	b.n	80037dc <_dtoa_r+0x744>
 800392c:	9b08      	ldr	r3, [sp, #32]
 800392e:	1e5c      	subs	r4, r3, #1
 8003930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003932:	42a3      	cmp	r3, r4
 8003934:	bfb7      	itett	lt
 8003936:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8003938:	1b1c      	subge	r4, r3, r4
 800393a:	1ae2      	sublt	r2, r4, r3
 800393c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800393e:	bfbe      	ittt	lt
 8003940:	940a      	strlt	r4, [sp, #40]	; 0x28
 8003942:	189b      	addlt	r3, r3, r2
 8003944:	930e      	strlt	r3, [sp, #56]	; 0x38
 8003946:	9b08      	ldr	r3, [sp, #32]
 8003948:	bfb8      	it	lt
 800394a:	2400      	movlt	r4, #0
 800394c:	2b00      	cmp	r3, #0
 800394e:	bfbb      	ittet	lt
 8003950:	9b06      	ldrlt	r3, [sp, #24]
 8003952:	9a08      	ldrlt	r2, [sp, #32]
 8003954:	9f06      	ldrge	r7, [sp, #24]
 8003956:	1a9f      	sublt	r7, r3, r2
 8003958:	bfac      	ite	ge
 800395a:	9b08      	ldrge	r3, [sp, #32]
 800395c:	2300      	movlt	r3, #0
 800395e:	e73f      	b.n	80037e0 <_dtoa_r+0x748>
 8003960:	3fe00000 	.word	0x3fe00000
 8003964:	40240000 	.word	0x40240000
 8003968:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800396a:	9f06      	ldr	r7, [sp, #24]
 800396c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800396e:	e742      	b.n	80037f6 <_dtoa_r+0x75e>
 8003970:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003972:	e76b      	b.n	800384c <_dtoa_r+0x7b4>
 8003974:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003976:	2b01      	cmp	r3, #1
 8003978:	dc19      	bgt.n	80039ae <_dtoa_r+0x916>
 800397a:	9b04      	ldr	r3, [sp, #16]
 800397c:	b9bb      	cbnz	r3, 80039ae <_dtoa_r+0x916>
 800397e:	9b05      	ldr	r3, [sp, #20]
 8003980:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003984:	b99b      	cbnz	r3, 80039ae <_dtoa_r+0x916>
 8003986:	9b05      	ldr	r3, [sp, #20]
 8003988:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800398c:	0d1b      	lsrs	r3, r3, #20
 800398e:	051b      	lsls	r3, r3, #20
 8003990:	b183      	cbz	r3, 80039b4 <_dtoa_r+0x91c>
 8003992:	f04f 0801 	mov.w	r8, #1
 8003996:	9b06      	ldr	r3, [sp, #24]
 8003998:	3301      	adds	r3, #1
 800399a:	9306      	str	r3, [sp, #24]
 800399c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800399e:	3301      	adds	r3, #1
 80039a0:	9309      	str	r3, [sp, #36]	; 0x24
 80039a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f47f af6a 	bne.w	800387e <_dtoa_r+0x7e6>
 80039aa:	2001      	movs	r0, #1
 80039ac:	e76f      	b.n	800388e <_dtoa_r+0x7f6>
 80039ae:	f04f 0800 	mov.w	r8, #0
 80039b2:	e7f6      	b.n	80039a2 <_dtoa_r+0x90a>
 80039b4:	4698      	mov	r8, r3
 80039b6:	e7f4      	b.n	80039a2 <_dtoa_r+0x90a>
 80039b8:	f43f af7d 	beq.w	80038b6 <_dtoa_r+0x81e>
 80039bc:	4618      	mov	r0, r3
 80039be:	301c      	adds	r0, #28
 80039c0:	e772      	b.n	80038a8 <_dtoa_r+0x810>
 80039c2:	9b08      	ldr	r3, [sp, #32]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	dc36      	bgt.n	8003a36 <_dtoa_r+0x99e>
 80039c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	dd33      	ble.n	8003a36 <_dtoa_r+0x99e>
 80039ce:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80039d2:	f1b9 0f00 	cmp.w	r9, #0
 80039d6:	d10d      	bne.n	80039f4 <_dtoa_r+0x95c>
 80039d8:	4621      	mov	r1, r4
 80039da:	464b      	mov	r3, r9
 80039dc:	2205      	movs	r2, #5
 80039de:	4628      	mov	r0, r5
 80039e0:	f000 facc 	bl	8003f7c <__multadd>
 80039e4:	4601      	mov	r1, r0
 80039e6:	4604      	mov	r4, r0
 80039e8:	4658      	mov	r0, fp
 80039ea:	f000 fce3 	bl	80043b4 <__mcmp>
 80039ee:	2800      	cmp	r0, #0
 80039f0:	f73f adb8 	bgt.w	8003564 <_dtoa_r+0x4cc>
 80039f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80039f6:	9f03      	ldr	r7, [sp, #12]
 80039f8:	ea6f 0a03 	mvn.w	sl, r3
 80039fc:	f04f 0800 	mov.w	r8, #0
 8003a00:	4621      	mov	r1, r4
 8003a02:	4628      	mov	r0, r5
 8003a04:	f000 fa98 	bl	8003f38 <_Bfree>
 8003a08:	2e00      	cmp	r6, #0
 8003a0a:	f43f aea7 	beq.w	800375c <_dtoa_r+0x6c4>
 8003a0e:	f1b8 0f00 	cmp.w	r8, #0
 8003a12:	d005      	beq.n	8003a20 <_dtoa_r+0x988>
 8003a14:	45b0      	cmp	r8, r6
 8003a16:	d003      	beq.n	8003a20 <_dtoa_r+0x988>
 8003a18:	4641      	mov	r1, r8
 8003a1a:	4628      	mov	r0, r5
 8003a1c:	f000 fa8c 	bl	8003f38 <_Bfree>
 8003a20:	4631      	mov	r1, r6
 8003a22:	4628      	mov	r0, r5
 8003a24:	f000 fa88 	bl	8003f38 <_Bfree>
 8003a28:	e698      	b.n	800375c <_dtoa_r+0x6c4>
 8003a2a:	2400      	movs	r4, #0
 8003a2c:	4626      	mov	r6, r4
 8003a2e:	e7e1      	b.n	80039f4 <_dtoa_r+0x95c>
 8003a30:	46c2      	mov	sl, r8
 8003a32:	4626      	mov	r6, r4
 8003a34:	e596      	b.n	8003564 <_dtoa_r+0x4cc>
 8003a36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 80fd 	beq.w	8003c3c <_dtoa_r+0xba4>
 8003a42:	2f00      	cmp	r7, #0
 8003a44:	dd05      	ble.n	8003a52 <_dtoa_r+0x9ba>
 8003a46:	4631      	mov	r1, r6
 8003a48:	463a      	mov	r2, r7
 8003a4a:	4628      	mov	r0, r5
 8003a4c:	f000 fc42 	bl	80042d4 <__lshift>
 8003a50:	4606      	mov	r6, r0
 8003a52:	f1b8 0f00 	cmp.w	r8, #0
 8003a56:	d05c      	beq.n	8003b12 <_dtoa_r+0xa7a>
 8003a58:	4628      	mov	r0, r5
 8003a5a:	6871      	ldr	r1, [r6, #4]
 8003a5c:	f000 fa2c 	bl	8003eb8 <_Balloc>
 8003a60:	4607      	mov	r7, r0
 8003a62:	b928      	cbnz	r0, 8003a70 <_dtoa_r+0x9d8>
 8003a64:	4602      	mov	r2, r0
 8003a66:	f240 21ea 	movw	r1, #746	; 0x2ea
 8003a6a:	4b7f      	ldr	r3, [pc, #508]	; (8003c68 <_dtoa_r+0xbd0>)
 8003a6c:	f7ff bb28 	b.w	80030c0 <_dtoa_r+0x28>
 8003a70:	6932      	ldr	r2, [r6, #16]
 8003a72:	f106 010c 	add.w	r1, r6, #12
 8003a76:	3202      	adds	r2, #2
 8003a78:	0092      	lsls	r2, r2, #2
 8003a7a:	300c      	adds	r0, #12
 8003a7c:	f000 fa0e 	bl	8003e9c <memcpy>
 8003a80:	2201      	movs	r2, #1
 8003a82:	4639      	mov	r1, r7
 8003a84:	4628      	mov	r0, r5
 8003a86:	f000 fc25 	bl	80042d4 <__lshift>
 8003a8a:	46b0      	mov	r8, r6
 8003a8c:	4606      	mov	r6, r0
 8003a8e:	9b03      	ldr	r3, [sp, #12]
 8003a90:	3301      	adds	r3, #1
 8003a92:	9308      	str	r3, [sp, #32]
 8003a94:	9b03      	ldr	r3, [sp, #12]
 8003a96:	444b      	add	r3, r9
 8003a98:	930a      	str	r3, [sp, #40]	; 0x28
 8003a9a:	9b04      	ldr	r3, [sp, #16]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	9309      	str	r3, [sp, #36]	; 0x24
 8003aa2:	9b08      	ldr	r3, [sp, #32]
 8003aa4:	4621      	mov	r1, r4
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	4658      	mov	r0, fp
 8003aaa:	9304      	str	r3, [sp, #16]
 8003aac:	f7ff fa66 	bl	8002f7c <quorem>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	4641      	mov	r1, r8
 8003ab4:	3330      	adds	r3, #48	; 0x30
 8003ab6:	9006      	str	r0, [sp, #24]
 8003ab8:	4658      	mov	r0, fp
 8003aba:	930b      	str	r3, [sp, #44]	; 0x2c
 8003abc:	f000 fc7a 	bl	80043b4 <__mcmp>
 8003ac0:	4632      	mov	r2, r6
 8003ac2:	4681      	mov	r9, r0
 8003ac4:	4621      	mov	r1, r4
 8003ac6:	4628      	mov	r0, r5
 8003ac8:	f000 fc90 	bl	80043ec <__mdiff>
 8003acc:	68c2      	ldr	r2, [r0, #12]
 8003ace:	4607      	mov	r7, r0
 8003ad0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ad2:	bb02      	cbnz	r2, 8003b16 <_dtoa_r+0xa7e>
 8003ad4:	4601      	mov	r1, r0
 8003ad6:	4658      	mov	r0, fp
 8003ad8:	f000 fc6c 	bl	80043b4 <__mcmp>
 8003adc:	4602      	mov	r2, r0
 8003ade:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ae0:	4639      	mov	r1, r7
 8003ae2:	4628      	mov	r0, r5
 8003ae4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8003ae8:	f000 fa26 	bl	8003f38 <_Bfree>
 8003aec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003aee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003af0:	9f08      	ldr	r7, [sp, #32]
 8003af2:	ea43 0102 	orr.w	r1, r3, r2
 8003af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003af8:	430b      	orrs	r3, r1
 8003afa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003afc:	d10d      	bne.n	8003b1a <_dtoa_r+0xa82>
 8003afe:	2b39      	cmp	r3, #57	; 0x39
 8003b00:	d029      	beq.n	8003b56 <_dtoa_r+0xabe>
 8003b02:	f1b9 0f00 	cmp.w	r9, #0
 8003b06:	dd01      	ble.n	8003b0c <_dtoa_r+0xa74>
 8003b08:	9b06      	ldr	r3, [sp, #24]
 8003b0a:	3331      	adds	r3, #49	; 0x31
 8003b0c:	9a04      	ldr	r2, [sp, #16]
 8003b0e:	7013      	strb	r3, [r2, #0]
 8003b10:	e776      	b.n	8003a00 <_dtoa_r+0x968>
 8003b12:	4630      	mov	r0, r6
 8003b14:	e7b9      	b.n	8003a8a <_dtoa_r+0x9f2>
 8003b16:	2201      	movs	r2, #1
 8003b18:	e7e2      	b.n	8003ae0 <_dtoa_r+0xa48>
 8003b1a:	f1b9 0f00 	cmp.w	r9, #0
 8003b1e:	db06      	blt.n	8003b2e <_dtoa_r+0xa96>
 8003b20:	9922      	ldr	r1, [sp, #136]	; 0x88
 8003b22:	ea41 0909 	orr.w	r9, r1, r9
 8003b26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003b28:	ea59 0101 	orrs.w	r1, r9, r1
 8003b2c:	d120      	bne.n	8003b70 <_dtoa_r+0xad8>
 8003b2e:	2a00      	cmp	r2, #0
 8003b30:	ddec      	ble.n	8003b0c <_dtoa_r+0xa74>
 8003b32:	4659      	mov	r1, fp
 8003b34:	2201      	movs	r2, #1
 8003b36:	4628      	mov	r0, r5
 8003b38:	9308      	str	r3, [sp, #32]
 8003b3a:	f000 fbcb 	bl	80042d4 <__lshift>
 8003b3e:	4621      	mov	r1, r4
 8003b40:	4683      	mov	fp, r0
 8003b42:	f000 fc37 	bl	80043b4 <__mcmp>
 8003b46:	2800      	cmp	r0, #0
 8003b48:	9b08      	ldr	r3, [sp, #32]
 8003b4a:	dc02      	bgt.n	8003b52 <_dtoa_r+0xaba>
 8003b4c:	d1de      	bne.n	8003b0c <_dtoa_r+0xa74>
 8003b4e:	07da      	lsls	r2, r3, #31
 8003b50:	d5dc      	bpl.n	8003b0c <_dtoa_r+0xa74>
 8003b52:	2b39      	cmp	r3, #57	; 0x39
 8003b54:	d1d8      	bne.n	8003b08 <_dtoa_r+0xa70>
 8003b56:	2339      	movs	r3, #57	; 0x39
 8003b58:	9a04      	ldr	r2, [sp, #16]
 8003b5a:	7013      	strb	r3, [r2, #0]
 8003b5c:	463b      	mov	r3, r7
 8003b5e:	461f      	mov	r7, r3
 8003b60:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8003b64:	3b01      	subs	r3, #1
 8003b66:	2a39      	cmp	r2, #57	; 0x39
 8003b68:	d050      	beq.n	8003c0c <_dtoa_r+0xb74>
 8003b6a:	3201      	adds	r2, #1
 8003b6c:	701a      	strb	r2, [r3, #0]
 8003b6e:	e747      	b.n	8003a00 <_dtoa_r+0x968>
 8003b70:	2a00      	cmp	r2, #0
 8003b72:	dd03      	ble.n	8003b7c <_dtoa_r+0xae4>
 8003b74:	2b39      	cmp	r3, #57	; 0x39
 8003b76:	d0ee      	beq.n	8003b56 <_dtoa_r+0xabe>
 8003b78:	3301      	adds	r3, #1
 8003b7a:	e7c7      	b.n	8003b0c <_dtoa_r+0xa74>
 8003b7c:	9a08      	ldr	r2, [sp, #32]
 8003b7e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003b80:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003b84:	428a      	cmp	r2, r1
 8003b86:	d02a      	beq.n	8003bde <_dtoa_r+0xb46>
 8003b88:	4659      	mov	r1, fp
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	220a      	movs	r2, #10
 8003b8e:	4628      	mov	r0, r5
 8003b90:	f000 f9f4 	bl	8003f7c <__multadd>
 8003b94:	45b0      	cmp	r8, r6
 8003b96:	4683      	mov	fp, r0
 8003b98:	f04f 0300 	mov.w	r3, #0
 8003b9c:	f04f 020a 	mov.w	r2, #10
 8003ba0:	4641      	mov	r1, r8
 8003ba2:	4628      	mov	r0, r5
 8003ba4:	d107      	bne.n	8003bb6 <_dtoa_r+0xb1e>
 8003ba6:	f000 f9e9 	bl	8003f7c <__multadd>
 8003baa:	4680      	mov	r8, r0
 8003bac:	4606      	mov	r6, r0
 8003bae:	9b08      	ldr	r3, [sp, #32]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	9308      	str	r3, [sp, #32]
 8003bb4:	e775      	b.n	8003aa2 <_dtoa_r+0xa0a>
 8003bb6:	f000 f9e1 	bl	8003f7c <__multadd>
 8003bba:	4631      	mov	r1, r6
 8003bbc:	4680      	mov	r8, r0
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	220a      	movs	r2, #10
 8003bc2:	4628      	mov	r0, r5
 8003bc4:	f000 f9da 	bl	8003f7c <__multadd>
 8003bc8:	4606      	mov	r6, r0
 8003bca:	e7f0      	b.n	8003bae <_dtoa_r+0xb16>
 8003bcc:	f1b9 0f00 	cmp.w	r9, #0
 8003bd0:	bfcc      	ite	gt
 8003bd2:	464f      	movgt	r7, r9
 8003bd4:	2701      	movle	r7, #1
 8003bd6:	f04f 0800 	mov.w	r8, #0
 8003bda:	9a03      	ldr	r2, [sp, #12]
 8003bdc:	4417      	add	r7, r2
 8003bde:	4659      	mov	r1, fp
 8003be0:	2201      	movs	r2, #1
 8003be2:	4628      	mov	r0, r5
 8003be4:	9308      	str	r3, [sp, #32]
 8003be6:	f000 fb75 	bl	80042d4 <__lshift>
 8003bea:	4621      	mov	r1, r4
 8003bec:	4683      	mov	fp, r0
 8003bee:	f000 fbe1 	bl	80043b4 <__mcmp>
 8003bf2:	2800      	cmp	r0, #0
 8003bf4:	dcb2      	bgt.n	8003b5c <_dtoa_r+0xac4>
 8003bf6:	d102      	bne.n	8003bfe <_dtoa_r+0xb66>
 8003bf8:	9b08      	ldr	r3, [sp, #32]
 8003bfa:	07db      	lsls	r3, r3, #31
 8003bfc:	d4ae      	bmi.n	8003b5c <_dtoa_r+0xac4>
 8003bfe:	463b      	mov	r3, r7
 8003c00:	461f      	mov	r7, r3
 8003c02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003c06:	2a30      	cmp	r2, #48	; 0x30
 8003c08:	d0fa      	beq.n	8003c00 <_dtoa_r+0xb68>
 8003c0a:	e6f9      	b.n	8003a00 <_dtoa_r+0x968>
 8003c0c:	9a03      	ldr	r2, [sp, #12]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d1a5      	bne.n	8003b5e <_dtoa_r+0xac6>
 8003c12:	2331      	movs	r3, #49	; 0x31
 8003c14:	f10a 0a01 	add.w	sl, sl, #1
 8003c18:	e779      	b.n	8003b0e <_dtoa_r+0xa76>
 8003c1a:	4b14      	ldr	r3, [pc, #80]	; (8003c6c <_dtoa_r+0xbd4>)
 8003c1c:	f7ff baa8 	b.w	8003170 <_dtoa_r+0xd8>
 8003c20:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f47f aa81 	bne.w	800312a <_dtoa_r+0x92>
 8003c28:	4b11      	ldr	r3, [pc, #68]	; (8003c70 <_dtoa_r+0xbd8>)
 8003c2a:	f7ff baa1 	b.w	8003170 <_dtoa_r+0xd8>
 8003c2e:	f1b9 0f00 	cmp.w	r9, #0
 8003c32:	dc03      	bgt.n	8003c3c <_dtoa_r+0xba4>
 8003c34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	f73f aecb 	bgt.w	80039d2 <_dtoa_r+0x93a>
 8003c3c:	9f03      	ldr	r7, [sp, #12]
 8003c3e:	4621      	mov	r1, r4
 8003c40:	4658      	mov	r0, fp
 8003c42:	f7ff f99b 	bl	8002f7c <quorem>
 8003c46:	9a03      	ldr	r2, [sp, #12]
 8003c48:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8003c4c:	f807 3b01 	strb.w	r3, [r7], #1
 8003c50:	1aba      	subs	r2, r7, r2
 8003c52:	4591      	cmp	r9, r2
 8003c54:	ddba      	ble.n	8003bcc <_dtoa_r+0xb34>
 8003c56:	4659      	mov	r1, fp
 8003c58:	2300      	movs	r3, #0
 8003c5a:	220a      	movs	r2, #10
 8003c5c:	4628      	mov	r0, r5
 8003c5e:	f000 f98d 	bl	8003f7c <__multadd>
 8003c62:	4683      	mov	fp, r0
 8003c64:	e7eb      	b.n	8003c3e <_dtoa_r+0xba6>
 8003c66:	bf00      	nop
 8003c68:	080051e7 	.word	0x080051e7
 8003c6c:	08005144 	.word	0x08005144
 8003c70:	08005168 	.word	0x08005168

08003c74 <std>:
 8003c74:	2300      	movs	r3, #0
 8003c76:	b510      	push	{r4, lr}
 8003c78:	4604      	mov	r4, r0
 8003c7a:	e9c0 3300 	strd	r3, r3, [r0]
 8003c7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c82:	6083      	str	r3, [r0, #8]
 8003c84:	8181      	strh	r1, [r0, #12]
 8003c86:	6643      	str	r3, [r0, #100]	; 0x64
 8003c88:	81c2      	strh	r2, [r0, #14]
 8003c8a:	6183      	str	r3, [r0, #24]
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	2208      	movs	r2, #8
 8003c90:	305c      	adds	r0, #92	; 0x5c
 8003c92:	f7fe fcf3 	bl	800267c <memset>
 8003c96:	4b05      	ldr	r3, [pc, #20]	; (8003cac <std+0x38>)
 8003c98:	6224      	str	r4, [r4, #32]
 8003c9a:	6263      	str	r3, [r4, #36]	; 0x24
 8003c9c:	4b04      	ldr	r3, [pc, #16]	; (8003cb0 <std+0x3c>)
 8003c9e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003ca0:	4b04      	ldr	r3, [pc, #16]	; (8003cb4 <std+0x40>)
 8003ca2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003ca4:	4b04      	ldr	r3, [pc, #16]	; (8003cb8 <std+0x44>)
 8003ca6:	6323      	str	r3, [r4, #48]	; 0x30
 8003ca8:	bd10      	pop	{r4, pc}
 8003caa:	bf00      	nop
 8003cac:	08004a6d 	.word	0x08004a6d
 8003cb0:	08004a8f 	.word	0x08004a8f
 8003cb4:	08004ac7 	.word	0x08004ac7
 8003cb8:	08004aeb 	.word	0x08004aeb

08003cbc <_cleanup_r>:
 8003cbc:	4901      	ldr	r1, [pc, #4]	; (8003cc4 <_cleanup_r+0x8>)
 8003cbe:	f000 b8af 	b.w	8003e20 <_fwalk_reent>
 8003cc2:	bf00      	nop
 8003cc4:	08004df9 	.word	0x08004df9

08003cc8 <__sfmoreglue>:
 8003cc8:	2268      	movs	r2, #104	; 0x68
 8003cca:	b570      	push	{r4, r5, r6, lr}
 8003ccc:	1e4d      	subs	r5, r1, #1
 8003cce:	4355      	muls	r5, r2
 8003cd0:	460e      	mov	r6, r1
 8003cd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003cd6:	f000 fced 	bl	80046b4 <_malloc_r>
 8003cda:	4604      	mov	r4, r0
 8003cdc:	b140      	cbz	r0, 8003cf0 <__sfmoreglue+0x28>
 8003cde:	2100      	movs	r1, #0
 8003ce0:	e9c0 1600 	strd	r1, r6, [r0]
 8003ce4:	300c      	adds	r0, #12
 8003ce6:	60a0      	str	r0, [r4, #8]
 8003ce8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003cec:	f7fe fcc6 	bl	800267c <memset>
 8003cf0:	4620      	mov	r0, r4
 8003cf2:	bd70      	pop	{r4, r5, r6, pc}

08003cf4 <__sfp_lock_acquire>:
 8003cf4:	4801      	ldr	r0, [pc, #4]	; (8003cfc <__sfp_lock_acquire+0x8>)
 8003cf6:	f000 b8b8 	b.w	8003e6a <__retarget_lock_acquire_recursive>
 8003cfa:	bf00      	nop
 8003cfc:	20000269 	.word	0x20000269

08003d00 <__sfp_lock_release>:
 8003d00:	4801      	ldr	r0, [pc, #4]	; (8003d08 <__sfp_lock_release+0x8>)
 8003d02:	f000 b8b3 	b.w	8003e6c <__retarget_lock_release_recursive>
 8003d06:	bf00      	nop
 8003d08:	20000269 	.word	0x20000269

08003d0c <__sinit_lock_acquire>:
 8003d0c:	4801      	ldr	r0, [pc, #4]	; (8003d14 <__sinit_lock_acquire+0x8>)
 8003d0e:	f000 b8ac 	b.w	8003e6a <__retarget_lock_acquire_recursive>
 8003d12:	bf00      	nop
 8003d14:	2000026a 	.word	0x2000026a

08003d18 <__sinit_lock_release>:
 8003d18:	4801      	ldr	r0, [pc, #4]	; (8003d20 <__sinit_lock_release+0x8>)
 8003d1a:	f000 b8a7 	b.w	8003e6c <__retarget_lock_release_recursive>
 8003d1e:	bf00      	nop
 8003d20:	2000026a 	.word	0x2000026a

08003d24 <__sinit>:
 8003d24:	b510      	push	{r4, lr}
 8003d26:	4604      	mov	r4, r0
 8003d28:	f7ff fff0 	bl	8003d0c <__sinit_lock_acquire>
 8003d2c:	69a3      	ldr	r3, [r4, #24]
 8003d2e:	b11b      	cbz	r3, 8003d38 <__sinit+0x14>
 8003d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d34:	f7ff bff0 	b.w	8003d18 <__sinit_lock_release>
 8003d38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003d3c:	6523      	str	r3, [r4, #80]	; 0x50
 8003d3e:	4b13      	ldr	r3, [pc, #76]	; (8003d8c <__sinit+0x68>)
 8003d40:	4a13      	ldr	r2, [pc, #76]	; (8003d90 <__sinit+0x6c>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	62a2      	str	r2, [r4, #40]	; 0x28
 8003d46:	42a3      	cmp	r3, r4
 8003d48:	bf08      	it	eq
 8003d4a:	2301      	moveq	r3, #1
 8003d4c:	4620      	mov	r0, r4
 8003d4e:	bf08      	it	eq
 8003d50:	61a3      	streq	r3, [r4, #24]
 8003d52:	f000 f81f 	bl	8003d94 <__sfp>
 8003d56:	6060      	str	r0, [r4, #4]
 8003d58:	4620      	mov	r0, r4
 8003d5a:	f000 f81b 	bl	8003d94 <__sfp>
 8003d5e:	60a0      	str	r0, [r4, #8]
 8003d60:	4620      	mov	r0, r4
 8003d62:	f000 f817 	bl	8003d94 <__sfp>
 8003d66:	2200      	movs	r2, #0
 8003d68:	2104      	movs	r1, #4
 8003d6a:	60e0      	str	r0, [r4, #12]
 8003d6c:	6860      	ldr	r0, [r4, #4]
 8003d6e:	f7ff ff81 	bl	8003c74 <std>
 8003d72:	2201      	movs	r2, #1
 8003d74:	2109      	movs	r1, #9
 8003d76:	68a0      	ldr	r0, [r4, #8]
 8003d78:	f7ff ff7c 	bl	8003c74 <std>
 8003d7c:	2202      	movs	r2, #2
 8003d7e:	2112      	movs	r1, #18
 8003d80:	68e0      	ldr	r0, [r4, #12]
 8003d82:	f7ff ff77 	bl	8003c74 <std>
 8003d86:	2301      	movs	r3, #1
 8003d88:	61a3      	str	r3, [r4, #24]
 8003d8a:	e7d1      	b.n	8003d30 <__sinit+0xc>
 8003d8c:	08005130 	.word	0x08005130
 8003d90:	08003cbd 	.word	0x08003cbd

08003d94 <__sfp>:
 8003d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d96:	4607      	mov	r7, r0
 8003d98:	f7ff ffac 	bl	8003cf4 <__sfp_lock_acquire>
 8003d9c:	4b1e      	ldr	r3, [pc, #120]	; (8003e18 <__sfp+0x84>)
 8003d9e:	681e      	ldr	r6, [r3, #0]
 8003da0:	69b3      	ldr	r3, [r6, #24]
 8003da2:	b913      	cbnz	r3, 8003daa <__sfp+0x16>
 8003da4:	4630      	mov	r0, r6
 8003da6:	f7ff ffbd 	bl	8003d24 <__sinit>
 8003daa:	3648      	adds	r6, #72	; 0x48
 8003dac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003db0:	3b01      	subs	r3, #1
 8003db2:	d503      	bpl.n	8003dbc <__sfp+0x28>
 8003db4:	6833      	ldr	r3, [r6, #0]
 8003db6:	b30b      	cbz	r3, 8003dfc <__sfp+0x68>
 8003db8:	6836      	ldr	r6, [r6, #0]
 8003dba:	e7f7      	b.n	8003dac <__sfp+0x18>
 8003dbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003dc0:	b9d5      	cbnz	r5, 8003df8 <__sfp+0x64>
 8003dc2:	4b16      	ldr	r3, [pc, #88]	; (8003e1c <__sfp+0x88>)
 8003dc4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003dc8:	60e3      	str	r3, [r4, #12]
 8003dca:	6665      	str	r5, [r4, #100]	; 0x64
 8003dcc:	f000 f84c 	bl	8003e68 <__retarget_lock_init_recursive>
 8003dd0:	f7ff ff96 	bl	8003d00 <__sfp_lock_release>
 8003dd4:	2208      	movs	r2, #8
 8003dd6:	4629      	mov	r1, r5
 8003dd8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003ddc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003de0:	6025      	str	r5, [r4, #0]
 8003de2:	61a5      	str	r5, [r4, #24]
 8003de4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003de8:	f7fe fc48 	bl	800267c <memset>
 8003dec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003df0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003df4:	4620      	mov	r0, r4
 8003df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003df8:	3468      	adds	r4, #104	; 0x68
 8003dfa:	e7d9      	b.n	8003db0 <__sfp+0x1c>
 8003dfc:	2104      	movs	r1, #4
 8003dfe:	4638      	mov	r0, r7
 8003e00:	f7ff ff62 	bl	8003cc8 <__sfmoreglue>
 8003e04:	4604      	mov	r4, r0
 8003e06:	6030      	str	r0, [r6, #0]
 8003e08:	2800      	cmp	r0, #0
 8003e0a:	d1d5      	bne.n	8003db8 <__sfp+0x24>
 8003e0c:	f7ff ff78 	bl	8003d00 <__sfp_lock_release>
 8003e10:	230c      	movs	r3, #12
 8003e12:	603b      	str	r3, [r7, #0]
 8003e14:	e7ee      	b.n	8003df4 <__sfp+0x60>
 8003e16:	bf00      	nop
 8003e18:	08005130 	.word	0x08005130
 8003e1c:	ffff0001 	.word	0xffff0001

08003e20 <_fwalk_reent>:
 8003e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e24:	4606      	mov	r6, r0
 8003e26:	4688      	mov	r8, r1
 8003e28:	2700      	movs	r7, #0
 8003e2a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003e2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e32:	f1b9 0901 	subs.w	r9, r9, #1
 8003e36:	d505      	bpl.n	8003e44 <_fwalk_reent+0x24>
 8003e38:	6824      	ldr	r4, [r4, #0]
 8003e3a:	2c00      	cmp	r4, #0
 8003e3c:	d1f7      	bne.n	8003e2e <_fwalk_reent+0xe>
 8003e3e:	4638      	mov	r0, r7
 8003e40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e44:	89ab      	ldrh	r3, [r5, #12]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d907      	bls.n	8003e5a <_fwalk_reent+0x3a>
 8003e4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	d003      	beq.n	8003e5a <_fwalk_reent+0x3a>
 8003e52:	4629      	mov	r1, r5
 8003e54:	4630      	mov	r0, r6
 8003e56:	47c0      	blx	r8
 8003e58:	4307      	orrs	r7, r0
 8003e5a:	3568      	adds	r5, #104	; 0x68
 8003e5c:	e7e9      	b.n	8003e32 <_fwalk_reent+0x12>
	...

08003e60 <_localeconv_r>:
 8003e60:	4800      	ldr	r0, [pc, #0]	; (8003e64 <_localeconv_r+0x4>)
 8003e62:	4770      	bx	lr
 8003e64:	20000160 	.word	0x20000160

08003e68 <__retarget_lock_init_recursive>:
 8003e68:	4770      	bx	lr

08003e6a <__retarget_lock_acquire_recursive>:
 8003e6a:	4770      	bx	lr

08003e6c <__retarget_lock_release_recursive>:
 8003e6c:	4770      	bx	lr
	...

08003e70 <malloc>:
 8003e70:	4b02      	ldr	r3, [pc, #8]	; (8003e7c <malloc+0xc>)
 8003e72:	4601      	mov	r1, r0
 8003e74:	6818      	ldr	r0, [r3, #0]
 8003e76:	f000 bc1d 	b.w	80046b4 <_malloc_r>
 8003e7a:	bf00      	nop
 8003e7c:	2000000c 	.word	0x2000000c

08003e80 <memchr>:
 8003e80:	4603      	mov	r3, r0
 8003e82:	b510      	push	{r4, lr}
 8003e84:	b2c9      	uxtb	r1, r1
 8003e86:	4402      	add	r2, r0
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	d101      	bne.n	8003e92 <memchr+0x12>
 8003e8e:	2000      	movs	r0, #0
 8003e90:	e003      	b.n	8003e9a <memchr+0x1a>
 8003e92:	7804      	ldrb	r4, [r0, #0]
 8003e94:	3301      	adds	r3, #1
 8003e96:	428c      	cmp	r4, r1
 8003e98:	d1f6      	bne.n	8003e88 <memchr+0x8>
 8003e9a:	bd10      	pop	{r4, pc}

08003e9c <memcpy>:
 8003e9c:	440a      	add	r2, r1
 8003e9e:	4291      	cmp	r1, r2
 8003ea0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ea4:	d100      	bne.n	8003ea8 <memcpy+0xc>
 8003ea6:	4770      	bx	lr
 8003ea8:	b510      	push	{r4, lr}
 8003eaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003eae:	4291      	cmp	r1, r2
 8003eb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003eb4:	d1f9      	bne.n	8003eaa <memcpy+0xe>
 8003eb6:	bd10      	pop	{r4, pc}

08003eb8 <_Balloc>:
 8003eb8:	b570      	push	{r4, r5, r6, lr}
 8003eba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003ebc:	4604      	mov	r4, r0
 8003ebe:	460d      	mov	r5, r1
 8003ec0:	b976      	cbnz	r6, 8003ee0 <_Balloc+0x28>
 8003ec2:	2010      	movs	r0, #16
 8003ec4:	f7ff ffd4 	bl	8003e70 <malloc>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	6260      	str	r0, [r4, #36]	; 0x24
 8003ecc:	b920      	cbnz	r0, 8003ed8 <_Balloc+0x20>
 8003ece:	2166      	movs	r1, #102	; 0x66
 8003ed0:	4b17      	ldr	r3, [pc, #92]	; (8003f30 <_Balloc+0x78>)
 8003ed2:	4818      	ldr	r0, [pc, #96]	; (8003f34 <_Balloc+0x7c>)
 8003ed4:	f000 fee0 	bl	8004c98 <__assert_func>
 8003ed8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003edc:	6006      	str	r6, [r0, #0]
 8003ede:	60c6      	str	r6, [r0, #12]
 8003ee0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003ee2:	68f3      	ldr	r3, [r6, #12]
 8003ee4:	b183      	cbz	r3, 8003f08 <_Balloc+0x50>
 8003ee6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003eee:	b9b8      	cbnz	r0, 8003f20 <_Balloc+0x68>
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	fa01 f605 	lsl.w	r6, r1, r5
 8003ef6:	1d72      	adds	r2, r6, #5
 8003ef8:	4620      	mov	r0, r4
 8003efa:	0092      	lsls	r2, r2, #2
 8003efc:	f000 fb5e 	bl	80045bc <_calloc_r>
 8003f00:	b160      	cbz	r0, 8003f1c <_Balloc+0x64>
 8003f02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003f06:	e00e      	b.n	8003f26 <_Balloc+0x6e>
 8003f08:	2221      	movs	r2, #33	; 0x21
 8003f0a:	2104      	movs	r1, #4
 8003f0c:	4620      	mov	r0, r4
 8003f0e:	f000 fb55 	bl	80045bc <_calloc_r>
 8003f12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f14:	60f0      	str	r0, [r6, #12]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1e4      	bne.n	8003ee6 <_Balloc+0x2e>
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	bd70      	pop	{r4, r5, r6, pc}
 8003f20:	6802      	ldr	r2, [r0, #0]
 8003f22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003f26:	2300      	movs	r3, #0
 8003f28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003f2c:	e7f7      	b.n	8003f1e <_Balloc+0x66>
 8003f2e:	bf00      	nop
 8003f30:	08005175 	.word	0x08005175
 8003f34:	08005258 	.word	0x08005258

08003f38 <_Bfree>:
 8003f38:	b570      	push	{r4, r5, r6, lr}
 8003f3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003f3c:	4605      	mov	r5, r0
 8003f3e:	460c      	mov	r4, r1
 8003f40:	b976      	cbnz	r6, 8003f60 <_Bfree+0x28>
 8003f42:	2010      	movs	r0, #16
 8003f44:	f7ff ff94 	bl	8003e70 <malloc>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	6268      	str	r0, [r5, #36]	; 0x24
 8003f4c:	b920      	cbnz	r0, 8003f58 <_Bfree+0x20>
 8003f4e:	218a      	movs	r1, #138	; 0x8a
 8003f50:	4b08      	ldr	r3, [pc, #32]	; (8003f74 <_Bfree+0x3c>)
 8003f52:	4809      	ldr	r0, [pc, #36]	; (8003f78 <_Bfree+0x40>)
 8003f54:	f000 fea0 	bl	8004c98 <__assert_func>
 8003f58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003f5c:	6006      	str	r6, [r0, #0]
 8003f5e:	60c6      	str	r6, [r0, #12]
 8003f60:	b13c      	cbz	r4, 8003f72 <_Bfree+0x3a>
 8003f62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003f64:	6862      	ldr	r2, [r4, #4]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f6c:	6021      	str	r1, [r4, #0]
 8003f6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003f72:	bd70      	pop	{r4, r5, r6, pc}
 8003f74:	08005175 	.word	0x08005175
 8003f78:	08005258 	.word	0x08005258

08003f7c <__multadd>:
 8003f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f80:	4607      	mov	r7, r0
 8003f82:	460c      	mov	r4, r1
 8003f84:	461e      	mov	r6, r3
 8003f86:	2000      	movs	r0, #0
 8003f88:	690d      	ldr	r5, [r1, #16]
 8003f8a:	f101 0c14 	add.w	ip, r1, #20
 8003f8e:	f8dc 3000 	ldr.w	r3, [ip]
 8003f92:	3001      	adds	r0, #1
 8003f94:	b299      	uxth	r1, r3
 8003f96:	fb02 6101 	mla	r1, r2, r1, r6
 8003f9a:	0c1e      	lsrs	r6, r3, #16
 8003f9c:	0c0b      	lsrs	r3, r1, #16
 8003f9e:	fb02 3306 	mla	r3, r2, r6, r3
 8003fa2:	b289      	uxth	r1, r1
 8003fa4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003fa8:	4285      	cmp	r5, r0
 8003faa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003fae:	f84c 1b04 	str.w	r1, [ip], #4
 8003fb2:	dcec      	bgt.n	8003f8e <__multadd+0x12>
 8003fb4:	b30e      	cbz	r6, 8003ffa <__multadd+0x7e>
 8003fb6:	68a3      	ldr	r3, [r4, #8]
 8003fb8:	42ab      	cmp	r3, r5
 8003fba:	dc19      	bgt.n	8003ff0 <__multadd+0x74>
 8003fbc:	6861      	ldr	r1, [r4, #4]
 8003fbe:	4638      	mov	r0, r7
 8003fc0:	3101      	adds	r1, #1
 8003fc2:	f7ff ff79 	bl	8003eb8 <_Balloc>
 8003fc6:	4680      	mov	r8, r0
 8003fc8:	b928      	cbnz	r0, 8003fd6 <__multadd+0x5a>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	21b5      	movs	r1, #181	; 0xb5
 8003fce:	4b0c      	ldr	r3, [pc, #48]	; (8004000 <__multadd+0x84>)
 8003fd0:	480c      	ldr	r0, [pc, #48]	; (8004004 <__multadd+0x88>)
 8003fd2:	f000 fe61 	bl	8004c98 <__assert_func>
 8003fd6:	6922      	ldr	r2, [r4, #16]
 8003fd8:	f104 010c 	add.w	r1, r4, #12
 8003fdc:	3202      	adds	r2, #2
 8003fde:	0092      	lsls	r2, r2, #2
 8003fe0:	300c      	adds	r0, #12
 8003fe2:	f7ff ff5b 	bl	8003e9c <memcpy>
 8003fe6:	4621      	mov	r1, r4
 8003fe8:	4638      	mov	r0, r7
 8003fea:	f7ff ffa5 	bl	8003f38 <_Bfree>
 8003fee:	4644      	mov	r4, r8
 8003ff0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003ff4:	3501      	adds	r5, #1
 8003ff6:	615e      	str	r6, [r3, #20]
 8003ff8:	6125      	str	r5, [r4, #16]
 8003ffa:	4620      	mov	r0, r4
 8003ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004000:	080051e7 	.word	0x080051e7
 8004004:	08005258 	.word	0x08005258

08004008 <__hi0bits>:
 8004008:	0c02      	lsrs	r2, r0, #16
 800400a:	0412      	lsls	r2, r2, #16
 800400c:	4603      	mov	r3, r0
 800400e:	b9ca      	cbnz	r2, 8004044 <__hi0bits+0x3c>
 8004010:	0403      	lsls	r3, r0, #16
 8004012:	2010      	movs	r0, #16
 8004014:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004018:	bf04      	itt	eq
 800401a:	021b      	lsleq	r3, r3, #8
 800401c:	3008      	addeq	r0, #8
 800401e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004022:	bf04      	itt	eq
 8004024:	011b      	lsleq	r3, r3, #4
 8004026:	3004      	addeq	r0, #4
 8004028:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800402c:	bf04      	itt	eq
 800402e:	009b      	lsleq	r3, r3, #2
 8004030:	3002      	addeq	r0, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	db05      	blt.n	8004042 <__hi0bits+0x3a>
 8004036:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800403a:	f100 0001 	add.w	r0, r0, #1
 800403e:	bf08      	it	eq
 8004040:	2020      	moveq	r0, #32
 8004042:	4770      	bx	lr
 8004044:	2000      	movs	r0, #0
 8004046:	e7e5      	b.n	8004014 <__hi0bits+0xc>

08004048 <__lo0bits>:
 8004048:	6803      	ldr	r3, [r0, #0]
 800404a:	4602      	mov	r2, r0
 800404c:	f013 0007 	ands.w	r0, r3, #7
 8004050:	d00b      	beq.n	800406a <__lo0bits+0x22>
 8004052:	07d9      	lsls	r1, r3, #31
 8004054:	d421      	bmi.n	800409a <__lo0bits+0x52>
 8004056:	0798      	lsls	r0, r3, #30
 8004058:	bf49      	itett	mi
 800405a:	085b      	lsrmi	r3, r3, #1
 800405c:	089b      	lsrpl	r3, r3, #2
 800405e:	2001      	movmi	r0, #1
 8004060:	6013      	strmi	r3, [r2, #0]
 8004062:	bf5c      	itt	pl
 8004064:	2002      	movpl	r0, #2
 8004066:	6013      	strpl	r3, [r2, #0]
 8004068:	4770      	bx	lr
 800406a:	b299      	uxth	r1, r3
 800406c:	b909      	cbnz	r1, 8004072 <__lo0bits+0x2a>
 800406e:	2010      	movs	r0, #16
 8004070:	0c1b      	lsrs	r3, r3, #16
 8004072:	b2d9      	uxtb	r1, r3
 8004074:	b909      	cbnz	r1, 800407a <__lo0bits+0x32>
 8004076:	3008      	adds	r0, #8
 8004078:	0a1b      	lsrs	r3, r3, #8
 800407a:	0719      	lsls	r1, r3, #28
 800407c:	bf04      	itt	eq
 800407e:	091b      	lsreq	r3, r3, #4
 8004080:	3004      	addeq	r0, #4
 8004082:	0799      	lsls	r1, r3, #30
 8004084:	bf04      	itt	eq
 8004086:	089b      	lsreq	r3, r3, #2
 8004088:	3002      	addeq	r0, #2
 800408a:	07d9      	lsls	r1, r3, #31
 800408c:	d403      	bmi.n	8004096 <__lo0bits+0x4e>
 800408e:	085b      	lsrs	r3, r3, #1
 8004090:	f100 0001 	add.w	r0, r0, #1
 8004094:	d003      	beq.n	800409e <__lo0bits+0x56>
 8004096:	6013      	str	r3, [r2, #0]
 8004098:	4770      	bx	lr
 800409a:	2000      	movs	r0, #0
 800409c:	4770      	bx	lr
 800409e:	2020      	movs	r0, #32
 80040a0:	4770      	bx	lr
	...

080040a4 <__i2b>:
 80040a4:	b510      	push	{r4, lr}
 80040a6:	460c      	mov	r4, r1
 80040a8:	2101      	movs	r1, #1
 80040aa:	f7ff ff05 	bl	8003eb8 <_Balloc>
 80040ae:	4602      	mov	r2, r0
 80040b0:	b928      	cbnz	r0, 80040be <__i2b+0x1a>
 80040b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80040b6:	4b04      	ldr	r3, [pc, #16]	; (80040c8 <__i2b+0x24>)
 80040b8:	4804      	ldr	r0, [pc, #16]	; (80040cc <__i2b+0x28>)
 80040ba:	f000 fded 	bl	8004c98 <__assert_func>
 80040be:	2301      	movs	r3, #1
 80040c0:	6144      	str	r4, [r0, #20]
 80040c2:	6103      	str	r3, [r0, #16]
 80040c4:	bd10      	pop	{r4, pc}
 80040c6:	bf00      	nop
 80040c8:	080051e7 	.word	0x080051e7
 80040cc:	08005258 	.word	0x08005258

080040d0 <__multiply>:
 80040d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040d4:	4691      	mov	r9, r2
 80040d6:	690a      	ldr	r2, [r1, #16]
 80040d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80040dc:	460c      	mov	r4, r1
 80040de:	429a      	cmp	r2, r3
 80040e0:	bfbe      	ittt	lt
 80040e2:	460b      	movlt	r3, r1
 80040e4:	464c      	movlt	r4, r9
 80040e6:	4699      	movlt	r9, r3
 80040e8:	6927      	ldr	r7, [r4, #16]
 80040ea:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80040ee:	68a3      	ldr	r3, [r4, #8]
 80040f0:	6861      	ldr	r1, [r4, #4]
 80040f2:	eb07 060a 	add.w	r6, r7, sl
 80040f6:	42b3      	cmp	r3, r6
 80040f8:	b085      	sub	sp, #20
 80040fa:	bfb8      	it	lt
 80040fc:	3101      	addlt	r1, #1
 80040fe:	f7ff fedb 	bl	8003eb8 <_Balloc>
 8004102:	b930      	cbnz	r0, 8004112 <__multiply+0x42>
 8004104:	4602      	mov	r2, r0
 8004106:	f240 115d 	movw	r1, #349	; 0x15d
 800410a:	4b43      	ldr	r3, [pc, #268]	; (8004218 <__multiply+0x148>)
 800410c:	4843      	ldr	r0, [pc, #268]	; (800421c <__multiply+0x14c>)
 800410e:	f000 fdc3 	bl	8004c98 <__assert_func>
 8004112:	f100 0514 	add.w	r5, r0, #20
 8004116:	462b      	mov	r3, r5
 8004118:	2200      	movs	r2, #0
 800411a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800411e:	4543      	cmp	r3, r8
 8004120:	d321      	bcc.n	8004166 <__multiply+0x96>
 8004122:	f104 0314 	add.w	r3, r4, #20
 8004126:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800412a:	f109 0314 	add.w	r3, r9, #20
 800412e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004132:	9202      	str	r2, [sp, #8]
 8004134:	1b3a      	subs	r2, r7, r4
 8004136:	3a15      	subs	r2, #21
 8004138:	f022 0203 	bic.w	r2, r2, #3
 800413c:	3204      	adds	r2, #4
 800413e:	f104 0115 	add.w	r1, r4, #21
 8004142:	428f      	cmp	r7, r1
 8004144:	bf38      	it	cc
 8004146:	2204      	movcc	r2, #4
 8004148:	9201      	str	r2, [sp, #4]
 800414a:	9a02      	ldr	r2, [sp, #8]
 800414c:	9303      	str	r3, [sp, #12]
 800414e:	429a      	cmp	r2, r3
 8004150:	d80c      	bhi.n	800416c <__multiply+0x9c>
 8004152:	2e00      	cmp	r6, #0
 8004154:	dd03      	ble.n	800415e <__multiply+0x8e>
 8004156:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800415a:	2b00      	cmp	r3, #0
 800415c:	d059      	beq.n	8004212 <__multiply+0x142>
 800415e:	6106      	str	r6, [r0, #16]
 8004160:	b005      	add	sp, #20
 8004162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004166:	f843 2b04 	str.w	r2, [r3], #4
 800416a:	e7d8      	b.n	800411e <__multiply+0x4e>
 800416c:	f8b3 a000 	ldrh.w	sl, [r3]
 8004170:	f1ba 0f00 	cmp.w	sl, #0
 8004174:	d023      	beq.n	80041be <__multiply+0xee>
 8004176:	46a9      	mov	r9, r5
 8004178:	f04f 0c00 	mov.w	ip, #0
 800417c:	f104 0e14 	add.w	lr, r4, #20
 8004180:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004184:	f8d9 1000 	ldr.w	r1, [r9]
 8004188:	fa1f fb82 	uxth.w	fp, r2
 800418c:	b289      	uxth	r1, r1
 800418e:	fb0a 110b 	mla	r1, sl, fp, r1
 8004192:	4461      	add	r1, ip
 8004194:	f8d9 c000 	ldr.w	ip, [r9]
 8004198:	0c12      	lsrs	r2, r2, #16
 800419a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800419e:	fb0a c202 	mla	r2, sl, r2, ip
 80041a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80041a6:	b289      	uxth	r1, r1
 80041a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80041ac:	4577      	cmp	r7, lr
 80041ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80041b2:	f849 1b04 	str.w	r1, [r9], #4
 80041b6:	d8e3      	bhi.n	8004180 <__multiply+0xb0>
 80041b8:	9a01      	ldr	r2, [sp, #4]
 80041ba:	f845 c002 	str.w	ip, [r5, r2]
 80041be:	9a03      	ldr	r2, [sp, #12]
 80041c0:	3304      	adds	r3, #4
 80041c2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80041c6:	f1b9 0f00 	cmp.w	r9, #0
 80041ca:	d020      	beq.n	800420e <__multiply+0x13e>
 80041cc:	46ae      	mov	lr, r5
 80041ce:	f04f 0a00 	mov.w	sl, #0
 80041d2:	6829      	ldr	r1, [r5, #0]
 80041d4:	f104 0c14 	add.w	ip, r4, #20
 80041d8:	f8bc b000 	ldrh.w	fp, [ip]
 80041dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80041e0:	b289      	uxth	r1, r1
 80041e2:	fb09 220b 	mla	r2, r9, fp, r2
 80041e6:	4492      	add	sl, r2
 80041e8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80041ec:	f84e 1b04 	str.w	r1, [lr], #4
 80041f0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80041f4:	f8be 1000 	ldrh.w	r1, [lr]
 80041f8:	0c12      	lsrs	r2, r2, #16
 80041fa:	fb09 1102 	mla	r1, r9, r2, r1
 80041fe:	4567      	cmp	r7, ip
 8004200:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8004204:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004208:	d8e6      	bhi.n	80041d8 <__multiply+0x108>
 800420a:	9a01      	ldr	r2, [sp, #4]
 800420c:	50a9      	str	r1, [r5, r2]
 800420e:	3504      	adds	r5, #4
 8004210:	e79b      	b.n	800414a <__multiply+0x7a>
 8004212:	3e01      	subs	r6, #1
 8004214:	e79d      	b.n	8004152 <__multiply+0x82>
 8004216:	bf00      	nop
 8004218:	080051e7 	.word	0x080051e7
 800421c:	08005258 	.word	0x08005258

08004220 <__pow5mult>:
 8004220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004224:	4615      	mov	r5, r2
 8004226:	f012 0203 	ands.w	r2, r2, #3
 800422a:	4606      	mov	r6, r0
 800422c:	460f      	mov	r7, r1
 800422e:	d007      	beq.n	8004240 <__pow5mult+0x20>
 8004230:	4c25      	ldr	r4, [pc, #148]	; (80042c8 <__pow5mult+0xa8>)
 8004232:	3a01      	subs	r2, #1
 8004234:	2300      	movs	r3, #0
 8004236:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800423a:	f7ff fe9f 	bl	8003f7c <__multadd>
 800423e:	4607      	mov	r7, r0
 8004240:	10ad      	asrs	r5, r5, #2
 8004242:	d03d      	beq.n	80042c0 <__pow5mult+0xa0>
 8004244:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004246:	b97c      	cbnz	r4, 8004268 <__pow5mult+0x48>
 8004248:	2010      	movs	r0, #16
 800424a:	f7ff fe11 	bl	8003e70 <malloc>
 800424e:	4602      	mov	r2, r0
 8004250:	6270      	str	r0, [r6, #36]	; 0x24
 8004252:	b928      	cbnz	r0, 8004260 <__pow5mult+0x40>
 8004254:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004258:	4b1c      	ldr	r3, [pc, #112]	; (80042cc <__pow5mult+0xac>)
 800425a:	481d      	ldr	r0, [pc, #116]	; (80042d0 <__pow5mult+0xb0>)
 800425c:	f000 fd1c 	bl	8004c98 <__assert_func>
 8004260:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004264:	6004      	str	r4, [r0, #0]
 8004266:	60c4      	str	r4, [r0, #12]
 8004268:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800426c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004270:	b94c      	cbnz	r4, 8004286 <__pow5mult+0x66>
 8004272:	f240 2171 	movw	r1, #625	; 0x271
 8004276:	4630      	mov	r0, r6
 8004278:	f7ff ff14 	bl	80040a4 <__i2b>
 800427c:	2300      	movs	r3, #0
 800427e:	4604      	mov	r4, r0
 8004280:	f8c8 0008 	str.w	r0, [r8, #8]
 8004284:	6003      	str	r3, [r0, #0]
 8004286:	f04f 0900 	mov.w	r9, #0
 800428a:	07eb      	lsls	r3, r5, #31
 800428c:	d50a      	bpl.n	80042a4 <__pow5mult+0x84>
 800428e:	4639      	mov	r1, r7
 8004290:	4622      	mov	r2, r4
 8004292:	4630      	mov	r0, r6
 8004294:	f7ff ff1c 	bl	80040d0 <__multiply>
 8004298:	4680      	mov	r8, r0
 800429a:	4639      	mov	r1, r7
 800429c:	4630      	mov	r0, r6
 800429e:	f7ff fe4b 	bl	8003f38 <_Bfree>
 80042a2:	4647      	mov	r7, r8
 80042a4:	106d      	asrs	r5, r5, #1
 80042a6:	d00b      	beq.n	80042c0 <__pow5mult+0xa0>
 80042a8:	6820      	ldr	r0, [r4, #0]
 80042aa:	b938      	cbnz	r0, 80042bc <__pow5mult+0x9c>
 80042ac:	4622      	mov	r2, r4
 80042ae:	4621      	mov	r1, r4
 80042b0:	4630      	mov	r0, r6
 80042b2:	f7ff ff0d 	bl	80040d0 <__multiply>
 80042b6:	6020      	str	r0, [r4, #0]
 80042b8:	f8c0 9000 	str.w	r9, [r0]
 80042bc:	4604      	mov	r4, r0
 80042be:	e7e4      	b.n	800428a <__pow5mult+0x6a>
 80042c0:	4638      	mov	r0, r7
 80042c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042c6:	bf00      	nop
 80042c8:	080053a8 	.word	0x080053a8
 80042cc:	08005175 	.word	0x08005175
 80042d0:	08005258 	.word	0x08005258

080042d4 <__lshift>:
 80042d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042d8:	460c      	mov	r4, r1
 80042da:	4607      	mov	r7, r0
 80042dc:	4691      	mov	r9, r2
 80042de:	6923      	ldr	r3, [r4, #16]
 80042e0:	6849      	ldr	r1, [r1, #4]
 80042e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80042e6:	68a3      	ldr	r3, [r4, #8]
 80042e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80042ec:	f108 0601 	add.w	r6, r8, #1
 80042f0:	42b3      	cmp	r3, r6
 80042f2:	db0b      	blt.n	800430c <__lshift+0x38>
 80042f4:	4638      	mov	r0, r7
 80042f6:	f7ff fddf 	bl	8003eb8 <_Balloc>
 80042fa:	4605      	mov	r5, r0
 80042fc:	b948      	cbnz	r0, 8004312 <__lshift+0x3e>
 80042fe:	4602      	mov	r2, r0
 8004300:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004304:	4b29      	ldr	r3, [pc, #164]	; (80043ac <__lshift+0xd8>)
 8004306:	482a      	ldr	r0, [pc, #168]	; (80043b0 <__lshift+0xdc>)
 8004308:	f000 fcc6 	bl	8004c98 <__assert_func>
 800430c:	3101      	adds	r1, #1
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	e7ee      	b.n	80042f0 <__lshift+0x1c>
 8004312:	2300      	movs	r3, #0
 8004314:	f100 0114 	add.w	r1, r0, #20
 8004318:	f100 0210 	add.w	r2, r0, #16
 800431c:	4618      	mov	r0, r3
 800431e:	4553      	cmp	r3, sl
 8004320:	db37      	blt.n	8004392 <__lshift+0xbe>
 8004322:	6920      	ldr	r0, [r4, #16]
 8004324:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004328:	f104 0314 	add.w	r3, r4, #20
 800432c:	f019 091f 	ands.w	r9, r9, #31
 8004330:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004334:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004338:	d02f      	beq.n	800439a <__lshift+0xc6>
 800433a:	468a      	mov	sl, r1
 800433c:	f04f 0c00 	mov.w	ip, #0
 8004340:	f1c9 0e20 	rsb	lr, r9, #32
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	fa02 f209 	lsl.w	r2, r2, r9
 800434a:	ea42 020c 	orr.w	r2, r2, ip
 800434e:	f84a 2b04 	str.w	r2, [sl], #4
 8004352:	f853 2b04 	ldr.w	r2, [r3], #4
 8004356:	4298      	cmp	r0, r3
 8004358:	fa22 fc0e 	lsr.w	ip, r2, lr
 800435c:	d8f2      	bhi.n	8004344 <__lshift+0x70>
 800435e:	1b03      	subs	r3, r0, r4
 8004360:	3b15      	subs	r3, #21
 8004362:	f023 0303 	bic.w	r3, r3, #3
 8004366:	3304      	adds	r3, #4
 8004368:	f104 0215 	add.w	r2, r4, #21
 800436c:	4290      	cmp	r0, r2
 800436e:	bf38      	it	cc
 8004370:	2304      	movcc	r3, #4
 8004372:	f841 c003 	str.w	ip, [r1, r3]
 8004376:	f1bc 0f00 	cmp.w	ip, #0
 800437a:	d001      	beq.n	8004380 <__lshift+0xac>
 800437c:	f108 0602 	add.w	r6, r8, #2
 8004380:	3e01      	subs	r6, #1
 8004382:	4638      	mov	r0, r7
 8004384:	4621      	mov	r1, r4
 8004386:	612e      	str	r6, [r5, #16]
 8004388:	f7ff fdd6 	bl	8003f38 <_Bfree>
 800438c:	4628      	mov	r0, r5
 800438e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004392:	f842 0f04 	str.w	r0, [r2, #4]!
 8004396:	3301      	adds	r3, #1
 8004398:	e7c1      	b.n	800431e <__lshift+0x4a>
 800439a:	3904      	subs	r1, #4
 800439c:	f853 2b04 	ldr.w	r2, [r3], #4
 80043a0:	4298      	cmp	r0, r3
 80043a2:	f841 2f04 	str.w	r2, [r1, #4]!
 80043a6:	d8f9      	bhi.n	800439c <__lshift+0xc8>
 80043a8:	e7ea      	b.n	8004380 <__lshift+0xac>
 80043aa:	bf00      	nop
 80043ac:	080051e7 	.word	0x080051e7
 80043b0:	08005258 	.word	0x08005258

080043b4 <__mcmp>:
 80043b4:	4603      	mov	r3, r0
 80043b6:	690a      	ldr	r2, [r1, #16]
 80043b8:	6900      	ldr	r0, [r0, #16]
 80043ba:	b530      	push	{r4, r5, lr}
 80043bc:	1a80      	subs	r0, r0, r2
 80043be:	d10d      	bne.n	80043dc <__mcmp+0x28>
 80043c0:	3314      	adds	r3, #20
 80043c2:	3114      	adds	r1, #20
 80043c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80043c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80043cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80043d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80043d4:	4295      	cmp	r5, r2
 80043d6:	d002      	beq.n	80043de <__mcmp+0x2a>
 80043d8:	d304      	bcc.n	80043e4 <__mcmp+0x30>
 80043da:	2001      	movs	r0, #1
 80043dc:	bd30      	pop	{r4, r5, pc}
 80043de:	42a3      	cmp	r3, r4
 80043e0:	d3f4      	bcc.n	80043cc <__mcmp+0x18>
 80043e2:	e7fb      	b.n	80043dc <__mcmp+0x28>
 80043e4:	f04f 30ff 	mov.w	r0, #4294967295
 80043e8:	e7f8      	b.n	80043dc <__mcmp+0x28>
	...

080043ec <__mdiff>:
 80043ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043f0:	460d      	mov	r5, r1
 80043f2:	4607      	mov	r7, r0
 80043f4:	4611      	mov	r1, r2
 80043f6:	4628      	mov	r0, r5
 80043f8:	4614      	mov	r4, r2
 80043fa:	f7ff ffdb 	bl	80043b4 <__mcmp>
 80043fe:	1e06      	subs	r6, r0, #0
 8004400:	d111      	bne.n	8004426 <__mdiff+0x3a>
 8004402:	4631      	mov	r1, r6
 8004404:	4638      	mov	r0, r7
 8004406:	f7ff fd57 	bl	8003eb8 <_Balloc>
 800440a:	4602      	mov	r2, r0
 800440c:	b928      	cbnz	r0, 800441a <__mdiff+0x2e>
 800440e:	f240 2132 	movw	r1, #562	; 0x232
 8004412:	4b3a      	ldr	r3, [pc, #232]	; (80044fc <__mdiff+0x110>)
 8004414:	483a      	ldr	r0, [pc, #232]	; (8004500 <__mdiff+0x114>)
 8004416:	f000 fc3f 	bl	8004c98 <__assert_func>
 800441a:	2301      	movs	r3, #1
 800441c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004420:	4610      	mov	r0, r2
 8004422:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004426:	bfa4      	itt	ge
 8004428:	4623      	movge	r3, r4
 800442a:	462c      	movge	r4, r5
 800442c:	4638      	mov	r0, r7
 800442e:	6861      	ldr	r1, [r4, #4]
 8004430:	bfa6      	itte	ge
 8004432:	461d      	movge	r5, r3
 8004434:	2600      	movge	r6, #0
 8004436:	2601      	movlt	r6, #1
 8004438:	f7ff fd3e 	bl	8003eb8 <_Balloc>
 800443c:	4602      	mov	r2, r0
 800443e:	b918      	cbnz	r0, 8004448 <__mdiff+0x5c>
 8004440:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004444:	4b2d      	ldr	r3, [pc, #180]	; (80044fc <__mdiff+0x110>)
 8004446:	e7e5      	b.n	8004414 <__mdiff+0x28>
 8004448:	f102 0814 	add.w	r8, r2, #20
 800444c:	46c2      	mov	sl, r8
 800444e:	f04f 0c00 	mov.w	ip, #0
 8004452:	6927      	ldr	r7, [r4, #16]
 8004454:	60c6      	str	r6, [r0, #12]
 8004456:	692e      	ldr	r6, [r5, #16]
 8004458:	f104 0014 	add.w	r0, r4, #20
 800445c:	f105 0914 	add.w	r9, r5, #20
 8004460:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8004464:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004468:	3410      	adds	r4, #16
 800446a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800446e:	f859 3b04 	ldr.w	r3, [r9], #4
 8004472:	fa1f f18b 	uxth.w	r1, fp
 8004476:	448c      	add	ip, r1
 8004478:	b299      	uxth	r1, r3
 800447a:	0c1b      	lsrs	r3, r3, #16
 800447c:	ebac 0101 	sub.w	r1, ip, r1
 8004480:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004484:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004488:	b289      	uxth	r1, r1
 800448a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800448e:	454e      	cmp	r6, r9
 8004490:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004494:	f84a 3b04 	str.w	r3, [sl], #4
 8004498:	d8e7      	bhi.n	800446a <__mdiff+0x7e>
 800449a:	1b73      	subs	r3, r6, r5
 800449c:	3b15      	subs	r3, #21
 800449e:	f023 0303 	bic.w	r3, r3, #3
 80044a2:	3515      	adds	r5, #21
 80044a4:	3304      	adds	r3, #4
 80044a6:	42ae      	cmp	r6, r5
 80044a8:	bf38      	it	cc
 80044aa:	2304      	movcc	r3, #4
 80044ac:	4418      	add	r0, r3
 80044ae:	4443      	add	r3, r8
 80044b0:	461e      	mov	r6, r3
 80044b2:	4605      	mov	r5, r0
 80044b4:	4575      	cmp	r5, lr
 80044b6:	d30e      	bcc.n	80044d6 <__mdiff+0xea>
 80044b8:	f10e 0103 	add.w	r1, lr, #3
 80044bc:	1a09      	subs	r1, r1, r0
 80044be:	f021 0103 	bic.w	r1, r1, #3
 80044c2:	3803      	subs	r0, #3
 80044c4:	4586      	cmp	lr, r0
 80044c6:	bf38      	it	cc
 80044c8:	2100      	movcc	r1, #0
 80044ca:	4419      	add	r1, r3
 80044cc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80044d0:	b18b      	cbz	r3, 80044f6 <__mdiff+0x10a>
 80044d2:	6117      	str	r7, [r2, #16]
 80044d4:	e7a4      	b.n	8004420 <__mdiff+0x34>
 80044d6:	f855 8b04 	ldr.w	r8, [r5], #4
 80044da:	fa1f f188 	uxth.w	r1, r8
 80044de:	4461      	add	r1, ip
 80044e0:	140c      	asrs	r4, r1, #16
 80044e2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80044e6:	b289      	uxth	r1, r1
 80044e8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80044ec:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80044f0:	f846 1b04 	str.w	r1, [r6], #4
 80044f4:	e7de      	b.n	80044b4 <__mdiff+0xc8>
 80044f6:	3f01      	subs	r7, #1
 80044f8:	e7e8      	b.n	80044cc <__mdiff+0xe0>
 80044fa:	bf00      	nop
 80044fc:	080051e7 	.word	0x080051e7
 8004500:	08005258 	.word	0x08005258

08004504 <__d2b>:
 8004504:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004508:	2101      	movs	r1, #1
 800450a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800450e:	4690      	mov	r8, r2
 8004510:	461d      	mov	r5, r3
 8004512:	f7ff fcd1 	bl	8003eb8 <_Balloc>
 8004516:	4604      	mov	r4, r0
 8004518:	b930      	cbnz	r0, 8004528 <__d2b+0x24>
 800451a:	4602      	mov	r2, r0
 800451c:	f240 310a 	movw	r1, #778	; 0x30a
 8004520:	4b24      	ldr	r3, [pc, #144]	; (80045b4 <__d2b+0xb0>)
 8004522:	4825      	ldr	r0, [pc, #148]	; (80045b8 <__d2b+0xb4>)
 8004524:	f000 fbb8 	bl	8004c98 <__assert_func>
 8004528:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800452c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8004530:	bb2d      	cbnz	r5, 800457e <__d2b+0x7a>
 8004532:	9301      	str	r3, [sp, #4]
 8004534:	f1b8 0300 	subs.w	r3, r8, #0
 8004538:	d026      	beq.n	8004588 <__d2b+0x84>
 800453a:	4668      	mov	r0, sp
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	f7ff fd83 	bl	8004048 <__lo0bits>
 8004542:	9900      	ldr	r1, [sp, #0]
 8004544:	b1f0      	cbz	r0, 8004584 <__d2b+0x80>
 8004546:	9a01      	ldr	r2, [sp, #4]
 8004548:	f1c0 0320 	rsb	r3, r0, #32
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	430b      	orrs	r3, r1
 8004552:	40c2      	lsrs	r2, r0
 8004554:	6163      	str	r3, [r4, #20]
 8004556:	9201      	str	r2, [sp, #4]
 8004558:	9b01      	ldr	r3, [sp, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	bf14      	ite	ne
 800455e:	2102      	movne	r1, #2
 8004560:	2101      	moveq	r1, #1
 8004562:	61a3      	str	r3, [r4, #24]
 8004564:	6121      	str	r1, [r4, #16]
 8004566:	b1c5      	cbz	r5, 800459a <__d2b+0x96>
 8004568:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800456c:	4405      	add	r5, r0
 800456e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004572:	603d      	str	r5, [r7, #0]
 8004574:	6030      	str	r0, [r6, #0]
 8004576:	4620      	mov	r0, r4
 8004578:	b002      	add	sp, #8
 800457a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800457e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004582:	e7d6      	b.n	8004532 <__d2b+0x2e>
 8004584:	6161      	str	r1, [r4, #20]
 8004586:	e7e7      	b.n	8004558 <__d2b+0x54>
 8004588:	a801      	add	r0, sp, #4
 800458a:	f7ff fd5d 	bl	8004048 <__lo0bits>
 800458e:	2101      	movs	r1, #1
 8004590:	9b01      	ldr	r3, [sp, #4]
 8004592:	6121      	str	r1, [r4, #16]
 8004594:	6163      	str	r3, [r4, #20]
 8004596:	3020      	adds	r0, #32
 8004598:	e7e5      	b.n	8004566 <__d2b+0x62>
 800459a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800459e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80045a2:	6038      	str	r0, [r7, #0]
 80045a4:	6918      	ldr	r0, [r3, #16]
 80045a6:	f7ff fd2f 	bl	8004008 <__hi0bits>
 80045aa:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80045ae:	6031      	str	r1, [r6, #0]
 80045b0:	e7e1      	b.n	8004576 <__d2b+0x72>
 80045b2:	bf00      	nop
 80045b4:	080051e7 	.word	0x080051e7
 80045b8:	08005258 	.word	0x08005258

080045bc <_calloc_r>:
 80045bc:	b570      	push	{r4, r5, r6, lr}
 80045be:	fba1 5402 	umull	r5, r4, r1, r2
 80045c2:	b934      	cbnz	r4, 80045d2 <_calloc_r+0x16>
 80045c4:	4629      	mov	r1, r5
 80045c6:	f000 f875 	bl	80046b4 <_malloc_r>
 80045ca:	4606      	mov	r6, r0
 80045cc:	b928      	cbnz	r0, 80045da <_calloc_r+0x1e>
 80045ce:	4630      	mov	r0, r6
 80045d0:	bd70      	pop	{r4, r5, r6, pc}
 80045d2:	220c      	movs	r2, #12
 80045d4:	2600      	movs	r6, #0
 80045d6:	6002      	str	r2, [r0, #0]
 80045d8:	e7f9      	b.n	80045ce <_calloc_r+0x12>
 80045da:	462a      	mov	r2, r5
 80045dc:	4621      	mov	r1, r4
 80045de:	f7fe f84d 	bl	800267c <memset>
 80045e2:	e7f4      	b.n	80045ce <_calloc_r+0x12>

080045e4 <_free_r>:
 80045e4:	b538      	push	{r3, r4, r5, lr}
 80045e6:	4605      	mov	r5, r0
 80045e8:	2900      	cmp	r1, #0
 80045ea:	d040      	beq.n	800466e <_free_r+0x8a>
 80045ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045f0:	1f0c      	subs	r4, r1, #4
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	bfb8      	it	lt
 80045f6:	18e4      	addlt	r4, r4, r3
 80045f8:	f000 fcd6 	bl	8004fa8 <__malloc_lock>
 80045fc:	4a1c      	ldr	r2, [pc, #112]	; (8004670 <_free_r+0x8c>)
 80045fe:	6813      	ldr	r3, [r2, #0]
 8004600:	b933      	cbnz	r3, 8004610 <_free_r+0x2c>
 8004602:	6063      	str	r3, [r4, #4]
 8004604:	6014      	str	r4, [r2, #0]
 8004606:	4628      	mov	r0, r5
 8004608:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800460c:	f000 bcd2 	b.w	8004fb4 <__malloc_unlock>
 8004610:	42a3      	cmp	r3, r4
 8004612:	d908      	bls.n	8004626 <_free_r+0x42>
 8004614:	6820      	ldr	r0, [r4, #0]
 8004616:	1821      	adds	r1, r4, r0
 8004618:	428b      	cmp	r3, r1
 800461a:	bf01      	itttt	eq
 800461c:	6819      	ldreq	r1, [r3, #0]
 800461e:	685b      	ldreq	r3, [r3, #4]
 8004620:	1809      	addeq	r1, r1, r0
 8004622:	6021      	streq	r1, [r4, #0]
 8004624:	e7ed      	b.n	8004602 <_free_r+0x1e>
 8004626:	461a      	mov	r2, r3
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	b10b      	cbz	r3, 8004630 <_free_r+0x4c>
 800462c:	42a3      	cmp	r3, r4
 800462e:	d9fa      	bls.n	8004626 <_free_r+0x42>
 8004630:	6811      	ldr	r1, [r2, #0]
 8004632:	1850      	adds	r0, r2, r1
 8004634:	42a0      	cmp	r0, r4
 8004636:	d10b      	bne.n	8004650 <_free_r+0x6c>
 8004638:	6820      	ldr	r0, [r4, #0]
 800463a:	4401      	add	r1, r0
 800463c:	1850      	adds	r0, r2, r1
 800463e:	4283      	cmp	r3, r0
 8004640:	6011      	str	r1, [r2, #0]
 8004642:	d1e0      	bne.n	8004606 <_free_r+0x22>
 8004644:	6818      	ldr	r0, [r3, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	4401      	add	r1, r0
 800464a:	6011      	str	r1, [r2, #0]
 800464c:	6053      	str	r3, [r2, #4]
 800464e:	e7da      	b.n	8004606 <_free_r+0x22>
 8004650:	d902      	bls.n	8004658 <_free_r+0x74>
 8004652:	230c      	movs	r3, #12
 8004654:	602b      	str	r3, [r5, #0]
 8004656:	e7d6      	b.n	8004606 <_free_r+0x22>
 8004658:	6820      	ldr	r0, [r4, #0]
 800465a:	1821      	adds	r1, r4, r0
 800465c:	428b      	cmp	r3, r1
 800465e:	bf01      	itttt	eq
 8004660:	6819      	ldreq	r1, [r3, #0]
 8004662:	685b      	ldreq	r3, [r3, #4]
 8004664:	1809      	addeq	r1, r1, r0
 8004666:	6021      	streq	r1, [r4, #0]
 8004668:	6063      	str	r3, [r4, #4]
 800466a:	6054      	str	r4, [r2, #4]
 800466c:	e7cb      	b.n	8004606 <_free_r+0x22>
 800466e:	bd38      	pop	{r3, r4, r5, pc}
 8004670:	2000026c 	.word	0x2000026c

08004674 <sbrk_aligned>:
 8004674:	b570      	push	{r4, r5, r6, lr}
 8004676:	4e0e      	ldr	r6, [pc, #56]	; (80046b0 <sbrk_aligned+0x3c>)
 8004678:	460c      	mov	r4, r1
 800467a:	6831      	ldr	r1, [r6, #0]
 800467c:	4605      	mov	r5, r0
 800467e:	b911      	cbnz	r1, 8004686 <sbrk_aligned+0x12>
 8004680:	f000 f9e4 	bl	8004a4c <_sbrk_r>
 8004684:	6030      	str	r0, [r6, #0]
 8004686:	4621      	mov	r1, r4
 8004688:	4628      	mov	r0, r5
 800468a:	f000 f9df 	bl	8004a4c <_sbrk_r>
 800468e:	1c43      	adds	r3, r0, #1
 8004690:	d00a      	beq.n	80046a8 <sbrk_aligned+0x34>
 8004692:	1cc4      	adds	r4, r0, #3
 8004694:	f024 0403 	bic.w	r4, r4, #3
 8004698:	42a0      	cmp	r0, r4
 800469a:	d007      	beq.n	80046ac <sbrk_aligned+0x38>
 800469c:	1a21      	subs	r1, r4, r0
 800469e:	4628      	mov	r0, r5
 80046a0:	f000 f9d4 	bl	8004a4c <_sbrk_r>
 80046a4:	3001      	adds	r0, #1
 80046a6:	d101      	bne.n	80046ac <sbrk_aligned+0x38>
 80046a8:	f04f 34ff 	mov.w	r4, #4294967295
 80046ac:	4620      	mov	r0, r4
 80046ae:	bd70      	pop	{r4, r5, r6, pc}
 80046b0:	20000270 	.word	0x20000270

080046b4 <_malloc_r>:
 80046b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046b8:	1ccd      	adds	r5, r1, #3
 80046ba:	f025 0503 	bic.w	r5, r5, #3
 80046be:	3508      	adds	r5, #8
 80046c0:	2d0c      	cmp	r5, #12
 80046c2:	bf38      	it	cc
 80046c4:	250c      	movcc	r5, #12
 80046c6:	2d00      	cmp	r5, #0
 80046c8:	4607      	mov	r7, r0
 80046ca:	db01      	blt.n	80046d0 <_malloc_r+0x1c>
 80046cc:	42a9      	cmp	r1, r5
 80046ce:	d905      	bls.n	80046dc <_malloc_r+0x28>
 80046d0:	230c      	movs	r3, #12
 80046d2:	2600      	movs	r6, #0
 80046d4:	603b      	str	r3, [r7, #0]
 80046d6:	4630      	mov	r0, r6
 80046d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046dc:	4e2e      	ldr	r6, [pc, #184]	; (8004798 <_malloc_r+0xe4>)
 80046de:	f000 fc63 	bl	8004fa8 <__malloc_lock>
 80046e2:	6833      	ldr	r3, [r6, #0]
 80046e4:	461c      	mov	r4, r3
 80046e6:	bb34      	cbnz	r4, 8004736 <_malloc_r+0x82>
 80046e8:	4629      	mov	r1, r5
 80046ea:	4638      	mov	r0, r7
 80046ec:	f7ff ffc2 	bl	8004674 <sbrk_aligned>
 80046f0:	1c43      	adds	r3, r0, #1
 80046f2:	4604      	mov	r4, r0
 80046f4:	d14d      	bne.n	8004792 <_malloc_r+0xde>
 80046f6:	6834      	ldr	r4, [r6, #0]
 80046f8:	4626      	mov	r6, r4
 80046fa:	2e00      	cmp	r6, #0
 80046fc:	d140      	bne.n	8004780 <_malloc_r+0xcc>
 80046fe:	6823      	ldr	r3, [r4, #0]
 8004700:	4631      	mov	r1, r6
 8004702:	4638      	mov	r0, r7
 8004704:	eb04 0803 	add.w	r8, r4, r3
 8004708:	f000 f9a0 	bl	8004a4c <_sbrk_r>
 800470c:	4580      	cmp	r8, r0
 800470e:	d13a      	bne.n	8004786 <_malloc_r+0xd2>
 8004710:	6821      	ldr	r1, [r4, #0]
 8004712:	3503      	adds	r5, #3
 8004714:	1a6d      	subs	r5, r5, r1
 8004716:	f025 0503 	bic.w	r5, r5, #3
 800471a:	3508      	adds	r5, #8
 800471c:	2d0c      	cmp	r5, #12
 800471e:	bf38      	it	cc
 8004720:	250c      	movcc	r5, #12
 8004722:	4638      	mov	r0, r7
 8004724:	4629      	mov	r1, r5
 8004726:	f7ff ffa5 	bl	8004674 <sbrk_aligned>
 800472a:	3001      	adds	r0, #1
 800472c:	d02b      	beq.n	8004786 <_malloc_r+0xd2>
 800472e:	6823      	ldr	r3, [r4, #0]
 8004730:	442b      	add	r3, r5
 8004732:	6023      	str	r3, [r4, #0]
 8004734:	e00e      	b.n	8004754 <_malloc_r+0xa0>
 8004736:	6822      	ldr	r2, [r4, #0]
 8004738:	1b52      	subs	r2, r2, r5
 800473a:	d41e      	bmi.n	800477a <_malloc_r+0xc6>
 800473c:	2a0b      	cmp	r2, #11
 800473e:	d916      	bls.n	800476e <_malloc_r+0xba>
 8004740:	1961      	adds	r1, r4, r5
 8004742:	42a3      	cmp	r3, r4
 8004744:	6025      	str	r5, [r4, #0]
 8004746:	bf18      	it	ne
 8004748:	6059      	strne	r1, [r3, #4]
 800474a:	6863      	ldr	r3, [r4, #4]
 800474c:	bf08      	it	eq
 800474e:	6031      	streq	r1, [r6, #0]
 8004750:	5162      	str	r2, [r4, r5]
 8004752:	604b      	str	r3, [r1, #4]
 8004754:	4638      	mov	r0, r7
 8004756:	f104 060b 	add.w	r6, r4, #11
 800475a:	f000 fc2b 	bl	8004fb4 <__malloc_unlock>
 800475e:	f026 0607 	bic.w	r6, r6, #7
 8004762:	1d23      	adds	r3, r4, #4
 8004764:	1af2      	subs	r2, r6, r3
 8004766:	d0b6      	beq.n	80046d6 <_malloc_r+0x22>
 8004768:	1b9b      	subs	r3, r3, r6
 800476a:	50a3      	str	r3, [r4, r2]
 800476c:	e7b3      	b.n	80046d6 <_malloc_r+0x22>
 800476e:	6862      	ldr	r2, [r4, #4]
 8004770:	42a3      	cmp	r3, r4
 8004772:	bf0c      	ite	eq
 8004774:	6032      	streq	r2, [r6, #0]
 8004776:	605a      	strne	r2, [r3, #4]
 8004778:	e7ec      	b.n	8004754 <_malloc_r+0xa0>
 800477a:	4623      	mov	r3, r4
 800477c:	6864      	ldr	r4, [r4, #4]
 800477e:	e7b2      	b.n	80046e6 <_malloc_r+0x32>
 8004780:	4634      	mov	r4, r6
 8004782:	6876      	ldr	r6, [r6, #4]
 8004784:	e7b9      	b.n	80046fa <_malloc_r+0x46>
 8004786:	230c      	movs	r3, #12
 8004788:	4638      	mov	r0, r7
 800478a:	603b      	str	r3, [r7, #0]
 800478c:	f000 fc12 	bl	8004fb4 <__malloc_unlock>
 8004790:	e7a1      	b.n	80046d6 <_malloc_r+0x22>
 8004792:	6025      	str	r5, [r4, #0]
 8004794:	e7de      	b.n	8004754 <_malloc_r+0xa0>
 8004796:	bf00      	nop
 8004798:	2000026c 	.word	0x2000026c

0800479c <__sfputc_r>:
 800479c:	6893      	ldr	r3, [r2, #8]
 800479e:	b410      	push	{r4}
 80047a0:	3b01      	subs	r3, #1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	6093      	str	r3, [r2, #8]
 80047a6:	da07      	bge.n	80047b8 <__sfputc_r+0x1c>
 80047a8:	6994      	ldr	r4, [r2, #24]
 80047aa:	42a3      	cmp	r3, r4
 80047ac:	db01      	blt.n	80047b2 <__sfputc_r+0x16>
 80047ae:	290a      	cmp	r1, #10
 80047b0:	d102      	bne.n	80047b8 <__sfputc_r+0x1c>
 80047b2:	bc10      	pop	{r4}
 80047b4:	f000 b99e 	b.w	8004af4 <__swbuf_r>
 80047b8:	6813      	ldr	r3, [r2, #0]
 80047ba:	1c58      	adds	r0, r3, #1
 80047bc:	6010      	str	r0, [r2, #0]
 80047be:	7019      	strb	r1, [r3, #0]
 80047c0:	4608      	mov	r0, r1
 80047c2:	bc10      	pop	{r4}
 80047c4:	4770      	bx	lr

080047c6 <__sfputs_r>:
 80047c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c8:	4606      	mov	r6, r0
 80047ca:	460f      	mov	r7, r1
 80047cc:	4614      	mov	r4, r2
 80047ce:	18d5      	adds	r5, r2, r3
 80047d0:	42ac      	cmp	r4, r5
 80047d2:	d101      	bne.n	80047d8 <__sfputs_r+0x12>
 80047d4:	2000      	movs	r0, #0
 80047d6:	e007      	b.n	80047e8 <__sfputs_r+0x22>
 80047d8:	463a      	mov	r2, r7
 80047da:	4630      	mov	r0, r6
 80047dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047e0:	f7ff ffdc 	bl	800479c <__sfputc_r>
 80047e4:	1c43      	adds	r3, r0, #1
 80047e6:	d1f3      	bne.n	80047d0 <__sfputs_r+0xa>
 80047e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080047ec <_vfiprintf_r>:
 80047ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047f0:	460d      	mov	r5, r1
 80047f2:	4614      	mov	r4, r2
 80047f4:	4698      	mov	r8, r3
 80047f6:	4606      	mov	r6, r0
 80047f8:	b09d      	sub	sp, #116	; 0x74
 80047fa:	b118      	cbz	r0, 8004804 <_vfiprintf_r+0x18>
 80047fc:	6983      	ldr	r3, [r0, #24]
 80047fe:	b90b      	cbnz	r3, 8004804 <_vfiprintf_r+0x18>
 8004800:	f7ff fa90 	bl	8003d24 <__sinit>
 8004804:	4b89      	ldr	r3, [pc, #548]	; (8004a2c <_vfiprintf_r+0x240>)
 8004806:	429d      	cmp	r5, r3
 8004808:	d11b      	bne.n	8004842 <_vfiprintf_r+0x56>
 800480a:	6875      	ldr	r5, [r6, #4]
 800480c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800480e:	07d9      	lsls	r1, r3, #31
 8004810:	d405      	bmi.n	800481e <_vfiprintf_r+0x32>
 8004812:	89ab      	ldrh	r3, [r5, #12]
 8004814:	059a      	lsls	r2, r3, #22
 8004816:	d402      	bmi.n	800481e <_vfiprintf_r+0x32>
 8004818:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800481a:	f7ff fb26 	bl	8003e6a <__retarget_lock_acquire_recursive>
 800481e:	89ab      	ldrh	r3, [r5, #12]
 8004820:	071b      	lsls	r3, r3, #28
 8004822:	d501      	bpl.n	8004828 <_vfiprintf_r+0x3c>
 8004824:	692b      	ldr	r3, [r5, #16]
 8004826:	b9eb      	cbnz	r3, 8004864 <_vfiprintf_r+0x78>
 8004828:	4629      	mov	r1, r5
 800482a:	4630      	mov	r0, r6
 800482c:	f000 f9c6 	bl	8004bbc <__swsetup_r>
 8004830:	b1c0      	cbz	r0, 8004864 <_vfiprintf_r+0x78>
 8004832:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004834:	07dc      	lsls	r4, r3, #31
 8004836:	d50e      	bpl.n	8004856 <_vfiprintf_r+0x6a>
 8004838:	f04f 30ff 	mov.w	r0, #4294967295
 800483c:	b01d      	add	sp, #116	; 0x74
 800483e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004842:	4b7b      	ldr	r3, [pc, #492]	; (8004a30 <_vfiprintf_r+0x244>)
 8004844:	429d      	cmp	r5, r3
 8004846:	d101      	bne.n	800484c <_vfiprintf_r+0x60>
 8004848:	68b5      	ldr	r5, [r6, #8]
 800484a:	e7df      	b.n	800480c <_vfiprintf_r+0x20>
 800484c:	4b79      	ldr	r3, [pc, #484]	; (8004a34 <_vfiprintf_r+0x248>)
 800484e:	429d      	cmp	r5, r3
 8004850:	bf08      	it	eq
 8004852:	68f5      	ldreq	r5, [r6, #12]
 8004854:	e7da      	b.n	800480c <_vfiprintf_r+0x20>
 8004856:	89ab      	ldrh	r3, [r5, #12]
 8004858:	0598      	lsls	r0, r3, #22
 800485a:	d4ed      	bmi.n	8004838 <_vfiprintf_r+0x4c>
 800485c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800485e:	f7ff fb05 	bl	8003e6c <__retarget_lock_release_recursive>
 8004862:	e7e9      	b.n	8004838 <_vfiprintf_r+0x4c>
 8004864:	2300      	movs	r3, #0
 8004866:	9309      	str	r3, [sp, #36]	; 0x24
 8004868:	2320      	movs	r3, #32
 800486a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800486e:	2330      	movs	r3, #48	; 0x30
 8004870:	f04f 0901 	mov.w	r9, #1
 8004874:	f8cd 800c 	str.w	r8, [sp, #12]
 8004878:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004a38 <_vfiprintf_r+0x24c>
 800487c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004880:	4623      	mov	r3, r4
 8004882:	469a      	mov	sl, r3
 8004884:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004888:	b10a      	cbz	r2, 800488e <_vfiprintf_r+0xa2>
 800488a:	2a25      	cmp	r2, #37	; 0x25
 800488c:	d1f9      	bne.n	8004882 <_vfiprintf_r+0x96>
 800488e:	ebba 0b04 	subs.w	fp, sl, r4
 8004892:	d00b      	beq.n	80048ac <_vfiprintf_r+0xc0>
 8004894:	465b      	mov	r3, fp
 8004896:	4622      	mov	r2, r4
 8004898:	4629      	mov	r1, r5
 800489a:	4630      	mov	r0, r6
 800489c:	f7ff ff93 	bl	80047c6 <__sfputs_r>
 80048a0:	3001      	adds	r0, #1
 80048a2:	f000 80aa 	beq.w	80049fa <_vfiprintf_r+0x20e>
 80048a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048a8:	445a      	add	r2, fp
 80048aa:	9209      	str	r2, [sp, #36]	; 0x24
 80048ac:	f89a 3000 	ldrb.w	r3, [sl]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 80a2 	beq.w	80049fa <_vfiprintf_r+0x20e>
 80048b6:	2300      	movs	r3, #0
 80048b8:	f04f 32ff 	mov.w	r2, #4294967295
 80048bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048c0:	f10a 0a01 	add.w	sl, sl, #1
 80048c4:	9304      	str	r3, [sp, #16]
 80048c6:	9307      	str	r3, [sp, #28]
 80048c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048cc:	931a      	str	r3, [sp, #104]	; 0x68
 80048ce:	4654      	mov	r4, sl
 80048d0:	2205      	movs	r2, #5
 80048d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048d6:	4858      	ldr	r0, [pc, #352]	; (8004a38 <_vfiprintf_r+0x24c>)
 80048d8:	f7ff fad2 	bl	8003e80 <memchr>
 80048dc:	9a04      	ldr	r2, [sp, #16]
 80048de:	b9d8      	cbnz	r0, 8004918 <_vfiprintf_r+0x12c>
 80048e0:	06d1      	lsls	r1, r2, #27
 80048e2:	bf44      	itt	mi
 80048e4:	2320      	movmi	r3, #32
 80048e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048ea:	0713      	lsls	r3, r2, #28
 80048ec:	bf44      	itt	mi
 80048ee:	232b      	movmi	r3, #43	; 0x2b
 80048f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048f4:	f89a 3000 	ldrb.w	r3, [sl]
 80048f8:	2b2a      	cmp	r3, #42	; 0x2a
 80048fa:	d015      	beq.n	8004928 <_vfiprintf_r+0x13c>
 80048fc:	4654      	mov	r4, sl
 80048fe:	2000      	movs	r0, #0
 8004900:	f04f 0c0a 	mov.w	ip, #10
 8004904:	9a07      	ldr	r2, [sp, #28]
 8004906:	4621      	mov	r1, r4
 8004908:	f811 3b01 	ldrb.w	r3, [r1], #1
 800490c:	3b30      	subs	r3, #48	; 0x30
 800490e:	2b09      	cmp	r3, #9
 8004910:	d94e      	bls.n	80049b0 <_vfiprintf_r+0x1c4>
 8004912:	b1b0      	cbz	r0, 8004942 <_vfiprintf_r+0x156>
 8004914:	9207      	str	r2, [sp, #28]
 8004916:	e014      	b.n	8004942 <_vfiprintf_r+0x156>
 8004918:	eba0 0308 	sub.w	r3, r0, r8
 800491c:	fa09 f303 	lsl.w	r3, r9, r3
 8004920:	4313      	orrs	r3, r2
 8004922:	46a2      	mov	sl, r4
 8004924:	9304      	str	r3, [sp, #16]
 8004926:	e7d2      	b.n	80048ce <_vfiprintf_r+0xe2>
 8004928:	9b03      	ldr	r3, [sp, #12]
 800492a:	1d19      	adds	r1, r3, #4
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	9103      	str	r1, [sp, #12]
 8004930:	2b00      	cmp	r3, #0
 8004932:	bfbb      	ittet	lt
 8004934:	425b      	neglt	r3, r3
 8004936:	f042 0202 	orrlt.w	r2, r2, #2
 800493a:	9307      	strge	r3, [sp, #28]
 800493c:	9307      	strlt	r3, [sp, #28]
 800493e:	bfb8      	it	lt
 8004940:	9204      	strlt	r2, [sp, #16]
 8004942:	7823      	ldrb	r3, [r4, #0]
 8004944:	2b2e      	cmp	r3, #46	; 0x2e
 8004946:	d10c      	bne.n	8004962 <_vfiprintf_r+0x176>
 8004948:	7863      	ldrb	r3, [r4, #1]
 800494a:	2b2a      	cmp	r3, #42	; 0x2a
 800494c:	d135      	bne.n	80049ba <_vfiprintf_r+0x1ce>
 800494e:	9b03      	ldr	r3, [sp, #12]
 8004950:	3402      	adds	r4, #2
 8004952:	1d1a      	adds	r2, r3, #4
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	9203      	str	r2, [sp, #12]
 8004958:	2b00      	cmp	r3, #0
 800495a:	bfb8      	it	lt
 800495c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004960:	9305      	str	r3, [sp, #20]
 8004962:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004a3c <_vfiprintf_r+0x250>
 8004966:	2203      	movs	r2, #3
 8004968:	4650      	mov	r0, sl
 800496a:	7821      	ldrb	r1, [r4, #0]
 800496c:	f7ff fa88 	bl	8003e80 <memchr>
 8004970:	b140      	cbz	r0, 8004984 <_vfiprintf_r+0x198>
 8004972:	2340      	movs	r3, #64	; 0x40
 8004974:	eba0 000a 	sub.w	r0, r0, sl
 8004978:	fa03 f000 	lsl.w	r0, r3, r0
 800497c:	9b04      	ldr	r3, [sp, #16]
 800497e:	3401      	adds	r4, #1
 8004980:	4303      	orrs	r3, r0
 8004982:	9304      	str	r3, [sp, #16]
 8004984:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004988:	2206      	movs	r2, #6
 800498a:	482d      	ldr	r0, [pc, #180]	; (8004a40 <_vfiprintf_r+0x254>)
 800498c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004990:	f7ff fa76 	bl	8003e80 <memchr>
 8004994:	2800      	cmp	r0, #0
 8004996:	d03f      	beq.n	8004a18 <_vfiprintf_r+0x22c>
 8004998:	4b2a      	ldr	r3, [pc, #168]	; (8004a44 <_vfiprintf_r+0x258>)
 800499a:	bb1b      	cbnz	r3, 80049e4 <_vfiprintf_r+0x1f8>
 800499c:	9b03      	ldr	r3, [sp, #12]
 800499e:	3307      	adds	r3, #7
 80049a0:	f023 0307 	bic.w	r3, r3, #7
 80049a4:	3308      	adds	r3, #8
 80049a6:	9303      	str	r3, [sp, #12]
 80049a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049aa:	443b      	add	r3, r7
 80049ac:	9309      	str	r3, [sp, #36]	; 0x24
 80049ae:	e767      	b.n	8004880 <_vfiprintf_r+0x94>
 80049b0:	460c      	mov	r4, r1
 80049b2:	2001      	movs	r0, #1
 80049b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80049b8:	e7a5      	b.n	8004906 <_vfiprintf_r+0x11a>
 80049ba:	2300      	movs	r3, #0
 80049bc:	f04f 0c0a 	mov.w	ip, #10
 80049c0:	4619      	mov	r1, r3
 80049c2:	3401      	adds	r4, #1
 80049c4:	9305      	str	r3, [sp, #20]
 80049c6:	4620      	mov	r0, r4
 80049c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049cc:	3a30      	subs	r2, #48	; 0x30
 80049ce:	2a09      	cmp	r2, #9
 80049d0:	d903      	bls.n	80049da <_vfiprintf_r+0x1ee>
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d0c5      	beq.n	8004962 <_vfiprintf_r+0x176>
 80049d6:	9105      	str	r1, [sp, #20]
 80049d8:	e7c3      	b.n	8004962 <_vfiprintf_r+0x176>
 80049da:	4604      	mov	r4, r0
 80049dc:	2301      	movs	r3, #1
 80049de:	fb0c 2101 	mla	r1, ip, r1, r2
 80049e2:	e7f0      	b.n	80049c6 <_vfiprintf_r+0x1da>
 80049e4:	ab03      	add	r3, sp, #12
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	462a      	mov	r2, r5
 80049ea:	4630      	mov	r0, r6
 80049ec:	4b16      	ldr	r3, [pc, #88]	; (8004a48 <_vfiprintf_r+0x25c>)
 80049ee:	a904      	add	r1, sp, #16
 80049f0:	f7fd feea 	bl	80027c8 <_printf_float>
 80049f4:	4607      	mov	r7, r0
 80049f6:	1c78      	adds	r0, r7, #1
 80049f8:	d1d6      	bne.n	80049a8 <_vfiprintf_r+0x1bc>
 80049fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049fc:	07d9      	lsls	r1, r3, #31
 80049fe:	d405      	bmi.n	8004a0c <_vfiprintf_r+0x220>
 8004a00:	89ab      	ldrh	r3, [r5, #12]
 8004a02:	059a      	lsls	r2, r3, #22
 8004a04:	d402      	bmi.n	8004a0c <_vfiprintf_r+0x220>
 8004a06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a08:	f7ff fa30 	bl	8003e6c <__retarget_lock_release_recursive>
 8004a0c:	89ab      	ldrh	r3, [r5, #12]
 8004a0e:	065b      	lsls	r3, r3, #25
 8004a10:	f53f af12 	bmi.w	8004838 <_vfiprintf_r+0x4c>
 8004a14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a16:	e711      	b.n	800483c <_vfiprintf_r+0x50>
 8004a18:	ab03      	add	r3, sp, #12
 8004a1a:	9300      	str	r3, [sp, #0]
 8004a1c:	462a      	mov	r2, r5
 8004a1e:	4630      	mov	r0, r6
 8004a20:	4b09      	ldr	r3, [pc, #36]	; (8004a48 <_vfiprintf_r+0x25c>)
 8004a22:	a904      	add	r1, sp, #16
 8004a24:	f7fe f96c 	bl	8002d00 <_printf_i>
 8004a28:	e7e4      	b.n	80049f4 <_vfiprintf_r+0x208>
 8004a2a:	bf00      	nop
 8004a2c:	08005218 	.word	0x08005218
 8004a30:	08005238 	.word	0x08005238
 8004a34:	080051f8 	.word	0x080051f8
 8004a38:	080053b4 	.word	0x080053b4
 8004a3c:	080053ba 	.word	0x080053ba
 8004a40:	080053be 	.word	0x080053be
 8004a44:	080027c9 	.word	0x080027c9
 8004a48:	080047c7 	.word	0x080047c7

08004a4c <_sbrk_r>:
 8004a4c:	b538      	push	{r3, r4, r5, lr}
 8004a4e:	2300      	movs	r3, #0
 8004a50:	4d05      	ldr	r5, [pc, #20]	; (8004a68 <_sbrk_r+0x1c>)
 8004a52:	4604      	mov	r4, r0
 8004a54:	4608      	mov	r0, r1
 8004a56:	602b      	str	r3, [r5, #0]
 8004a58:	f7fc fa84 	bl	8000f64 <_sbrk>
 8004a5c:	1c43      	adds	r3, r0, #1
 8004a5e:	d102      	bne.n	8004a66 <_sbrk_r+0x1a>
 8004a60:	682b      	ldr	r3, [r5, #0]
 8004a62:	b103      	cbz	r3, 8004a66 <_sbrk_r+0x1a>
 8004a64:	6023      	str	r3, [r4, #0]
 8004a66:	bd38      	pop	{r3, r4, r5, pc}
 8004a68:	20000274 	.word	0x20000274

08004a6c <__sread>:
 8004a6c:	b510      	push	{r4, lr}
 8004a6e:	460c      	mov	r4, r1
 8004a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a74:	f000 faa4 	bl	8004fc0 <_read_r>
 8004a78:	2800      	cmp	r0, #0
 8004a7a:	bfab      	itete	ge
 8004a7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a7e:	89a3      	ldrhlt	r3, [r4, #12]
 8004a80:	181b      	addge	r3, r3, r0
 8004a82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a86:	bfac      	ite	ge
 8004a88:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a8a:	81a3      	strhlt	r3, [r4, #12]
 8004a8c:	bd10      	pop	{r4, pc}

08004a8e <__swrite>:
 8004a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a92:	461f      	mov	r7, r3
 8004a94:	898b      	ldrh	r3, [r1, #12]
 8004a96:	4605      	mov	r5, r0
 8004a98:	05db      	lsls	r3, r3, #23
 8004a9a:	460c      	mov	r4, r1
 8004a9c:	4616      	mov	r6, r2
 8004a9e:	d505      	bpl.n	8004aac <__swrite+0x1e>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aa8:	f000 f9f4 	bl	8004e94 <_lseek_r>
 8004aac:	89a3      	ldrh	r3, [r4, #12]
 8004aae:	4632      	mov	r2, r6
 8004ab0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ab4:	81a3      	strh	r3, [r4, #12]
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	463b      	mov	r3, r7
 8004aba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004abe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ac2:	f000 b869 	b.w	8004b98 <_write_r>

08004ac6 <__sseek>:
 8004ac6:	b510      	push	{r4, lr}
 8004ac8:	460c      	mov	r4, r1
 8004aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ace:	f000 f9e1 	bl	8004e94 <_lseek_r>
 8004ad2:	1c43      	adds	r3, r0, #1
 8004ad4:	89a3      	ldrh	r3, [r4, #12]
 8004ad6:	bf15      	itete	ne
 8004ad8:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ada:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ade:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ae2:	81a3      	strheq	r3, [r4, #12]
 8004ae4:	bf18      	it	ne
 8004ae6:	81a3      	strhne	r3, [r4, #12]
 8004ae8:	bd10      	pop	{r4, pc}

08004aea <__sclose>:
 8004aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aee:	f000 b8f1 	b.w	8004cd4 <_close_r>
	...

08004af4 <__swbuf_r>:
 8004af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af6:	460e      	mov	r6, r1
 8004af8:	4614      	mov	r4, r2
 8004afa:	4605      	mov	r5, r0
 8004afc:	b118      	cbz	r0, 8004b06 <__swbuf_r+0x12>
 8004afe:	6983      	ldr	r3, [r0, #24]
 8004b00:	b90b      	cbnz	r3, 8004b06 <__swbuf_r+0x12>
 8004b02:	f7ff f90f 	bl	8003d24 <__sinit>
 8004b06:	4b21      	ldr	r3, [pc, #132]	; (8004b8c <__swbuf_r+0x98>)
 8004b08:	429c      	cmp	r4, r3
 8004b0a:	d12b      	bne.n	8004b64 <__swbuf_r+0x70>
 8004b0c:	686c      	ldr	r4, [r5, #4]
 8004b0e:	69a3      	ldr	r3, [r4, #24]
 8004b10:	60a3      	str	r3, [r4, #8]
 8004b12:	89a3      	ldrh	r3, [r4, #12]
 8004b14:	071a      	lsls	r2, r3, #28
 8004b16:	d52f      	bpl.n	8004b78 <__swbuf_r+0x84>
 8004b18:	6923      	ldr	r3, [r4, #16]
 8004b1a:	b36b      	cbz	r3, 8004b78 <__swbuf_r+0x84>
 8004b1c:	6923      	ldr	r3, [r4, #16]
 8004b1e:	6820      	ldr	r0, [r4, #0]
 8004b20:	b2f6      	uxtb	r6, r6
 8004b22:	1ac0      	subs	r0, r0, r3
 8004b24:	6963      	ldr	r3, [r4, #20]
 8004b26:	4637      	mov	r7, r6
 8004b28:	4283      	cmp	r3, r0
 8004b2a:	dc04      	bgt.n	8004b36 <__swbuf_r+0x42>
 8004b2c:	4621      	mov	r1, r4
 8004b2e:	4628      	mov	r0, r5
 8004b30:	f000 f962 	bl	8004df8 <_fflush_r>
 8004b34:	bb30      	cbnz	r0, 8004b84 <__swbuf_r+0x90>
 8004b36:	68a3      	ldr	r3, [r4, #8]
 8004b38:	3001      	adds	r0, #1
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	60a3      	str	r3, [r4, #8]
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	1c5a      	adds	r2, r3, #1
 8004b42:	6022      	str	r2, [r4, #0]
 8004b44:	701e      	strb	r6, [r3, #0]
 8004b46:	6963      	ldr	r3, [r4, #20]
 8004b48:	4283      	cmp	r3, r0
 8004b4a:	d004      	beq.n	8004b56 <__swbuf_r+0x62>
 8004b4c:	89a3      	ldrh	r3, [r4, #12]
 8004b4e:	07db      	lsls	r3, r3, #31
 8004b50:	d506      	bpl.n	8004b60 <__swbuf_r+0x6c>
 8004b52:	2e0a      	cmp	r6, #10
 8004b54:	d104      	bne.n	8004b60 <__swbuf_r+0x6c>
 8004b56:	4621      	mov	r1, r4
 8004b58:	4628      	mov	r0, r5
 8004b5a:	f000 f94d 	bl	8004df8 <_fflush_r>
 8004b5e:	b988      	cbnz	r0, 8004b84 <__swbuf_r+0x90>
 8004b60:	4638      	mov	r0, r7
 8004b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b64:	4b0a      	ldr	r3, [pc, #40]	; (8004b90 <__swbuf_r+0x9c>)
 8004b66:	429c      	cmp	r4, r3
 8004b68:	d101      	bne.n	8004b6e <__swbuf_r+0x7a>
 8004b6a:	68ac      	ldr	r4, [r5, #8]
 8004b6c:	e7cf      	b.n	8004b0e <__swbuf_r+0x1a>
 8004b6e:	4b09      	ldr	r3, [pc, #36]	; (8004b94 <__swbuf_r+0xa0>)
 8004b70:	429c      	cmp	r4, r3
 8004b72:	bf08      	it	eq
 8004b74:	68ec      	ldreq	r4, [r5, #12]
 8004b76:	e7ca      	b.n	8004b0e <__swbuf_r+0x1a>
 8004b78:	4621      	mov	r1, r4
 8004b7a:	4628      	mov	r0, r5
 8004b7c:	f000 f81e 	bl	8004bbc <__swsetup_r>
 8004b80:	2800      	cmp	r0, #0
 8004b82:	d0cb      	beq.n	8004b1c <__swbuf_r+0x28>
 8004b84:	f04f 37ff 	mov.w	r7, #4294967295
 8004b88:	e7ea      	b.n	8004b60 <__swbuf_r+0x6c>
 8004b8a:	bf00      	nop
 8004b8c:	08005218 	.word	0x08005218
 8004b90:	08005238 	.word	0x08005238
 8004b94:	080051f8 	.word	0x080051f8

08004b98 <_write_r>:
 8004b98:	b538      	push	{r3, r4, r5, lr}
 8004b9a:	4604      	mov	r4, r0
 8004b9c:	4608      	mov	r0, r1
 8004b9e:	4611      	mov	r1, r2
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	4d05      	ldr	r5, [pc, #20]	; (8004bb8 <_write_r+0x20>)
 8004ba4:	602a      	str	r2, [r5, #0]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	f7fc f98f 	bl	8000eca <_write>
 8004bac:	1c43      	adds	r3, r0, #1
 8004bae:	d102      	bne.n	8004bb6 <_write_r+0x1e>
 8004bb0:	682b      	ldr	r3, [r5, #0]
 8004bb2:	b103      	cbz	r3, 8004bb6 <_write_r+0x1e>
 8004bb4:	6023      	str	r3, [r4, #0]
 8004bb6:	bd38      	pop	{r3, r4, r5, pc}
 8004bb8:	20000274 	.word	0x20000274

08004bbc <__swsetup_r>:
 8004bbc:	4b32      	ldr	r3, [pc, #200]	; (8004c88 <__swsetup_r+0xcc>)
 8004bbe:	b570      	push	{r4, r5, r6, lr}
 8004bc0:	681d      	ldr	r5, [r3, #0]
 8004bc2:	4606      	mov	r6, r0
 8004bc4:	460c      	mov	r4, r1
 8004bc6:	b125      	cbz	r5, 8004bd2 <__swsetup_r+0x16>
 8004bc8:	69ab      	ldr	r3, [r5, #24]
 8004bca:	b913      	cbnz	r3, 8004bd2 <__swsetup_r+0x16>
 8004bcc:	4628      	mov	r0, r5
 8004bce:	f7ff f8a9 	bl	8003d24 <__sinit>
 8004bd2:	4b2e      	ldr	r3, [pc, #184]	; (8004c8c <__swsetup_r+0xd0>)
 8004bd4:	429c      	cmp	r4, r3
 8004bd6:	d10f      	bne.n	8004bf8 <__swsetup_r+0x3c>
 8004bd8:	686c      	ldr	r4, [r5, #4]
 8004bda:	89a3      	ldrh	r3, [r4, #12]
 8004bdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004be0:	0719      	lsls	r1, r3, #28
 8004be2:	d42c      	bmi.n	8004c3e <__swsetup_r+0x82>
 8004be4:	06dd      	lsls	r5, r3, #27
 8004be6:	d411      	bmi.n	8004c0c <__swsetup_r+0x50>
 8004be8:	2309      	movs	r3, #9
 8004bea:	6033      	str	r3, [r6, #0]
 8004bec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf4:	81a3      	strh	r3, [r4, #12]
 8004bf6:	e03e      	b.n	8004c76 <__swsetup_r+0xba>
 8004bf8:	4b25      	ldr	r3, [pc, #148]	; (8004c90 <__swsetup_r+0xd4>)
 8004bfa:	429c      	cmp	r4, r3
 8004bfc:	d101      	bne.n	8004c02 <__swsetup_r+0x46>
 8004bfe:	68ac      	ldr	r4, [r5, #8]
 8004c00:	e7eb      	b.n	8004bda <__swsetup_r+0x1e>
 8004c02:	4b24      	ldr	r3, [pc, #144]	; (8004c94 <__swsetup_r+0xd8>)
 8004c04:	429c      	cmp	r4, r3
 8004c06:	bf08      	it	eq
 8004c08:	68ec      	ldreq	r4, [r5, #12]
 8004c0a:	e7e6      	b.n	8004bda <__swsetup_r+0x1e>
 8004c0c:	0758      	lsls	r0, r3, #29
 8004c0e:	d512      	bpl.n	8004c36 <__swsetup_r+0x7a>
 8004c10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c12:	b141      	cbz	r1, 8004c26 <__swsetup_r+0x6a>
 8004c14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c18:	4299      	cmp	r1, r3
 8004c1a:	d002      	beq.n	8004c22 <__swsetup_r+0x66>
 8004c1c:	4630      	mov	r0, r6
 8004c1e:	f7ff fce1 	bl	80045e4 <_free_r>
 8004c22:	2300      	movs	r3, #0
 8004c24:	6363      	str	r3, [r4, #52]	; 0x34
 8004c26:	89a3      	ldrh	r3, [r4, #12]
 8004c28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c2c:	81a3      	strh	r3, [r4, #12]
 8004c2e:	2300      	movs	r3, #0
 8004c30:	6063      	str	r3, [r4, #4]
 8004c32:	6923      	ldr	r3, [r4, #16]
 8004c34:	6023      	str	r3, [r4, #0]
 8004c36:	89a3      	ldrh	r3, [r4, #12]
 8004c38:	f043 0308 	orr.w	r3, r3, #8
 8004c3c:	81a3      	strh	r3, [r4, #12]
 8004c3e:	6923      	ldr	r3, [r4, #16]
 8004c40:	b94b      	cbnz	r3, 8004c56 <__swsetup_r+0x9a>
 8004c42:	89a3      	ldrh	r3, [r4, #12]
 8004c44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c4c:	d003      	beq.n	8004c56 <__swsetup_r+0x9a>
 8004c4e:	4621      	mov	r1, r4
 8004c50:	4630      	mov	r0, r6
 8004c52:	f000 f957 	bl	8004f04 <__smakebuf_r>
 8004c56:	89a0      	ldrh	r0, [r4, #12]
 8004c58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c5c:	f010 0301 	ands.w	r3, r0, #1
 8004c60:	d00a      	beq.n	8004c78 <__swsetup_r+0xbc>
 8004c62:	2300      	movs	r3, #0
 8004c64:	60a3      	str	r3, [r4, #8]
 8004c66:	6963      	ldr	r3, [r4, #20]
 8004c68:	425b      	negs	r3, r3
 8004c6a:	61a3      	str	r3, [r4, #24]
 8004c6c:	6923      	ldr	r3, [r4, #16]
 8004c6e:	b943      	cbnz	r3, 8004c82 <__swsetup_r+0xc6>
 8004c70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c74:	d1ba      	bne.n	8004bec <__swsetup_r+0x30>
 8004c76:	bd70      	pop	{r4, r5, r6, pc}
 8004c78:	0781      	lsls	r1, r0, #30
 8004c7a:	bf58      	it	pl
 8004c7c:	6963      	ldrpl	r3, [r4, #20]
 8004c7e:	60a3      	str	r3, [r4, #8]
 8004c80:	e7f4      	b.n	8004c6c <__swsetup_r+0xb0>
 8004c82:	2000      	movs	r0, #0
 8004c84:	e7f7      	b.n	8004c76 <__swsetup_r+0xba>
 8004c86:	bf00      	nop
 8004c88:	2000000c 	.word	0x2000000c
 8004c8c:	08005218 	.word	0x08005218
 8004c90:	08005238 	.word	0x08005238
 8004c94:	080051f8 	.word	0x080051f8

08004c98 <__assert_func>:
 8004c98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004c9a:	4614      	mov	r4, r2
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	4b09      	ldr	r3, [pc, #36]	; (8004cc4 <__assert_func+0x2c>)
 8004ca0:	4605      	mov	r5, r0
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68d8      	ldr	r0, [r3, #12]
 8004ca6:	b14c      	cbz	r4, 8004cbc <__assert_func+0x24>
 8004ca8:	4b07      	ldr	r3, [pc, #28]	; (8004cc8 <__assert_func+0x30>)
 8004caa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004cae:	9100      	str	r1, [sp, #0]
 8004cb0:	462b      	mov	r3, r5
 8004cb2:	4906      	ldr	r1, [pc, #24]	; (8004ccc <__assert_func+0x34>)
 8004cb4:	f000 f8dc 	bl	8004e70 <fiprintf>
 8004cb8:	f000 f9a1 	bl	8004ffe <abort>
 8004cbc:	4b04      	ldr	r3, [pc, #16]	; (8004cd0 <__assert_func+0x38>)
 8004cbe:	461c      	mov	r4, r3
 8004cc0:	e7f3      	b.n	8004caa <__assert_func+0x12>
 8004cc2:	bf00      	nop
 8004cc4:	2000000c 	.word	0x2000000c
 8004cc8:	080053c5 	.word	0x080053c5
 8004ccc:	080053d2 	.word	0x080053d2
 8004cd0:	08005400 	.word	0x08005400

08004cd4 <_close_r>:
 8004cd4:	b538      	push	{r3, r4, r5, lr}
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	4d05      	ldr	r5, [pc, #20]	; (8004cf0 <_close_r+0x1c>)
 8004cda:	4604      	mov	r4, r0
 8004cdc:	4608      	mov	r0, r1
 8004cde:	602b      	str	r3, [r5, #0]
 8004ce0:	f7fc f90f 	bl	8000f02 <_close>
 8004ce4:	1c43      	adds	r3, r0, #1
 8004ce6:	d102      	bne.n	8004cee <_close_r+0x1a>
 8004ce8:	682b      	ldr	r3, [r5, #0]
 8004cea:	b103      	cbz	r3, 8004cee <_close_r+0x1a>
 8004cec:	6023      	str	r3, [r4, #0]
 8004cee:	bd38      	pop	{r3, r4, r5, pc}
 8004cf0:	20000274 	.word	0x20000274

08004cf4 <__sflush_r>:
 8004cf4:	898a      	ldrh	r2, [r1, #12]
 8004cf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf8:	4605      	mov	r5, r0
 8004cfa:	0710      	lsls	r0, r2, #28
 8004cfc:	460c      	mov	r4, r1
 8004cfe:	d457      	bmi.n	8004db0 <__sflush_r+0xbc>
 8004d00:	684b      	ldr	r3, [r1, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	dc04      	bgt.n	8004d10 <__sflush_r+0x1c>
 8004d06:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	dc01      	bgt.n	8004d10 <__sflush_r+0x1c>
 8004d0c:	2000      	movs	r0, #0
 8004d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d12:	2e00      	cmp	r6, #0
 8004d14:	d0fa      	beq.n	8004d0c <__sflush_r+0x18>
 8004d16:	2300      	movs	r3, #0
 8004d18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d1c:	682f      	ldr	r7, [r5, #0]
 8004d1e:	602b      	str	r3, [r5, #0]
 8004d20:	d032      	beq.n	8004d88 <__sflush_r+0x94>
 8004d22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d24:	89a3      	ldrh	r3, [r4, #12]
 8004d26:	075a      	lsls	r2, r3, #29
 8004d28:	d505      	bpl.n	8004d36 <__sflush_r+0x42>
 8004d2a:	6863      	ldr	r3, [r4, #4]
 8004d2c:	1ac0      	subs	r0, r0, r3
 8004d2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d30:	b10b      	cbz	r3, 8004d36 <__sflush_r+0x42>
 8004d32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d34:	1ac0      	subs	r0, r0, r3
 8004d36:	2300      	movs	r3, #0
 8004d38:	4602      	mov	r2, r0
 8004d3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d3c:	4628      	mov	r0, r5
 8004d3e:	6a21      	ldr	r1, [r4, #32]
 8004d40:	47b0      	blx	r6
 8004d42:	1c43      	adds	r3, r0, #1
 8004d44:	89a3      	ldrh	r3, [r4, #12]
 8004d46:	d106      	bne.n	8004d56 <__sflush_r+0x62>
 8004d48:	6829      	ldr	r1, [r5, #0]
 8004d4a:	291d      	cmp	r1, #29
 8004d4c:	d82c      	bhi.n	8004da8 <__sflush_r+0xb4>
 8004d4e:	4a29      	ldr	r2, [pc, #164]	; (8004df4 <__sflush_r+0x100>)
 8004d50:	40ca      	lsrs	r2, r1
 8004d52:	07d6      	lsls	r6, r2, #31
 8004d54:	d528      	bpl.n	8004da8 <__sflush_r+0xb4>
 8004d56:	2200      	movs	r2, #0
 8004d58:	6062      	str	r2, [r4, #4]
 8004d5a:	6922      	ldr	r2, [r4, #16]
 8004d5c:	04d9      	lsls	r1, r3, #19
 8004d5e:	6022      	str	r2, [r4, #0]
 8004d60:	d504      	bpl.n	8004d6c <__sflush_r+0x78>
 8004d62:	1c42      	adds	r2, r0, #1
 8004d64:	d101      	bne.n	8004d6a <__sflush_r+0x76>
 8004d66:	682b      	ldr	r3, [r5, #0]
 8004d68:	b903      	cbnz	r3, 8004d6c <__sflush_r+0x78>
 8004d6a:	6560      	str	r0, [r4, #84]	; 0x54
 8004d6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d6e:	602f      	str	r7, [r5, #0]
 8004d70:	2900      	cmp	r1, #0
 8004d72:	d0cb      	beq.n	8004d0c <__sflush_r+0x18>
 8004d74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d78:	4299      	cmp	r1, r3
 8004d7a:	d002      	beq.n	8004d82 <__sflush_r+0x8e>
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	f7ff fc31 	bl	80045e4 <_free_r>
 8004d82:	2000      	movs	r0, #0
 8004d84:	6360      	str	r0, [r4, #52]	; 0x34
 8004d86:	e7c2      	b.n	8004d0e <__sflush_r+0x1a>
 8004d88:	6a21      	ldr	r1, [r4, #32]
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	4628      	mov	r0, r5
 8004d8e:	47b0      	blx	r6
 8004d90:	1c41      	adds	r1, r0, #1
 8004d92:	d1c7      	bne.n	8004d24 <__sflush_r+0x30>
 8004d94:	682b      	ldr	r3, [r5, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0c4      	beq.n	8004d24 <__sflush_r+0x30>
 8004d9a:	2b1d      	cmp	r3, #29
 8004d9c:	d001      	beq.n	8004da2 <__sflush_r+0xae>
 8004d9e:	2b16      	cmp	r3, #22
 8004da0:	d101      	bne.n	8004da6 <__sflush_r+0xb2>
 8004da2:	602f      	str	r7, [r5, #0]
 8004da4:	e7b2      	b.n	8004d0c <__sflush_r+0x18>
 8004da6:	89a3      	ldrh	r3, [r4, #12]
 8004da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dac:	81a3      	strh	r3, [r4, #12]
 8004dae:	e7ae      	b.n	8004d0e <__sflush_r+0x1a>
 8004db0:	690f      	ldr	r7, [r1, #16]
 8004db2:	2f00      	cmp	r7, #0
 8004db4:	d0aa      	beq.n	8004d0c <__sflush_r+0x18>
 8004db6:	0793      	lsls	r3, r2, #30
 8004db8:	bf18      	it	ne
 8004dba:	2300      	movne	r3, #0
 8004dbc:	680e      	ldr	r6, [r1, #0]
 8004dbe:	bf08      	it	eq
 8004dc0:	694b      	ldreq	r3, [r1, #20]
 8004dc2:	1bf6      	subs	r6, r6, r7
 8004dc4:	600f      	str	r7, [r1, #0]
 8004dc6:	608b      	str	r3, [r1, #8]
 8004dc8:	2e00      	cmp	r6, #0
 8004dca:	dd9f      	ble.n	8004d0c <__sflush_r+0x18>
 8004dcc:	4633      	mov	r3, r6
 8004dce:	463a      	mov	r2, r7
 8004dd0:	4628      	mov	r0, r5
 8004dd2:	6a21      	ldr	r1, [r4, #32]
 8004dd4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004dd8:	47e0      	blx	ip
 8004dda:	2800      	cmp	r0, #0
 8004ddc:	dc06      	bgt.n	8004dec <__sflush_r+0xf8>
 8004dde:	89a3      	ldrh	r3, [r4, #12]
 8004de0:	f04f 30ff 	mov.w	r0, #4294967295
 8004de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004de8:	81a3      	strh	r3, [r4, #12]
 8004dea:	e790      	b.n	8004d0e <__sflush_r+0x1a>
 8004dec:	4407      	add	r7, r0
 8004dee:	1a36      	subs	r6, r6, r0
 8004df0:	e7ea      	b.n	8004dc8 <__sflush_r+0xd4>
 8004df2:	bf00      	nop
 8004df4:	20400001 	.word	0x20400001

08004df8 <_fflush_r>:
 8004df8:	b538      	push	{r3, r4, r5, lr}
 8004dfa:	690b      	ldr	r3, [r1, #16]
 8004dfc:	4605      	mov	r5, r0
 8004dfe:	460c      	mov	r4, r1
 8004e00:	b913      	cbnz	r3, 8004e08 <_fflush_r+0x10>
 8004e02:	2500      	movs	r5, #0
 8004e04:	4628      	mov	r0, r5
 8004e06:	bd38      	pop	{r3, r4, r5, pc}
 8004e08:	b118      	cbz	r0, 8004e12 <_fflush_r+0x1a>
 8004e0a:	6983      	ldr	r3, [r0, #24]
 8004e0c:	b90b      	cbnz	r3, 8004e12 <_fflush_r+0x1a>
 8004e0e:	f7fe ff89 	bl	8003d24 <__sinit>
 8004e12:	4b14      	ldr	r3, [pc, #80]	; (8004e64 <_fflush_r+0x6c>)
 8004e14:	429c      	cmp	r4, r3
 8004e16:	d11b      	bne.n	8004e50 <_fflush_r+0x58>
 8004e18:	686c      	ldr	r4, [r5, #4]
 8004e1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d0ef      	beq.n	8004e02 <_fflush_r+0xa>
 8004e22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004e24:	07d0      	lsls	r0, r2, #31
 8004e26:	d404      	bmi.n	8004e32 <_fflush_r+0x3a>
 8004e28:	0599      	lsls	r1, r3, #22
 8004e2a:	d402      	bmi.n	8004e32 <_fflush_r+0x3a>
 8004e2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e2e:	f7ff f81c 	bl	8003e6a <__retarget_lock_acquire_recursive>
 8004e32:	4628      	mov	r0, r5
 8004e34:	4621      	mov	r1, r4
 8004e36:	f7ff ff5d 	bl	8004cf4 <__sflush_r>
 8004e3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e3c:	4605      	mov	r5, r0
 8004e3e:	07da      	lsls	r2, r3, #31
 8004e40:	d4e0      	bmi.n	8004e04 <_fflush_r+0xc>
 8004e42:	89a3      	ldrh	r3, [r4, #12]
 8004e44:	059b      	lsls	r3, r3, #22
 8004e46:	d4dd      	bmi.n	8004e04 <_fflush_r+0xc>
 8004e48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e4a:	f7ff f80f 	bl	8003e6c <__retarget_lock_release_recursive>
 8004e4e:	e7d9      	b.n	8004e04 <_fflush_r+0xc>
 8004e50:	4b05      	ldr	r3, [pc, #20]	; (8004e68 <_fflush_r+0x70>)
 8004e52:	429c      	cmp	r4, r3
 8004e54:	d101      	bne.n	8004e5a <_fflush_r+0x62>
 8004e56:	68ac      	ldr	r4, [r5, #8]
 8004e58:	e7df      	b.n	8004e1a <_fflush_r+0x22>
 8004e5a:	4b04      	ldr	r3, [pc, #16]	; (8004e6c <_fflush_r+0x74>)
 8004e5c:	429c      	cmp	r4, r3
 8004e5e:	bf08      	it	eq
 8004e60:	68ec      	ldreq	r4, [r5, #12]
 8004e62:	e7da      	b.n	8004e1a <_fflush_r+0x22>
 8004e64:	08005218 	.word	0x08005218
 8004e68:	08005238 	.word	0x08005238
 8004e6c:	080051f8 	.word	0x080051f8

08004e70 <fiprintf>:
 8004e70:	b40e      	push	{r1, r2, r3}
 8004e72:	b503      	push	{r0, r1, lr}
 8004e74:	4601      	mov	r1, r0
 8004e76:	ab03      	add	r3, sp, #12
 8004e78:	4805      	ldr	r0, [pc, #20]	; (8004e90 <fiprintf+0x20>)
 8004e7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e7e:	6800      	ldr	r0, [r0, #0]
 8004e80:	9301      	str	r3, [sp, #4]
 8004e82:	f7ff fcb3 	bl	80047ec <_vfiprintf_r>
 8004e86:	b002      	add	sp, #8
 8004e88:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e8c:	b003      	add	sp, #12
 8004e8e:	4770      	bx	lr
 8004e90:	2000000c 	.word	0x2000000c

08004e94 <_lseek_r>:
 8004e94:	b538      	push	{r3, r4, r5, lr}
 8004e96:	4604      	mov	r4, r0
 8004e98:	4608      	mov	r0, r1
 8004e9a:	4611      	mov	r1, r2
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	4d05      	ldr	r5, [pc, #20]	; (8004eb4 <_lseek_r+0x20>)
 8004ea0:	602a      	str	r2, [r5, #0]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	f7fc f851 	bl	8000f4a <_lseek>
 8004ea8:	1c43      	adds	r3, r0, #1
 8004eaa:	d102      	bne.n	8004eb2 <_lseek_r+0x1e>
 8004eac:	682b      	ldr	r3, [r5, #0]
 8004eae:	b103      	cbz	r3, 8004eb2 <_lseek_r+0x1e>
 8004eb0:	6023      	str	r3, [r4, #0]
 8004eb2:	bd38      	pop	{r3, r4, r5, pc}
 8004eb4:	20000274 	.word	0x20000274

08004eb8 <__swhatbuf_r>:
 8004eb8:	b570      	push	{r4, r5, r6, lr}
 8004eba:	460e      	mov	r6, r1
 8004ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ec0:	4614      	mov	r4, r2
 8004ec2:	2900      	cmp	r1, #0
 8004ec4:	461d      	mov	r5, r3
 8004ec6:	b096      	sub	sp, #88	; 0x58
 8004ec8:	da08      	bge.n	8004edc <__swhatbuf_r+0x24>
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004ed0:	602a      	str	r2, [r5, #0]
 8004ed2:	061a      	lsls	r2, r3, #24
 8004ed4:	d410      	bmi.n	8004ef8 <__swhatbuf_r+0x40>
 8004ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004eda:	e00e      	b.n	8004efa <__swhatbuf_r+0x42>
 8004edc:	466a      	mov	r2, sp
 8004ede:	f000 f895 	bl	800500c <_fstat_r>
 8004ee2:	2800      	cmp	r0, #0
 8004ee4:	dbf1      	blt.n	8004eca <__swhatbuf_r+0x12>
 8004ee6:	9a01      	ldr	r2, [sp, #4]
 8004ee8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004eec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ef0:	425a      	negs	r2, r3
 8004ef2:	415a      	adcs	r2, r3
 8004ef4:	602a      	str	r2, [r5, #0]
 8004ef6:	e7ee      	b.n	8004ed6 <__swhatbuf_r+0x1e>
 8004ef8:	2340      	movs	r3, #64	; 0x40
 8004efa:	2000      	movs	r0, #0
 8004efc:	6023      	str	r3, [r4, #0]
 8004efe:	b016      	add	sp, #88	; 0x58
 8004f00:	bd70      	pop	{r4, r5, r6, pc}
	...

08004f04 <__smakebuf_r>:
 8004f04:	898b      	ldrh	r3, [r1, #12]
 8004f06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f08:	079d      	lsls	r5, r3, #30
 8004f0a:	4606      	mov	r6, r0
 8004f0c:	460c      	mov	r4, r1
 8004f0e:	d507      	bpl.n	8004f20 <__smakebuf_r+0x1c>
 8004f10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f14:	6023      	str	r3, [r4, #0]
 8004f16:	6123      	str	r3, [r4, #16]
 8004f18:	2301      	movs	r3, #1
 8004f1a:	6163      	str	r3, [r4, #20]
 8004f1c:	b002      	add	sp, #8
 8004f1e:	bd70      	pop	{r4, r5, r6, pc}
 8004f20:	466a      	mov	r2, sp
 8004f22:	ab01      	add	r3, sp, #4
 8004f24:	f7ff ffc8 	bl	8004eb8 <__swhatbuf_r>
 8004f28:	9900      	ldr	r1, [sp, #0]
 8004f2a:	4605      	mov	r5, r0
 8004f2c:	4630      	mov	r0, r6
 8004f2e:	f7ff fbc1 	bl	80046b4 <_malloc_r>
 8004f32:	b948      	cbnz	r0, 8004f48 <__smakebuf_r+0x44>
 8004f34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f38:	059a      	lsls	r2, r3, #22
 8004f3a:	d4ef      	bmi.n	8004f1c <__smakebuf_r+0x18>
 8004f3c:	f023 0303 	bic.w	r3, r3, #3
 8004f40:	f043 0302 	orr.w	r3, r3, #2
 8004f44:	81a3      	strh	r3, [r4, #12]
 8004f46:	e7e3      	b.n	8004f10 <__smakebuf_r+0xc>
 8004f48:	4b0d      	ldr	r3, [pc, #52]	; (8004f80 <__smakebuf_r+0x7c>)
 8004f4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004f4c:	89a3      	ldrh	r3, [r4, #12]
 8004f4e:	6020      	str	r0, [r4, #0]
 8004f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f54:	81a3      	strh	r3, [r4, #12]
 8004f56:	9b00      	ldr	r3, [sp, #0]
 8004f58:	6120      	str	r0, [r4, #16]
 8004f5a:	6163      	str	r3, [r4, #20]
 8004f5c:	9b01      	ldr	r3, [sp, #4]
 8004f5e:	b15b      	cbz	r3, 8004f78 <__smakebuf_r+0x74>
 8004f60:	4630      	mov	r0, r6
 8004f62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f66:	f000 f863 	bl	8005030 <_isatty_r>
 8004f6a:	b128      	cbz	r0, 8004f78 <__smakebuf_r+0x74>
 8004f6c:	89a3      	ldrh	r3, [r4, #12]
 8004f6e:	f023 0303 	bic.w	r3, r3, #3
 8004f72:	f043 0301 	orr.w	r3, r3, #1
 8004f76:	81a3      	strh	r3, [r4, #12]
 8004f78:	89a0      	ldrh	r0, [r4, #12]
 8004f7a:	4305      	orrs	r5, r0
 8004f7c:	81a5      	strh	r5, [r4, #12]
 8004f7e:	e7cd      	b.n	8004f1c <__smakebuf_r+0x18>
 8004f80:	08003cbd 	.word	0x08003cbd

08004f84 <__ascii_mbtowc>:
 8004f84:	b082      	sub	sp, #8
 8004f86:	b901      	cbnz	r1, 8004f8a <__ascii_mbtowc+0x6>
 8004f88:	a901      	add	r1, sp, #4
 8004f8a:	b142      	cbz	r2, 8004f9e <__ascii_mbtowc+0x1a>
 8004f8c:	b14b      	cbz	r3, 8004fa2 <__ascii_mbtowc+0x1e>
 8004f8e:	7813      	ldrb	r3, [r2, #0]
 8004f90:	600b      	str	r3, [r1, #0]
 8004f92:	7812      	ldrb	r2, [r2, #0]
 8004f94:	1e10      	subs	r0, r2, #0
 8004f96:	bf18      	it	ne
 8004f98:	2001      	movne	r0, #1
 8004f9a:	b002      	add	sp, #8
 8004f9c:	4770      	bx	lr
 8004f9e:	4610      	mov	r0, r2
 8004fa0:	e7fb      	b.n	8004f9a <__ascii_mbtowc+0x16>
 8004fa2:	f06f 0001 	mvn.w	r0, #1
 8004fa6:	e7f8      	b.n	8004f9a <__ascii_mbtowc+0x16>

08004fa8 <__malloc_lock>:
 8004fa8:	4801      	ldr	r0, [pc, #4]	; (8004fb0 <__malloc_lock+0x8>)
 8004faa:	f7fe bf5e 	b.w	8003e6a <__retarget_lock_acquire_recursive>
 8004fae:	bf00      	nop
 8004fb0:	20000268 	.word	0x20000268

08004fb4 <__malloc_unlock>:
 8004fb4:	4801      	ldr	r0, [pc, #4]	; (8004fbc <__malloc_unlock+0x8>)
 8004fb6:	f7fe bf59 	b.w	8003e6c <__retarget_lock_release_recursive>
 8004fba:	bf00      	nop
 8004fbc:	20000268 	.word	0x20000268

08004fc0 <_read_r>:
 8004fc0:	b538      	push	{r3, r4, r5, lr}
 8004fc2:	4604      	mov	r4, r0
 8004fc4:	4608      	mov	r0, r1
 8004fc6:	4611      	mov	r1, r2
 8004fc8:	2200      	movs	r2, #0
 8004fca:	4d05      	ldr	r5, [pc, #20]	; (8004fe0 <_read_r+0x20>)
 8004fcc:	602a      	str	r2, [r5, #0]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	f7fb ff5e 	bl	8000e90 <_read>
 8004fd4:	1c43      	adds	r3, r0, #1
 8004fd6:	d102      	bne.n	8004fde <_read_r+0x1e>
 8004fd8:	682b      	ldr	r3, [r5, #0]
 8004fda:	b103      	cbz	r3, 8004fde <_read_r+0x1e>
 8004fdc:	6023      	str	r3, [r4, #0]
 8004fde:	bd38      	pop	{r3, r4, r5, pc}
 8004fe0:	20000274 	.word	0x20000274

08004fe4 <__ascii_wctomb>:
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	4608      	mov	r0, r1
 8004fe8:	b141      	cbz	r1, 8004ffc <__ascii_wctomb+0x18>
 8004fea:	2aff      	cmp	r2, #255	; 0xff
 8004fec:	d904      	bls.n	8004ff8 <__ascii_wctomb+0x14>
 8004fee:	228a      	movs	r2, #138	; 0x8a
 8004ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	4770      	bx	lr
 8004ff8:	2001      	movs	r0, #1
 8004ffa:	700a      	strb	r2, [r1, #0]
 8004ffc:	4770      	bx	lr

08004ffe <abort>:
 8004ffe:	2006      	movs	r0, #6
 8005000:	b508      	push	{r3, lr}
 8005002:	f000 f84d 	bl	80050a0 <raise>
 8005006:	2001      	movs	r0, #1
 8005008:	f7fb ff38 	bl	8000e7c <_exit>

0800500c <_fstat_r>:
 800500c:	b538      	push	{r3, r4, r5, lr}
 800500e:	2300      	movs	r3, #0
 8005010:	4d06      	ldr	r5, [pc, #24]	; (800502c <_fstat_r+0x20>)
 8005012:	4604      	mov	r4, r0
 8005014:	4608      	mov	r0, r1
 8005016:	4611      	mov	r1, r2
 8005018:	602b      	str	r3, [r5, #0]
 800501a:	f7fb ff7d 	bl	8000f18 <_fstat>
 800501e:	1c43      	adds	r3, r0, #1
 8005020:	d102      	bne.n	8005028 <_fstat_r+0x1c>
 8005022:	682b      	ldr	r3, [r5, #0]
 8005024:	b103      	cbz	r3, 8005028 <_fstat_r+0x1c>
 8005026:	6023      	str	r3, [r4, #0]
 8005028:	bd38      	pop	{r3, r4, r5, pc}
 800502a:	bf00      	nop
 800502c:	20000274 	.word	0x20000274

08005030 <_isatty_r>:
 8005030:	b538      	push	{r3, r4, r5, lr}
 8005032:	2300      	movs	r3, #0
 8005034:	4d05      	ldr	r5, [pc, #20]	; (800504c <_isatty_r+0x1c>)
 8005036:	4604      	mov	r4, r0
 8005038:	4608      	mov	r0, r1
 800503a:	602b      	str	r3, [r5, #0]
 800503c:	f7fb ff7b 	bl	8000f36 <_isatty>
 8005040:	1c43      	adds	r3, r0, #1
 8005042:	d102      	bne.n	800504a <_isatty_r+0x1a>
 8005044:	682b      	ldr	r3, [r5, #0]
 8005046:	b103      	cbz	r3, 800504a <_isatty_r+0x1a>
 8005048:	6023      	str	r3, [r4, #0]
 800504a:	bd38      	pop	{r3, r4, r5, pc}
 800504c:	20000274 	.word	0x20000274

08005050 <_raise_r>:
 8005050:	291f      	cmp	r1, #31
 8005052:	b538      	push	{r3, r4, r5, lr}
 8005054:	4604      	mov	r4, r0
 8005056:	460d      	mov	r5, r1
 8005058:	d904      	bls.n	8005064 <_raise_r+0x14>
 800505a:	2316      	movs	r3, #22
 800505c:	6003      	str	r3, [r0, #0]
 800505e:	f04f 30ff 	mov.w	r0, #4294967295
 8005062:	bd38      	pop	{r3, r4, r5, pc}
 8005064:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005066:	b112      	cbz	r2, 800506e <_raise_r+0x1e>
 8005068:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800506c:	b94b      	cbnz	r3, 8005082 <_raise_r+0x32>
 800506e:	4620      	mov	r0, r4
 8005070:	f000 f830 	bl	80050d4 <_getpid_r>
 8005074:	462a      	mov	r2, r5
 8005076:	4601      	mov	r1, r0
 8005078:	4620      	mov	r0, r4
 800507a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800507e:	f000 b817 	b.w	80050b0 <_kill_r>
 8005082:	2b01      	cmp	r3, #1
 8005084:	d00a      	beq.n	800509c <_raise_r+0x4c>
 8005086:	1c59      	adds	r1, r3, #1
 8005088:	d103      	bne.n	8005092 <_raise_r+0x42>
 800508a:	2316      	movs	r3, #22
 800508c:	6003      	str	r3, [r0, #0]
 800508e:	2001      	movs	r0, #1
 8005090:	e7e7      	b.n	8005062 <_raise_r+0x12>
 8005092:	2400      	movs	r4, #0
 8005094:	4628      	mov	r0, r5
 8005096:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800509a:	4798      	blx	r3
 800509c:	2000      	movs	r0, #0
 800509e:	e7e0      	b.n	8005062 <_raise_r+0x12>

080050a0 <raise>:
 80050a0:	4b02      	ldr	r3, [pc, #8]	; (80050ac <raise+0xc>)
 80050a2:	4601      	mov	r1, r0
 80050a4:	6818      	ldr	r0, [r3, #0]
 80050a6:	f7ff bfd3 	b.w	8005050 <_raise_r>
 80050aa:	bf00      	nop
 80050ac:	2000000c 	.word	0x2000000c

080050b0 <_kill_r>:
 80050b0:	b538      	push	{r3, r4, r5, lr}
 80050b2:	2300      	movs	r3, #0
 80050b4:	4d06      	ldr	r5, [pc, #24]	; (80050d0 <_kill_r+0x20>)
 80050b6:	4604      	mov	r4, r0
 80050b8:	4608      	mov	r0, r1
 80050ba:	4611      	mov	r1, r2
 80050bc:	602b      	str	r3, [r5, #0]
 80050be:	f7fb fecd 	bl	8000e5c <_kill>
 80050c2:	1c43      	adds	r3, r0, #1
 80050c4:	d102      	bne.n	80050cc <_kill_r+0x1c>
 80050c6:	682b      	ldr	r3, [r5, #0]
 80050c8:	b103      	cbz	r3, 80050cc <_kill_r+0x1c>
 80050ca:	6023      	str	r3, [r4, #0]
 80050cc:	bd38      	pop	{r3, r4, r5, pc}
 80050ce:	bf00      	nop
 80050d0:	20000274 	.word	0x20000274

080050d4 <_getpid_r>:
 80050d4:	f7fb bebb 	b.w	8000e4e <_getpid>

080050d8 <_init>:
 80050d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050da:	bf00      	nop
 80050dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050de:	bc08      	pop	{r3}
 80050e0:	469e      	mov	lr, r3
 80050e2:	4770      	bx	lr

080050e4 <_fini>:
 80050e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e6:	bf00      	nop
 80050e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ea:	bc08      	pop	{r3}
 80050ec:	469e      	mov	lr, r3
 80050ee:	4770      	bx	lr
